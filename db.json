{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.htm","hash":"d6b2506dc5ea40ace839fee3064354f3efcf6b89","modified":1506580926000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1506508854000},{"_id":"source/.DS_Store","hash":"da7227a84e9f9d1df258f557fd9810c6d61313b5","modified":1506569279000},{"_id":"themes/next/.DS_Store","hash":"0907c08250c0612fdbe8f04ae1e7b3c2ec54d085","modified":1506587616000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1506508854000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1506508854000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1506508854000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1506508854000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1506508854000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1506508854000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1506508854000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1506508854000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1506508854000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1506508854000},{"_id":"themes/next/_config.yml","hash":"c7d3f25c05eb1dc349a68d5c2440670b3620c37e","modified":1506585313000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1506508854000},{"_id":"themes/next/README.md","hash":"950ca6e9c0fa607d290a5b1fd883df44725b36b2","modified":1506508854000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1506508854000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1506508854000},{"_id":"source/_posts/AFHTTPSessionManager.md","hash":"8ed21e3005e7fa9769f562dfc7c2423a658c6a6f","modified":1554112030977},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1554113041062},{"_id":"source/tags/index.md","hash":"1769cc88d5b38c0ca6b34944ce348b9198cb52bd","modified":1463622800000},{"_id":"source/_posts/GCD.md","hash":"34d40cf3a08fc9f3281717987b97ed91e1804f68","modified":1506593568000},{"_id":"source/_posts/时间魔法.md","hash":"f93a2b8933433f25e4f2874130e007c82a86f0e9","modified":1493285321000},{"_id":"source/_posts/时间魔法Swift篇.md","hash":"f517123629abca1045f5dfee06c01fd0bd2b64f6","modified":1506585527000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1506508854000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1506508854000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506508572000},{"_id":"themes/next/.git/packed-refs","hash":"a476816cb73522d446a264df704c6a632081c54a","modified":1506508854000},{"_id":"themes/next/.git/index","hash":"ae7e6ec5286834f14872554f07498526201e4b98","modified":1506508854000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1506508854000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"213d0f6c9c7ed9b035d84486b540a57e24869909","modified":1506508854000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1506508854000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1506508854000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1506508854000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1506508854000},{"_id":"themes/next/languages/en.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1506508854000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1506508854000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1506508854000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1506508854000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1506508854000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1506508854000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1506508854000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1506508854000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1506508854000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b342544b715da19d982349017bd56c5aaca11f71","modified":1506508854000},{"_id":"themes/next/languages/zh-hk.yml","hash":"2ef272bcb1f325480f59f1e2ab95584de3c6b8da","modified":1506508854000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c53941a2eaac8e3a2f8dacc73ed555d3c6c5bd59","modified":1506508854000},{"_id":"themes/next/layout/_layout.swig","hash":"ada7ffc71cf05e7236a19e0648bce6d6d6cbc7dc","modified":1506508854000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1506508854000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1506508854000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1506508854000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1506508854000},{"_id":"themes/next/layout/post.swig","hash":"f8221725bfe3fe52723405b524077973121f17ba","modified":1506508854000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1506508854000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1506508854000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1506508854000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1506508854000},{"_id":"themes/next/source/.DS_Store","hash":"3037d5331d92d3f549f33102664cadfff9459707","modified":1506587623000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1506508854000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1506508854000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1506508854000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506508572000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506508572000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506508572000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506508572000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506508572000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1506508572000},{"_id":"themes/next/.git/logs/HEAD","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1506508572000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506508854000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506508854000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1506508854000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1506508854000},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1506508854000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1506508854000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3e01900762d889a04379abba37b419972e366698","modified":1506508854000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1506508854000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1506508854000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1506508854000},{"_id":"themes/next/layout/_partials/head.swig","hash":"2cbeae795c9929ec1966b8a1fb9c058a0b547fa9","modified":1506508854000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1506508854000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1506508854000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1506508854000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1506508854000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1506508854000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1506508854000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1506508854000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1506508854000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1506508854000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1506508854000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1506508854000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1506508854000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1506508854000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1506508854000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1506508854000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1506508854000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1506508854000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1506508854000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1506508854000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1506508854000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1506508854000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1506508854000},{"_id":"themes/next/source/css/.DS_Store","hash":"db57eca040b81c22da5bcac31c13ebbe8ddc026e","modified":1506587623000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1506508854000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1506508854000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1506508854000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1506508854000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506508854000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506508854000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1506508854000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1506508854000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506508854000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/.git/refs/heads/master","hash":"13d37f01583769457bc3fe358d073c15dca3c674","modified":1506508854000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1506508854000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1506508854000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1506508854000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1506508854000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1506508854000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1506508854000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506508854000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506508854000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506508854000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506508854000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506508854000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"eaa4b101c5884e466705ce5bc02c50e718a43629","modified":1506587770000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506508854000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506508854000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506508854000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506508854000},{"_id":"themes/next/source/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1506508854000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506508854000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506508854000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1506508854000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506508854000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506508854000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506508854000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506508854000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506508854000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1506508854000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"5e6c9f8a730b78c7ce5572d327c2a7311c3609b9","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"264a52c0a7877381f9a6a87d495757a0ba7e29d6","modified":1506508854000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506508854000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506508854000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506508854000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-9cd1cbc0f9c9c0b1b4b9becee91b151145312118.idx","hash":"f84443ef4f2d75ad1dd31ed9f60fb45556aa5136","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8bb08dcb8e5c5dcc5044ef1d8981d8dc16ec6036","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c15f9a179c47c3f61e56577ece63fa8c9393ac6","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506508854000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506508854000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-9cd1cbc0f9c9c0b1b4b9becee91b151145312118.pack","hash":"a678da08e6d3af400e24781b42e2704f700d2bc6","modified":1506508854000},{"_id":"public/404.html","hash":"0a9217d9a4ad2ea0cf7cb76f0b351c8632ef9721","modified":1554113330387},{"_id":"public/tags/index.html","hash":"ced104ee3b864134e83e9f1d1a7a8079219ce4a6","modified":1554113330387},{"_id":"public/archives/index.html","hash":"a7073d747ec4d56eb968bd56c6f745c715b2695c","modified":1554113330387},{"_id":"public/archives/2016/index.html","hash":"169541f3c75f1fc3178813b80caf31d3f99a4074","modified":1554113330387},{"_id":"public/archives/2016/05/index.html","hash":"3f26dcdaacdbefede7d69cbdcd93a47cc86bd20b","modified":1554113330387},{"_id":"public/archives/2016/06/index.html","hash":"c329ce3ba9576beba34a9b2b380d211886b0c73d","modified":1554113330387},{"_id":"public/archives/2017/index.html","hash":"bb7fd168a4067ee96e342945b5483d95b1471d67","modified":1554113330387},{"_id":"public/archives/2017/07/index.html","hash":"94522ec88e3839136c64c8092d1e9ce248c998d1","modified":1554113330387},{"_id":"public/tags/OC/index.html","hash":"6206515042561f3bb675c47a5d0fdf01f86429b6","modified":1554113330388},{"_id":"public/tags/Swift/index.html","hash":"9b0b6189eefbf97e869a37cb6b747d7d338b01b2","modified":1554113330388},{"_id":"public/2017/07/15/AFHTTPSessionManager/index.html","hash":"798e9dc52398c032799d2cc23ded378565f06c9f","modified":1554113330388},{"_id":"public/2016/06/14/GCD/index.html","hash":"64d9d220964fbb3239fe9f17bfd9630be17072ef","modified":1554113330388},{"_id":"public/2016/05/27/时间魔法Swift篇/index.html","hash":"069b4cc0c7c09ed86bbb150206d2f7a915734952","modified":1554113330388},{"_id":"public/2016/05/25/时间魔法/index.html","hash":"0e2749d916bdc8ce0ba6be488a463b5abe9206b4","modified":1554113330388},{"_id":"public/index.html","hash":"983d2ab68a2bafbcb167eed35962ca857618b5ea","modified":1554113330388},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554113330393},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554113330393},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554113330393},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554113330393},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554113330393},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554113330393},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554113330393},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554113330393},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554113330393},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554113330393},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554113330393},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554113330393},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554113330393},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554113330393},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554113330393},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554113330394},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554113330394},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554113330394},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554113330394},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554113330394},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554113330394},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554113330394},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554113330394},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554113330394},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554113330394},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554113330394},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554113330394},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554113330394},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554113330394},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554113330739},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554113330743},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1554113330749},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554113330749},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554113330749},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554113330749},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554113330749},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1554113330749},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1554113330749},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1554113330749},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554113330749},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1554113330749},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1554113330749},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554113330750},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554113330750},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1554113330750},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1554113330750},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1554113330750},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554113330750},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1554113330750},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1554113330750},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554113330750},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554113330750},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554113330750},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554113330750},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554113330750},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1554113330751},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554113330751},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1554113330751},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554113330751},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554113330751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554113330751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554113330751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554113330751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554113330751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554113330751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554113330751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554113330751},{"_id":"public/css/main.css","hash":"88a04c6a30a791d40812f7870a5a0b1aa610b66d","modified":1554113330751},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1554113330751},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1554113330751},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1554113330751},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554113330751},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554113330751},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554113330751},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1554113330751},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1554113330751},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1554113330752},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554113330752},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554113330752},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554113330752},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554113330752},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554113330752},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1554113330752},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554113330752},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554113330752},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1554113330752},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554113330752},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554113330753},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554113330753},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554113330762}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta name=\"robots\" content=\"all\" />\n        <meta name=\"robots\" content=\"index,follow\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n            charset=\"utf-8\" homePageUrl=\"/\"\n            homePageName=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","source":"404.htm","raw":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta name=\"robots\" content=\"all\" />\n        <meta name=\"robots\" content=\"index,follow\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n            charset=\"utf-8\" homePageUrl=\"/\"\n            homePageName=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","date":"2018-08-10T07:41:25.873Z","updated":"2017-09-28T06:42:06.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjty6y6lb00005u03945r52lc","content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"robots\" content=\"all\">\n        <meta name=\"robots\" content=\"index,follow\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"robots\" content=\"all\">\n        <meta name=\"robots\" content=\"index,follow\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n"},{"title":"tags","date":"2016-05-19T01:50:26.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-19 09:50:26\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-19T01:53:20.000Z","path":"tags/index.html","layout":"page","_id":"cjty6y6mn00025u03z0mdk8gb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AFHTTPSessionManager","date":"2017-07-14T16:00:00.000Z","_content":"\n# 概述\nAFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。\n\n<!-- more -->\n\n![Image](AFHTTPSessionManager/AFHTTPSessionManager.png)\n\n# AFHTTPSessionManager\n下面是 AFHTTPSessionManager 引用的类：\n\n.h 文件  \n\n```\n#import <Foundation/Foundation.h>\n#if !TARGET_OS_WATCH\n//提供和联网相关的function, 可用来检查网络连接状态\n#import <SystemConfiguration/SystemConfiguration.h>\n#endif\n#import <TargetConditionals.h>\n\n#if TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV\n#import <MobileCoreServices/MobileCoreServices.h>\n#else\n#import <CoreServices/CoreServices.h>\n#endif\n\n#import \"AFURLSessionManager.h\"\n```\n.m 文件\n\n```\n#import \"AFHTTPSessionManager.h\"\n\n#import \"AFURLRequestSerialization.h\"\n#import \"AFURLResponseSerialization.h\"\n\n#import <Availability.h>\n#import <TargetConditionals.h>\n#import <Security/Security.h>\n\n#import <netinet/in.h>\n#import <netinet6/in6.h>\n#import <arpa/inet.h>\n#import <ifaddrs.h>\n#import <netdb.h>\n\n#if TARGET_OS_IOS || TARGET_OS_TV\n#import <UIKit/UIKit.h>\n#elif TARGET_OS_WATCH\n#import <WatchKit/WatchKit.h>\n#endif\n```\n## 类库介绍\n### SystemConfiguration\n\n### [TargetConditionals](https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/)\n\n“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<TargetConditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  \n\n* TARGET_OS\\_IOS\n* TARGET_OS\\_WATCH\n* TARGET_OS\\_TV    \n\n还有几个有趣的宏：\n\n* TARGET_IPHONE\\_SIMULATOR\n* TARGET_OS\\_MAC\n* TARGET_OS\\_IPHONE\n\n这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET\\_OS\\_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET\\_OS\\_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET\\_OS\\_IPHONE。\n\n\n### Availability  \n\n### Security  \n\n### netinet/in.h\n\n### netinet6/in6.h  \n\n### arpa/inet.h  \n\n### ifaddrs.h  \n\n### netdb.h  \n\n\n\n1. [AFURLSessionManager](http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more) 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；\n\n2. [AFURLRequestSerialization]() 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；\n3. [AFURLResponseSerialization]() 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。\n\nAFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。\n\n```\n- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method\n                                       URLString:(NSString *)URLString\n                                      parameters:(id)parameters\n                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress\n                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress\n                                         success:(void (^)(NSURLSessionDataTask *, id))success\n                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure\n{\n    NSError *serializationError = nil;\n//1.创建 request\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&serializationError];\n    if (serializationError) {\n        if (failure) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n        }\n\n        return nil;\n    }\n//2.创建 dataTask\n    __block NSURLSessionDataTask *dataTask = nil;\n    dataTask = [self dataTaskWithRequest:request\n                          uploadProgress:uploadProgress\n                        downloadProgress:downloadProgress\n                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n        if (error) {\n            if (failure) {\n                failure(dataTask, error);\n            }\n        } else {\n            if (success) {\n                success(dataTask, responseObject);\n            }\n        }\n    }];\n\n    return dataTask;\n}\n```\n以上描述也可以简单的概括为：  \n\n* AFHTTPSessionManager 通过 AFURLRequestSerialization —> request  \n* AFHTTPSessionManager 通过 AFURLSessionManager + request —> dataTask  \n* AFHTTPSessionManager 通过 AFURLResponseSerialization —> 序列化后的请求结果  \n\n# 知识点梳理\n\n## \\#pragma\n[#pragma](http://nshipster.cn/pragma/) 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。\n这里的 [#pragma clang diagnostic ignored \"-Wgnu\"](http://fuckingclangwarnings.com) 就是用来忽略警告的。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n```\n\n## block\n对象 dataTask 在被 [__block](http://www.jianshu.com/p/710026d5bcfb) 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。\n\n```\n__block NSURLSessionDataTask *dataTask = nil;\ndataTask = [self dataTaskWithRequest:request\n                      uploadProgress:uploadProgress\n                    downloadProgress:downloadProgress\n                   completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n    if (error) \n        if (failure) {\n            failure(dataTask, error);\n        }\n    } else {\n        if (success) {\n            success(dataTask, responseObject);\n        }\n    }\n}];\n```\n可以用 clang -rewrite-objc 命令查看它的 c++ 实现：\n\n\n```\n//__block NSURLSessionDataTask *dataTask = nil;\n//============= 对应代码 =============\nstruct __Block_byref_dataTask_0 {\n void *__isa;\n __Block_byref_dataTask_0 *__forwarding;\n int __flags;\n int __size;\n void (*__Block_byref_id_object_copy)(void*, void*);\n void (*__Block_byref_id_object_dispose)(void*);\n NSURLSessionDataTask *dataTask;\n};\n\n//============= block 变量 =============\nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 {\n  struct __block_impl impl;\n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;\n  struct __block_impl *failure;\n  struct __block_impl *success;\n  __Block_byref_dataTask_0 *dataTask; // by ref\n  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(void *fp, struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, void *_failure, void *_success, __Block_byref_dataTask_0 *_dataTask, int flags=0) : failure((struct __block_impl *)_failure), success((struct __block_impl *)_success), dataTask(_dataTask->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n//============= block 函数体 =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, NSURLResponse *response, id responseObject, NSError *error) {\n  __Block_byref_dataTask_0 *dataTask = __cself->dataTask; // bound by ref\n  void (*failure)(NSURLSessionDataTask *, NSError *) = (void (*)(NSURLSessionDataTask *, NSError *))__cself->failure; // bound by copy\n  void (*success)(NSURLSessionDataTask *, id) = (void (*)(NSURLSessionDataTask *, id))__cself->success; // bound by copy\n\n        if (error) {\n            if (failure) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, NSError *))((__block_impl *)failure)->FuncPtr)((__block_impl *)failure, (dataTask->__forwarding->dataTask), error);\n            }\n        } else {\n            if (success) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, id))((__block_impl *)success)->FuncPtr)((__block_impl *)success, (dataTask->__forwarding->dataTask), responseObject);\n            }\n        }\n    }\n    \n//============= copy =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   \nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_assign((void*)&dst->failure, (void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_assign((void*)&dst->dataTask, (void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_assign((void*)&dst->success, (void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n}\n\n//============= release =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_dispose((void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_dispose((void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_dispose((void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);}  \n\n//============= block的内存管理 =============\nstatic struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 {\n  size_t reserved;  \n  size_t Block_size;  \n  void (*copy)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  \n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    \n  void (*dispose)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  \n} __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = { 0,   \nsizeof(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0};  \n```\n在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：\n\n```\nimpl.isa = &_NSConcreteStackBlock;\n```\n\n* _NSConcreteStackBlock：(栈区)  \n\t只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。\n\tStackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。\n\n* _NSConcreteMallocBlock：(堆区)  \n\t有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制\n\n* _NSConcreteGlobalBlock：(全局)  \n   没有用到外界变量或只用到全局变量、静态变量的block为\\_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。\n\n## NSSecure​Coding\n[NSSecureCoding](http://nshipster.cn/nssecurecoding/) 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  \n\nNSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。\n\n## NSParameterAssert\n\n基础类库中定义了两套断言宏：\n\n* [NSAssert / NSCAssert](http://nshipster.cn/nsassertionhandler/)\n* [NSParameterAssert / NSCParameterAssert](http://nshipster.cn/nsassertionhandler/)\n\n基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。  \n第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。  \n第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  \n\nNSAssertionHandler:自定义处理方法,程序不会直接崩溃。  \n\n* 当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用   \n  -handleFailureInMethod:object:file:lineNumber:description: 方法。  \n* 当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用  \n  -handleFailureInFunction:file:lineNumber:description: 方法。\n  \nNSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。  \nPS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。\n\n\n","source":"_posts/AFHTTPSessionManager.md","raw":"---\ntitle: AFHTTPSessionManager\ndate: 2017-07-15 \ntags: OC\n---\n\n# 概述\nAFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。\n\n<!-- more -->\n\n![Image](AFHTTPSessionManager/AFHTTPSessionManager.png)\n\n# AFHTTPSessionManager\n下面是 AFHTTPSessionManager 引用的类：\n\n.h 文件  \n\n```\n#import <Foundation/Foundation.h>\n#if !TARGET_OS_WATCH\n//提供和联网相关的function, 可用来检查网络连接状态\n#import <SystemConfiguration/SystemConfiguration.h>\n#endif\n#import <TargetConditionals.h>\n\n#if TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV\n#import <MobileCoreServices/MobileCoreServices.h>\n#else\n#import <CoreServices/CoreServices.h>\n#endif\n\n#import \"AFURLSessionManager.h\"\n```\n.m 文件\n\n```\n#import \"AFHTTPSessionManager.h\"\n\n#import \"AFURLRequestSerialization.h\"\n#import \"AFURLResponseSerialization.h\"\n\n#import <Availability.h>\n#import <TargetConditionals.h>\n#import <Security/Security.h>\n\n#import <netinet/in.h>\n#import <netinet6/in6.h>\n#import <arpa/inet.h>\n#import <ifaddrs.h>\n#import <netdb.h>\n\n#if TARGET_OS_IOS || TARGET_OS_TV\n#import <UIKit/UIKit.h>\n#elif TARGET_OS_WATCH\n#import <WatchKit/WatchKit.h>\n#endif\n```\n## 类库介绍\n### SystemConfiguration\n\n### [TargetConditionals](https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/)\n\n“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<TargetConditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  \n\n* TARGET_OS\\_IOS\n* TARGET_OS\\_WATCH\n* TARGET_OS\\_TV    \n\n还有几个有趣的宏：\n\n* TARGET_IPHONE\\_SIMULATOR\n* TARGET_OS\\_MAC\n* TARGET_OS\\_IPHONE\n\n这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET\\_OS\\_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET\\_OS\\_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET\\_OS\\_IPHONE。\n\n\n### Availability  \n\n### Security  \n\n### netinet/in.h\n\n### netinet6/in6.h  \n\n### arpa/inet.h  \n\n### ifaddrs.h  \n\n### netdb.h  \n\n\n\n1. [AFURLSessionManager](http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more) 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；\n\n2. [AFURLRequestSerialization]() 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；\n3. [AFURLResponseSerialization]() 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。\n\nAFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。\n\n```\n- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method\n                                       URLString:(NSString *)URLString\n                                      parameters:(id)parameters\n                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress\n                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress\n                                         success:(void (^)(NSURLSessionDataTask *, id))success\n                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure\n{\n    NSError *serializationError = nil;\n//1.创建 request\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&serializationError];\n    if (serializationError) {\n        if (failure) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n        }\n\n        return nil;\n    }\n//2.创建 dataTask\n    __block NSURLSessionDataTask *dataTask = nil;\n    dataTask = [self dataTaskWithRequest:request\n                          uploadProgress:uploadProgress\n                        downloadProgress:downloadProgress\n                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n        if (error) {\n            if (failure) {\n                failure(dataTask, error);\n            }\n        } else {\n            if (success) {\n                success(dataTask, responseObject);\n            }\n        }\n    }];\n\n    return dataTask;\n}\n```\n以上描述也可以简单的概括为：  \n\n* AFHTTPSessionManager 通过 AFURLRequestSerialization —> request  \n* AFHTTPSessionManager 通过 AFURLSessionManager + request —> dataTask  \n* AFHTTPSessionManager 通过 AFURLResponseSerialization —> 序列化后的请求结果  \n\n# 知识点梳理\n\n## \\#pragma\n[#pragma](http://nshipster.cn/pragma/) 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。\n这里的 [#pragma clang diagnostic ignored \"-Wgnu\"](http://fuckingclangwarnings.com) 就是用来忽略警告的。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n```\n\n## block\n对象 dataTask 在被 [__block](http://www.jianshu.com/p/710026d5bcfb) 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。\n\n```\n__block NSURLSessionDataTask *dataTask = nil;\ndataTask = [self dataTaskWithRequest:request\n                      uploadProgress:uploadProgress\n                    downloadProgress:downloadProgress\n                   completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n    if (error) \n        if (failure) {\n            failure(dataTask, error);\n        }\n    } else {\n        if (success) {\n            success(dataTask, responseObject);\n        }\n    }\n}];\n```\n可以用 clang -rewrite-objc 命令查看它的 c++ 实现：\n\n\n```\n//__block NSURLSessionDataTask *dataTask = nil;\n//============= 对应代码 =============\nstruct __Block_byref_dataTask_0 {\n void *__isa;\n __Block_byref_dataTask_0 *__forwarding;\n int __flags;\n int __size;\n void (*__Block_byref_id_object_copy)(void*, void*);\n void (*__Block_byref_id_object_dispose)(void*);\n NSURLSessionDataTask *dataTask;\n};\n\n//============= block 变量 =============\nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 {\n  struct __block_impl impl;\n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;\n  struct __block_impl *failure;\n  struct __block_impl *success;\n  __Block_byref_dataTask_0 *dataTask; // by ref\n  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(void *fp, struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, void *_failure, void *_success, __Block_byref_dataTask_0 *_dataTask, int flags=0) : failure((struct __block_impl *)_failure), success((struct __block_impl *)_success), dataTask(_dataTask->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n//============= block 函数体 =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, NSURLResponse *response, id responseObject, NSError *error) {\n  __Block_byref_dataTask_0 *dataTask = __cself->dataTask; // bound by ref\n  void (*failure)(NSURLSessionDataTask *, NSError *) = (void (*)(NSURLSessionDataTask *, NSError *))__cself->failure; // bound by copy\n  void (*success)(NSURLSessionDataTask *, id) = (void (*)(NSURLSessionDataTask *, id))__cself->success; // bound by copy\n\n        if (error) {\n            if (failure) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, NSError *))((__block_impl *)failure)->FuncPtr)((__block_impl *)failure, (dataTask->__forwarding->dataTask), error);\n            }\n        } else {\n            if (success) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, id))((__block_impl *)success)->FuncPtr)((__block_impl *)success, (dataTask->__forwarding->dataTask), responseObject);\n            }\n        }\n    }\n    \n//============= copy =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   \nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_assign((void*)&dst->failure, (void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_assign((void*)&dst->dataTask, (void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_assign((void*)&dst->success, (void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n}\n\n//============= release =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_dispose((void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_dispose((void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_dispose((void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);}  \n\n//============= block的内存管理 =============\nstatic struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 {\n  size_t reserved;  \n  size_t Block_size;  \n  void (*copy)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  \n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    \n  void (*dispose)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  \n} __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = { 0,   \nsizeof(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0};  \n```\n在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：\n\n```\nimpl.isa = &_NSConcreteStackBlock;\n```\n\n* _NSConcreteStackBlock：(栈区)  \n\t只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。\n\tStackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。\n\n* _NSConcreteMallocBlock：(堆区)  \n\t有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制\n\n* _NSConcreteGlobalBlock：(全局)  \n   没有用到外界变量或只用到全局变量、静态变量的block为\\_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。\n\n## NSSecure​Coding\n[NSSecureCoding](http://nshipster.cn/nssecurecoding/) 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  \n\nNSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。\n\n## NSParameterAssert\n\n基础类库中定义了两套断言宏：\n\n* [NSAssert / NSCAssert](http://nshipster.cn/nsassertionhandler/)\n* [NSParameterAssert / NSCParameterAssert](http://nshipster.cn/nsassertionhandler/)\n\n基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。  \n第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。  \n第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  \n\nNSAssertionHandler:自定义处理方法,程序不会直接崩溃。  \n\n* 当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用   \n  -handleFailureInMethod:object:file:lineNumber:description: 方法。  \n* 当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用  \n  -handleFailureInFunction:file:lineNumber:description: 方法。\n  \nNSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。  \nPS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。\n\n\n","slug":"AFHTTPSessionManager","published":1,"updated":"2019-04-01T09:47:10.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjty6y6ml00015u03qc1sdhg9","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>AFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager.png\" alt=\"Image\"></p>\n<h1 id=\"AFHTTPSessionManager\"><a href=\"#AFHTTPSessionManager\" class=\"headerlink\" title=\"AFHTTPSessionManager\"></a>AFHTTPSessionManager</h1><p>下面是 AFHTTPSessionManager 引用的类：</p>\n<p>.h 文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Foundation/Foundation.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !TARGET_OS_WATCH</span></div><div class=\"line\">//提供和联网相关的function, 可用来检查网络连接状态</div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;SystemConfiguration/SystemConfiguration.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;CoreServices/CoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLSessionManager.h\"</span></span></div></pre></td></tr></table></figure>\n<p>.m 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFHTTPSessionManager.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLRequestSerialization.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLResponseSerialization.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Availability.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Security/Security.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet6/in6.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;arpa/inet.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;ifaddrs.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netdb.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;UIKit/UIKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">elif</span> TARGET_OS_WATCH</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;WatchKit/WatchKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div></pre></td></tr></table></figure>\n<h2 id=\"类库介绍\"><a href=\"#类库介绍\" class=\"headerlink\" title=\"类库介绍\"></a>类库介绍</h2><h3 id=\"SystemConfiguration\"><a href=\"#SystemConfiguration\" class=\"headerlink\" title=\"SystemConfiguration\"></a>SystemConfiguration</h3><h3 id=\"TargetConditionals\"><a href=\"#TargetConditionals\" class=\"headerlink\" title=\"TargetConditionals\"></a><a href=\"https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/\" target=\"_blank\" rel=\"external\">TargetConditionals</a></h3><p>“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<targetconditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  </targetconditionals.h></p>\n<ul>\n<li>TARGET_OS_IOS</li>\n<li>TARGET_OS_WATCH</li>\n<li>TARGET_OS_TV    </li>\n</ul>\n<p>还有几个有趣的宏：</p>\n<ul>\n<li>TARGET_IPHONE_SIMULATOR</li>\n<li>TARGET_OS_MAC</li>\n<li>TARGET_OS_IPHONE</li>\n</ul>\n<p>这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET_OS_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET_OS_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET_OS_IPHONE。</p>\n<h3 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h3><h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><h3 id=\"netinet-in-h\"><a href=\"#netinet-in-h\" class=\"headerlink\" title=\"netinet/in.h\"></a>netinet/in.h</h3><h3 id=\"netinet6-in6-h\"><a href=\"#netinet6-in6-h\" class=\"headerlink\" title=\"netinet6/in6.h\"></a>netinet6/in6.h</h3><h3 id=\"arpa-inet-h\"><a href=\"#arpa-inet-h\" class=\"headerlink\" title=\"arpa/inet.h\"></a>arpa/inet.h</h3><h3 id=\"ifaddrs-h\"><a href=\"#ifaddrs-h\" class=\"headerlink\" title=\"ifaddrs.h\"></a>ifaddrs.h</h3><h3 id=\"netdb-h\"><a href=\"#netdb-h\" class=\"headerlink\" title=\"netdb.h\"></a>netdb.h</h3><ol>\n<li><p><a href=\"http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more\" target=\"_blank\" rel=\"external\">AFURLSessionManager</a> 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；</p>\n</li>\n<li><p><a href=\"\">AFURLRequestSerialization</a> 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；</p>\n</li>\n<li><a href=\"\">AFURLResponseSerialization</a> 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。</li>\n</ol>\n<p>AFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTaskWithHTTPMethod:(<span class=\"built_in\">NSString</span> *)method</div><div class=\"line\">                                       URLString:(<span class=\"built_in\">NSString</span> *)URLString</div><div class=\"line\">                                      parameters:(<span class=\"keyword\">id</span>)parameters</div><div class=\"line\">                                  uploadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *uploadProgress)) uploadProgress</div><div class=\"line\">                                downloadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *downloadProgress)) downloadProgress</div><div class=\"line\">                                         success:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))success</div><div class=\"line\">                                         failure:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))failure</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSError</span> *serializationError = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"comment\">//1.创建 request</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *request = [<span class=\"keyword\">self</span>.requestSerializer requestWithMethod:method URLString:[[<span class=\"built_in\">NSURL</span> URLWithString:URLString relativeToURL:<span class=\"keyword\">self</span>.baseURL] absoluteString] parameters:parameters error:&amp;serializationError];</div><div class=\"line\">    <span class=\"keyword\">if</span> (serializationError) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//2.创建 dataTask</span></div><div class=\"line\">    __block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">    dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                          uploadProgress:uploadProgress</div><div class=\"line\">                        downloadProgress:downloadProgress</div><div class=\"line\">                       completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                failure(dataTask, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                success(dataTask, responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dataTask;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上描述也可以简单的概括为：  </p>\n<ul>\n<li>AFHTTPSessionManager 通过 AFURLRequestSerialization —&gt; request  </li>\n<li>AFHTTPSessionManager 通过 AFURLSessionManager + request —&gt; dataTask  </li>\n<li>AFHTTPSessionManager 通过 AFURLResponseSerialization —&gt; 序列化后的请求结果  </li>\n</ul>\n<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"pragma\"><a href=\"#pragma\" class=\"headerlink\" title=\"#pragma\"></a>#pragma</h2><p><a href=\"http://nshipster.cn/pragma/\" target=\"_blank\" rel=\"external\">#pragma</a> 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。<br>这里的 <a href=\"http://fuckingclangwarnings.com\" target=\"_blank\" rel=\"external\">#pragma clang diagnostic ignored “-Wgnu”</a> 就是用来忽略警告的。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>对象 dataTask 在被 <a href=\"http://www.jianshu.com/p/710026d5bcfb\" target=\"_blank\" rel=\"external\">__block</a> 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                      uploadProgress:uploadProgress</div><div class=\"line\">                    downloadProgress:downloadProgress</div><div class=\"line\">                   completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) </div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">            failure(dataTask, error);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">            success(dataTask, responseObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>可以用 clang -rewrite-objc 命令查看它的 c++ 实现：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//__block NSURLSessionDataTask *dataTask = nil;</span></div><div class=\"line\"><span class=\"comment\">//============= 对应代码 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __Block_byref_dataTask_0 &#123;</div><div class=\"line\"> <span class=\"keyword\">void</span> *__isa;</div><div class=\"line\"> __Block_byref_dataTask_0 *__forwarding;</div><div class=\"line\"> <span class=\"keyword\">int</span> __flags;</div><div class=\"line\"> <span class=\"keyword\">int</span> __size;</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_copy)(<span class=\"keyword\">void</span>*, <span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_dispose)(<span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 变量 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *failure;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *success;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask; <span class=\"comment\">// by ref</span></div><div class=\"line\">  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(<span class=\"keyword\">void</span> *fp, <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, <span class=\"keyword\">void</span> *_failure, <span class=\"keyword\">void</span> *_success, __Block_byref_dataTask_0 *_dataTask, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : failure((<span class=\"keyword\">struct</span> __block_impl *)_failure), success((<span class=\"keyword\">struct</span> __block_impl *)_success), dataTask(_dataTask-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 函数体 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask = __cself-&gt;dataTask; <span class=\"comment\">// bound by ref</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*failure)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))__cself-&gt;failure; <span class=\"comment\">// bound by copy</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*success)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))__cself-&gt;success; <span class=\"comment\">// bound by copy</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))((__block_impl *)failure)-&gt;FuncPtr)((__block_impl *)failure, (dataTask-&gt;__forwarding-&gt;dataTask), error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))((__block_impl *)success)-&gt;FuncPtr)((__block_impl *)success, (dataTask-&gt;__forwarding-&gt;dataTask), responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//============= copy =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   </div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;failure, (<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;dataTask, (<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;success, (<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= release =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block的内存管理 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;  </div><div class=\"line\">  size_t Block_size;  </div><div class=\"line\">  <span class=\"keyword\">void</span> (*<span class=\"keyword\">copy</span>)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  </div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    </div><div class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  </div><div class=\"line\">&#125; __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = &#123; <span class=\"number\">0</span>,   </div><div class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0&#125;;</div></pre></td></tr></table></figure>\n<p>在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">impl.isa = <span class=\"meta\">&amp;_NSConcreteStackBlock;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>_NSConcreteStackBlock：(栈区)<br>  只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。<br>  StackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。</p>\n</li>\n<li><p>_NSConcreteMallocBlock：(堆区)<br>  有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制</p>\n</li>\n<li><p>_NSConcreteGlobalBlock：(全局)<br> 没有用到外界变量或只用到全局变量、静态变量的block为_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。</p>\n</li>\n</ul>\n<h2 id=\"NSSecure​Coding\"><a href=\"#NSSecure​Coding\" class=\"headerlink\" title=\"NSSecure​Coding\"></a>NSSecure​Coding</h2><p><a href=\"http://nshipster.cn/nssecurecoding/\" target=\"_blank\" rel=\"external\">NSSecureCoding</a> 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  </p>\n<p>NSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。</p>\n<h2 id=\"NSParameterAssert\"><a href=\"#NSParameterAssert\" class=\"headerlink\" title=\"NSParameterAssert\"></a>NSParameterAssert</h2><p>基础类库中定义了两套断言宏：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSAssert / NSCAssert</a></li>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSParameterAssert / NSCParameterAssert</a></li>\n</ul>\n<p>基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。<br>第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。<br>第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  </p>\n<p>NSAssertionHandler:自定义处理方法,程序不会直接崩溃。  </p>\n<ul>\n<li>当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInMethod:object:file:lineNumber:description: 方法。  </li>\n<li>当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInFunction:file:lineNumber:description: 方法。</li>\n</ul>\n<p>NSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。<br>PS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>AFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。</p>","more":"<p><img src=\"/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager.png\" alt=\"Image\"></p>\n<h1 id=\"AFHTTPSessionManager\"><a href=\"#AFHTTPSessionManager\" class=\"headerlink\" title=\"AFHTTPSessionManager\"></a>AFHTTPSessionManager</h1><p>下面是 AFHTTPSessionManager 引用的类：</p>\n<p>.h 文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Foundation/Foundation.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !TARGET_OS_WATCH</span></div><div class=\"line\">//提供和联网相关的function, 可用来检查网络连接状态</div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;SystemConfiguration/SystemConfiguration.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;CoreServices/CoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLSessionManager.h\"</span></span></div></pre></td></tr></table></figure>\n<p>.m 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFHTTPSessionManager.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLRequestSerialization.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLResponseSerialization.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Availability.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Security/Security.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet6/in6.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;arpa/inet.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;ifaddrs.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netdb.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;UIKit/UIKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">elif</span> TARGET_OS_WATCH</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;WatchKit/WatchKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div></pre></td></tr></table></figure>\n<h2 id=\"类库介绍\"><a href=\"#类库介绍\" class=\"headerlink\" title=\"类库介绍\"></a>类库介绍</h2><h3 id=\"SystemConfiguration\"><a href=\"#SystemConfiguration\" class=\"headerlink\" title=\"SystemConfiguration\"></a>SystemConfiguration</h3><h3 id=\"TargetConditionals\"><a href=\"#TargetConditionals\" class=\"headerlink\" title=\"TargetConditionals\"></a><a href=\"https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/\" target=\"_blank\" rel=\"external\">TargetConditionals</a></h3><p>“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<targetconditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  </targetconditionals.h></p>\n<ul>\n<li>TARGET_OS_IOS</li>\n<li>TARGET_OS_WATCH</li>\n<li>TARGET_OS_TV    </li>\n</ul>\n<p>还有几个有趣的宏：</p>\n<ul>\n<li>TARGET_IPHONE_SIMULATOR</li>\n<li>TARGET_OS_MAC</li>\n<li>TARGET_OS_IPHONE</li>\n</ul>\n<p>这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET_OS_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET_OS_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET_OS_IPHONE。</p>\n<h3 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h3><h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><h3 id=\"netinet-in-h\"><a href=\"#netinet-in-h\" class=\"headerlink\" title=\"netinet/in.h\"></a>netinet/in.h</h3><h3 id=\"netinet6-in6-h\"><a href=\"#netinet6-in6-h\" class=\"headerlink\" title=\"netinet6/in6.h\"></a>netinet6/in6.h</h3><h3 id=\"arpa-inet-h\"><a href=\"#arpa-inet-h\" class=\"headerlink\" title=\"arpa/inet.h\"></a>arpa/inet.h</h3><h3 id=\"ifaddrs-h\"><a href=\"#ifaddrs-h\" class=\"headerlink\" title=\"ifaddrs.h\"></a>ifaddrs.h</h3><h3 id=\"netdb-h\"><a href=\"#netdb-h\" class=\"headerlink\" title=\"netdb.h\"></a>netdb.h</h3><ol>\n<li><p><a href=\"http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more\" target=\"_blank\" rel=\"external\">AFURLSessionManager</a> 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；</p>\n</li>\n<li><p><a href=\"\">AFURLRequestSerialization</a> 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；</p>\n</li>\n<li><a href=\"\">AFURLResponseSerialization</a> 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。</li>\n</ol>\n<p>AFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTaskWithHTTPMethod:(<span class=\"built_in\">NSString</span> *)method</div><div class=\"line\">                                       URLString:(<span class=\"built_in\">NSString</span> *)URLString</div><div class=\"line\">                                      parameters:(<span class=\"keyword\">id</span>)parameters</div><div class=\"line\">                                  uploadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *uploadProgress)) uploadProgress</div><div class=\"line\">                                downloadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *downloadProgress)) downloadProgress</div><div class=\"line\">                                         success:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))success</div><div class=\"line\">                                         failure:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))failure</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSError</span> *serializationError = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"comment\">//1.创建 request</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *request = [<span class=\"keyword\">self</span>.requestSerializer requestWithMethod:method URLString:[[<span class=\"built_in\">NSURL</span> URLWithString:URLString relativeToURL:<span class=\"keyword\">self</span>.baseURL] absoluteString] parameters:parameters error:&amp;serializationError];</div><div class=\"line\">    <span class=\"keyword\">if</span> (serializationError) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//2.创建 dataTask</span></div><div class=\"line\">    __block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">    dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                          uploadProgress:uploadProgress</div><div class=\"line\">                        downloadProgress:downloadProgress</div><div class=\"line\">                       completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                failure(dataTask, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                success(dataTask, responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dataTask;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上描述也可以简单的概括为：  </p>\n<ul>\n<li>AFHTTPSessionManager 通过 AFURLRequestSerialization —&gt; request  </li>\n<li>AFHTTPSessionManager 通过 AFURLSessionManager + request —&gt; dataTask  </li>\n<li>AFHTTPSessionManager 通过 AFURLResponseSerialization —&gt; 序列化后的请求结果  </li>\n</ul>\n<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"pragma\"><a href=\"#pragma\" class=\"headerlink\" title=\"#pragma\"></a>#pragma</h2><p><a href=\"http://nshipster.cn/pragma/\" target=\"_blank\" rel=\"external\">#pragma</a> 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。<br>这里的 <a href=\"http://fuckingclangwarnings.com\" target=\"_blank\" rel=\"external\">#pragma clang diagnostic ignored “-Wgnu”</a> 就是用来忽略警告的。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>对象 dataTask 在被 <a href=\"http://www.jianshu.com/p/710026d5bcfb\" target=\"_blank\" rel=\"external\">__block</a> 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                      uploadProgress:uploadProgress</div><div class=\"line\">                    downloadProgress:downloadProgress</div><div class=\"line\">                   completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) </div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">            failure(dataTask, error);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">            success(dataTask, responseObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>可以用 clang -rewrite-objc 命令查看它的 c++ 实现：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//__block NSURLSessionDataTask *dataTask = nil;</span></div><div class=\"line\"><span class=\"comment\">//============= 对应代码 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __Block_byref_dataTask_0 &#123;</div><div class=\"line\"> <span class=\"keyword\">void</span> *__isa;</div><div class=\"line\"> __Block_byref_dataTask_0 *__forwarding;</div><div class=\"line\"> <span class=\"keyword\">int</span> __flags;</div><div class=\"line\"> <span class=\"keyword\">int</span> __size;</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_copy)(<span class=\"keyword\">void</span>*, <span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_dispose)(<span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 变量 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *failure;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *success;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask; <span class=\"comment\">// by ref</span></div><div class=\"line\">  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(<span class=\"keyword\">void</span> *fp, <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, <span class=\"keyword\">void</span> *_failure, <span class=\"keyword\">void</span> *_success, __Block_byref_dataTask_0 *_dataTask, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : failure((<span class=\"keyword\">struct</span> __block_impl *)_failure), success((<span class=\"keyword\">struct</span> __block_impl *)_success), dataTask(_dataTask-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 函数体 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask = __cself-&gt;dataTask; <span class=\"comment\">// bound by ref</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*failure)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))__cself-&gt;failure; <span class=\"comment\">// bound by copy</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*success)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))__cself-&gt;success; <span class=\"comment\">// bound by copy</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))((__block_impl *)failure)-&gt;FuncPtr)((__block_impl *)failure, (dataTask-&gt;__forwarding-&gt;dataTask), error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))((__block_impl *)success)-&gt;FuncPtr)((__block_impl *)success, (dataTask-&gt;__forwarding-&gt;dataTask), responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//============= copy =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   </div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;failure, (<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;dataTask, (<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;success, (<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= release =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block的内存管理 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;  </div><div class=\"line\">  size_t Block_size;  </div><div class=\"line\">  <span class=\"keyword\">void</span> (*<span class=\"keyword\">copy</span>)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  </div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    </div><div class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  </div><div class=\"line\">&#125; __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = &#123; <span class=\"number\">0</span>,   </div><div class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0&#125;;</div></pre></td></tr></table></figure>\n<p>在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">impl.isa = <span class=\"meta\">&amp;_NSConcreteStackBlock;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>_NSConcreteStackBlock：(栈区)<br>  只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。<br>  StackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。</p>\n</li>\n<li><p>_NSConcreteMallocBlock：(堆区)<br>  有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制</p>\n</li>\n<li><p>_NSConcreteGlobalBlock：(全局)<br> 没有用到外界变量或只用到全局变量、静态变量的block为_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。</p>\n</li>\n</ul>\n<h2 id=\"NSSecure​Coding\"><a href=\"#NSSecure​Coding\" class=\"headerlink\" title=\"NSSecure​Coding\"></a>NSSecure​Coding</h2><p><a href=\"http://nshipster.cn/nssecurecoding/\" target=\"_blank\" rel=\"external\">NSSecureCoding</a> 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  </p>\n<p>NSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。</p>\n<h2 id=\"NSParameterAssert\"><a href=\"#NSParameterAssert\" class=\"headerlink\" title=\"NSParameterAssert\"></a>NSParameterAssert</h2><p>基础类库中定义了两套断言宏：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSAssert / NSCAssert</a></li>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSParameterAssert / NSCParameterAssert</a></li>\n</ul>\n<p>基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。<br>第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。<br>第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  </p>\n<p>NSAssertionHandler:自定义处理方法,程序不会直接崩溃。  </p>\n<ul>\n<li>当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInMethod:object:file:lineNumber:description: 方法。  </li>\n<li>当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInFunction:file:lineNumber:description: 方法。</li>\n</ul>\n<p>NSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。<br>PS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。</p>"},{"title":"多线程 — GCD","date":"2016-06-13T16:00:00.000Z","_content":"# 简介\nGCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。\n\n<!-- more -->\n![gcd_oc](http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg)\n\n* [官方文档](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/)\n* [WWDC](https://developer.apple.com/videos/play/wwdc2015/718/)\n***\n# 创建队列\n## dispatch_queue_create\n主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。\n\n```\ndispatch_queue_t queue = dispatch_get_main_queue(); //OC\nlet queue = dispatch_get_main_queue()               //Swift\n```\n\n手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。\n\n```\n//OC\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", NULL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT);\n\n//Swift\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", nil);\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL)\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT)\n```\n\n***\n# 创建任务\n## dispatch\\_async / dispatch\\_sync\n同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；\n异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。\n\n* dispatch_sync 同步任务：会阻塞当前线程；\n* dispatch_async 异步任务：不会阻塞当前线程\n\n```\n//OC\ndispatch_sync(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\ndispatch_async(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\n\n//Swift\ndispatch_sync(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\ndispatch_async(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\n```\n***\n## dispatch_after\ndispatch_after只是延时提交block，不是延时立刻执行。\n\n```\ndouble delayInSeconds = 2.0;\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    [self bar];\n});\n```\n\n## dispatch_set_target_queue\ndispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。\n\n（如果将多个串行的queue使用dispatch\\_set\\_target\\_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。\n例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch\\_set\\_target\\_queue了。）\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t firstQueue = dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t secondQueue = dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", DISPATCH_QUEUE_CONCURRENT);\n\ndispatch_set_target_queue(firstQueue, serialQueue);\ndispatch_set_target_queue(secondQueue, serialQueue);\n\ndispatch_async(firstQueue, ^{\n    NSLog(@\"1\");\n    [NSThread sleepForTimeInterval:3.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"2\");\n    [NSThread sleepForTimeInterval:2.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"3\");\n    [NSThread sleepForTimeInterval:1.f];\n});\n```\n\n打印结果1、2、3。\n***\n## dispatch_barrier_async / dispatch_barrier_sync\ndispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。\n\ndispatch_barrier_sync 同上，除了它是同步返回函数。\n```\n//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。\ndispatch_queue_t dataQueue = dispatch_queue_create(\"com.starming.gcddemo.dataqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"read 1\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 2\");\n});\n//等待前面的都完成，在执行barrier后面的\ndispatch_barrier_async(dataQueue, ^{\n    NSLog(@\"write 1\");\n    [NSThread sleepForTimeInterval:1];\n});\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"read 3\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 4\");\n});\n```\n\n打印结果：read 1、read 2、write 1、read 3、read 4。\n\n***\n\n## dispatch_apply\ndispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。\n\n需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_apply(10, concurrentQueue, ^(size_t i) {\n    NSLog(@\"%zu\",i);\n});\ndispatch_async(dispatch_get_main_queue(), ^{\n    dispatch_apply(10, concurrentQueue, ^(size_t i) {\n        NSLog(@\"%zu\",i);\n    });\n});\nNSLog(@\"The end\");\n//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。\n```\n\n对比：\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\nif (explode) {\n    //有问题的情况，可能会死锁\n    for (int i = 0; i < 999 ; i++) {\n        dispatch_async(concurrentQueue, ^{\n            NSLog(@\"wrong %d\",i);\n            //do something hard\n        });\n    }\n} else {\n    //会优化很多，能够利用GCD管理\n    dispatch_apply(999, concurrentQueue, ^(size_t i){\n        NSLog(@\"correct %zu\",i);\n        //do something hard\n    });\n    NSLog(@\"----\");\n}\n```\n\n***\n\n# Dispatch Block\n## dispatch\\_block_create\n自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch\\_block\\_create\\_with\\_qos\\_class中指定QoS类别即可。\n\n```\n//normal way\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"run block\");\n});\ndispatch_async(concurrentQueue, block);\n\n//QOS way\ndispatch_block_t qosBlock = dispatch_block_create_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1, ^{\n    NSLog(@\"run qos block\");\n});\ndispatch_async(concurrentQueue, qosBlock);\n```\n\n***\n\n## dispatch\\_block_wait\n可以根据dispatch block来设置等待时间，参数DISPATCH\\_TIME_FOREVER会一直等待block结束。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"star\");   \n    [NSThread sleepForTimeInterval:5.f];\n    NSLog(@\"end\");\n});\ndispatch_async(serialQueue, block);\n//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成\ndispatch_block_wait(block, DISPATCH_TIME_FOREVER);\nNSLog(@\"ok, now can go on\");//打印结果：star、end、ok, now can go on。\n```\n\n***\n\n## dispatch\\_block_notify\ndispatch\\_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\n//first block执行完才在serial queue中执行second block\ndispatch_block_notify(firstBlock, serialQueue, secondBlock);\n\n//打印结果：first block start、first block end、second block run。\n```\n\n***\n## dispatch\\_block_cancel\niOS8后GCD支持对dispatch block的取消\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_async(serialQueue, secondBlock);\n//取消secondBlock\ndispatch_block_cancel(secondBlock);\n//打印结果：first block start、first block end。\n```\n\n***\n\n# Dispatch_groups\n当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch\\_group 来实现了，dispatch\\_group 能很方便的解决同步的问题。dispatch\\_group_create可以创建一个group对象，然后可以添加block到该组里面。\n\n***\n## dispatch\\_group_create\n创建dispatch\\_group_t\n\n```\ndispatch_group_t group = dispatch_group_create();\n```\n***\n## dispatch\\_group_async\n自己创建队列时，当然就用dispatch\\_group_async函数，简单有效。\n\n```\ndispatch_group_async(group, queue, ^{\n    //Do you work...\n});\n```\n\n***\n\n## dispatch\\_group_wait\ndispatch\\_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n//在group中添加队列的block\ndispatch_group_async(group, concurrentQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_wait(group, DISPATCH_TIME_FOREVER);\nNSLog(@\"can continue\");//打印结果：2、1、can continue。\n```\n\n***\n\n## dispatch\\_group_notify\n功能与dispatch\\_group\\_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch\\_group\\_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, concurrentQueue, ^{\n   [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    NSLog(@\"end\");\n});\n[NSThread sleepForTimeInterval:2.f];\nNSLog(@\"can continue\");//打印结果：2、can continue、1、end。\n```\n\n***\n## dispatch\\_group\\_enter / dispatch\\_group\\_leave\n\n```\nAFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n//Enter group\ndispatch_group_enter(group);\n[manager GET:@\"http://www.baidu.com\" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    //Leave group\n    dispatch_group_leave(group);\n}    failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    //Leave group\n    dispatch_group_leave(group);\n}];\n```\n\n***\n\n## dispatch\\_semaphore_create\ndispatch semaphore用来做解决一些同步的问题，dispatch\\_semaphore\\_create会创建一个信号量，该函数需要传递一个信号值，dispatch\\_semaphore\\_signal会使信号值加1，如果信号值的大小等于1，dispatch\\_semaphore\\_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。\n\n```\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    NSLog(@\"start\");\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"semaphore +1\");\n    dispatch_semaphore_signal(semaphore); //+1 semaphore\n});\ndispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\nNSLog(@\"continue\");//打印结果：start、semaphore +1、continue。\n```\n\n***\n# Dispatch Source\ndispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。\n\nDispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：\n\n| Methods                              | explain     |\n| ------------------------------------ |:-----------:|\n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_ADD        | 变量增加      | \n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_OR         | 变量OR       | \n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_SEND       | Mach端口发送  |\n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_RECV       | MACH端口接收  |\n| DISPATCH_SOURCE\\_TYPE\\_MEMORYPRESSURE  | 内存压力  |\n| DISPATCH_SOURCE\\_TYPE\\_PROC            | 进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号  |\n| DISPATCH_SOURCE\\_TYPE\\_READ            | IO操作，如对文件的操作、socket操作的读响应  |\n| DISPATCH_SOURCE\\_TYPE\\_SIGNAL          | 接收到UNIX信号时响应 |\n| DISPATCH_SOURCE\\_TYPE\\_TIMER           | 定时器  |\n| DISPATCH_SOURCE\\_TYPE\\_VNODE           | 文件状态监听，文件被删除、移动、重命名  |\n| DISPATCH_SOURCE\\_TYPE\\_WRITE           | IO操作，如对文件的操作、socket操作的写响应  |\n\n####方法：\n*  dispatch\\_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。\n*  dispatch_source\\_set\\_event\\_handler：设置事件处理handler\n*  dispatch\\_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。\n\n```\n//监视文件夹内文件变化\nNSURL *directoryURL; //指定需要监听的文件夹路径\nint const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);\nif (fd < 0) {\n    char buffer[80];\n    strerror_r(errno, buffer, sizeof(buffer));\n    NSLog(@\"Unable to open \\\"%@\\\": %s (%d)\", [directoryURL path], buffer, errno);\n    return;\n}\n\n//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,\n                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置响应dispatch源事件的block，在dispatch源指定的队列上运行\ndispatch_source_set_event_handler(source, ^(){\n    \n    //可以通过dispatch_source_get_data(source)来得到dispatch源数据\n    unsigned long const data = dispatch_source_get_data(source);\n    if (data & DISPATCH_VNODE_WRITE) {\n        NSLog(@\"The directory changed.\");\n    }\n    if (data & DISPATCH_VNODE_DELETE) {\n        NSLog(@\"The directory has been deleted.\");\n    }\n});\ndispatch_source_set_cancel_handler(source, ^(){\n    close(fd);\n});\n//dispatch源创建后处于suspend状态，所以需要启动dispatch源\ndispatch_resume(source);\n//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听\n```\n\n***\n\n## dispatch\\_time_t\n\n```\ndispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0/*延迟执行时间*/ * NSEC_PER_SEC));\n\ndispatch_after(delayTime, dispatch_get_main_queue(), ^{\n    [weakSelf delayMethod];\n});\n```\n\n***\n\n## dispatch_source\\_set\\_timer\n\n```\ndispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway);\n```\n\n第一个参数:定时器对象；第二个参数:DISPATCH\\_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  \n\nNSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。\n\n   \nNSEC\\_PER_SEC 1000000000ull  \nUSEC\\_PER_SEC 1000000ull  \nNSEC\\_PER_USEC 1000ull  \n\nNSEC：纳秒；USEC：微妙；SEC：秒；PER：每。\n\n```\n//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置事件的处理handler\ndispatch_source_set_event_handler(source, ^(){\n    NSLog(@\"Time flies.\");\n});\n\n//5秒触发一次，误差100毫秒\ndispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC,100ull * NSEC_PER_MSEC);\n\n//开始处理定时器事件，dispatch_suspend暂停处理事件\ndispatch_resume(source);\n\n```\n\n***\n\n## dispatch_suspend和dispatch\\_resume\n*  dispatch_suspend 挂起队列\n*  dispatch_resume  恢复队列\n\ndispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。\n\n```\ndispatch_queue_t queue = dispatch_queue_create(\"me.kevin.gcd\", DISPATCH_QUEUE_SERIAL);\n\n//提交第一个block，延时5秒打印。\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds...\");\n});\n\n//提交第二个block，也是延时5秒打印\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds again...\");\n});\n\n//延时一秒\nNSLog(@\"sleep 1 second...\");\n[NSThread sleepForTimeInterval:1];\n\n//挂起队列\nNSLog(@\"suspend...\");\ndispatch_suspend(queue);\n\n//延时10秒\nNSLog(@\"sleep 10 second...\");\n[NSThread sleepForTimeInterval:10];\n\n//恢复队列\nNSLog(@\"resume...\");\ndispatch_resume(queue);\n```\n\n可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。\n结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。\n\n***\n\n# 死锁！\n## dispatch_sync导致的死锁\n在main线程使用“同步”方法提交Block，必定会死锁：\n\n```\ndispatch_sync(dispatch_get_main_queue(), ^{\n    NSLog(@\"I am block...\");\n});\n```\n\n嵌套调用可能就会造成死锁：\n\n```\n- (void)updateUI1 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 1\");\n\n        //死锁！\n        [self updateUI2];\n    });\n}\n- (void)updateUI2 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 2\");\n    });\n}\n```\n\n其它情况：\n\n```\n- (void)deadLockCase1 {\n    NSLog(@\"1\");\n    //主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase2 {\n    NSLog(@\"1\");\n    //3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行\n    dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase3 {\n    dispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\n    NSLog(@\"1\");\n    dispatch_async(serialQueue, ^{\n        NSLog(@\"2\");\n        //串行队列里面同步一个串行队列就会死锁\n        dispatch_sync(serialQueue, ^{\n            NSLog(@\"3\");\n        });\n        NSLog(@\"4\");\n    });\n    NSLog(@\"5\");\n}\n```\n\n***\n\n## dispatch_apply导致的死锁:\n\n```\n//在串行队列里嵌套使用dispatch_apply\ndispatch_queue_t queue = dispatch_queue_create(\"me.tutuge.test.gcd\", DISPATCH_QUEUE_SERIAL);\n\ndispatch_apply(3, queue, ^(size_t i) {\n\tNSLog(@\"apply loop: %zu\", i);\n\n    //再来一个dispatch_apply！死锁！\n\tdispatch_apply(3, queue, ^(size_t j) {\n\t\tNSLog(@\"apply loop inside %zu\", j);\n\t});\n});\n```\n","source":"_posts/GCD.md","raw":"---\ntitle: 多线程 — GCD\ndate: 2016-06-14 \ntags: OC\n---\n# 简介\nGCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。\n\n<!-- more -->\n![gcd_oc](http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg)\n\n* [官方文档](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/)\n* [WWDC](https://developer.apple.com/videos/play/wwdc2015/718/)\n***\n# 创建队列\n## dispatch_queue_create\n主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。\n\n```\ndispatch_queue_t queue = dispatch_get_main_queue(); //OC\nlet queue = dispatch_get_main_queue()               //Swift\n```\n\n手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。\n\n```\n//OC\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", NULL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT);\n\n//Swift\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", nil);\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL)\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT)\n```\n\n***\n# 创建任务\n## dispatch\\_async / dispatch\\_sync\n同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；\n异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。\n\n* dispatch_sync 同步任务：会阻塞当前线程；\n* dispatch_async 异步任务：不会阻塞当前线程\n\n```\n//OC\ndispatch_sync(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\ndispatch_async(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\n\n//Swift\ndispatch_sync(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\ndispatch_async(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\n```\n***\n## dispatch_after\ndispatch_after只是延时提交block，不是延时立刻执行。\n\n```\ndouble delayInSeconds = 2.0;\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    [self bar];\n});\n```\n\n## dispatch_set_target_queue\ndispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。\n\n（如果将多个串行的queue使用dispatch\\_set\\_target\\_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。\n例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch\\_set\\_target\\_queue了。）\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t firstQueue = dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t secondQueue = dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", DISPATCH_QUEUE_CONCURRENT);\n\ndispatch_set_target_queue(firstQueue, serialQueue);\ndispatch_set_target_queue(secondQueue, serialQueue);\n\ndispatch_async(firstQueue, ^{\n    NSLog(@\"1\");\n    [NSThread sleepForTimeInterval:3.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"2\");\n    [NSThread sleepForTimeInterval:2.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"3\");\n    [NSThread sleepForTimeInterval:1.f];\n});\n```\n\n打印结果1、2、3。\n***\n## dispatch_barrier_async / dispatch_barrier_sync\ndispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。\n\ndispatch_barrier_sync 同上，除了它是同步返回函数。\n```\n//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。\ndispatch_queue_t dataQueue = dispatch_queue_create(\"com.starming.gcddemo.dataqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"read 1\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 2\");\n});\n//等待前面的都完成，在执行barrier后面的\ndispatch_barrier_async(dataQueue, ^{\n    NSLog(@\"write 1\");\n    [NSThread sleepForTimeInterval:1];\n});\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"read 3\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 4\");\n});\n```\n\n打印结果：read 1、read 2、write 1、read 3、read 4。\n\n***\n\n## dispatch_apply\ndispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。\n\n需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_apply(10, concurrentQueue, ^(size_t i) {\n    NSLog(@\"%zu\",i);\n});\ndispatch_async(dispatch_get_main_queue(), ^{\n    dispatch_apply(10, concurrentQueue, ^(size_t i) {\n        NSLog(@\"%zu\",i);\n    });\n});\nNSLog(@\"The end\");\n//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。\n```\n\n对比：\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\nif (explode) {\n    //有问题的情况，可能会死锁\n    for (int i = 0; i < 999 ; i++) {\n        dispatch_async(concurrentQueue, ^{\n            NSLog(@\"wrong %d\",i);\n            //do something hard\n        });\n    }\n} else {\n    //会优化很多，能够利用GCD管理\n    dispatch_apply(999, concurrentQueue, ^(size_t i){\n        NSLog(@\"correct %zu\",i);\n        //do something hard\n    });\n    NSLog(@\"----\");\n}\n```\n\n***\n\n# Dispatch Block\n## dispatch\\_block_create\n自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch\\_block\\_create\\_with\\_qos\\_class中指定QoS类别即可。\n\n```\n//normal way\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"run block\");\n});\ndispatch_async(concurrentQueue, block);\n\n//QOS way\ndispatch_block_t qosBlock = dispatch_block_create_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1, ^{\n    NSLog(@\"run qos block\");\n});\ndispatch_async(concurrentQueue, qosBlock);\n```\n\n***\n\n## dispatch\\_block_wait\n可以根据dispatch block来设置等待时间，参数DISPATCH\\_TIME_FOREVER会一直等待block结束。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"star\");   \n    [NSThread sleepForTimeInterval:5.f];\n    NSLog(@\"end\");\n});\ndispatch_async(serialQueue, block);\n//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成\ndispatch_block_wait(block, DISPATCH_TIME_FOREVER);\nNSLog(@\"ok, now can go on\");//打印结果：star、end、ok, now can go on。\n```\n\n***\n\n## dispatch\\_block_notify\ndispatch\\_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\n//first block执行完才在serial queue中执行second block\ndispatch_block_notify(firstBlock, serialQueue, secondBlock);\n\n//打印结果：first block start、first block end、second block run。\n```\n\n***\n## dispatch\\_block_cancel\niOS8后GCD支持对dispatch block的取消\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_async(serialQueue, secondBlock);\n//取消secondBlock\ndispatch_block_cancel(secondBlock);\n//打印结果：first block start、first block end。\n```\n\n***\n\n# Dispatch_groups\n当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch\\_group 来实现了，dispatch\\_group 能很方便的解决同步的问题。dispatch\\_group_create可以创建一个group对象，然后可以添加block到该组里面。\n\n***\n## dispatch\\_group_create\n创建dispatch\\_group_t\n\n```\ndispatch_group_t group = dispatch_group_create();\n```\n***\n## dispatch\\_group_async\n自己创建队列时，当然就用dispatch\\_group_async函数，简单有效。\n\n```\ndispatch_group_async(group, queue, ^{\n    //Do you work...\n});\n```\n\n***\n\n## dispatch\\_group_wait\ndispatch\\_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n//在group中添加队列的block\ndispatch_group_async(group, concurrentQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_wait(group, DISPATCH_TIME_FOREVER);\nNSLog(@\"can continue\");//打印结果：2、1、can continue。\n```\n\n***\n\n## dispatch\\_group_notify\n功能与dispatch\\_group\\_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch\\_group\\_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, concurrentQueue, ^{\n   [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    NSLog(@\"end\");\n});\n[NSThread sleepForTimeInterval:2.f];\nNSLog(@\"can continue\");//打印结果：2、can continue、1、end。\n```\n\n***\n## dispatch\\_group\\_enter / dispatch\\_group\\_leave\n\n```\nAFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n//Enter group\ndispatch_group_enter(group);\n[manager GET:@\"http://www.baidu.com\" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    //Leave group\n    dispatch_group_leave(group);\n}    failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    //Leave group\n    dispatch_group_leave(group);\n}];\n```\n\n***\n\n## dispatch\\_semaphore_create\ndispatch semaphore用来做解决一些同步的问题，dispatch\\_semaphore\\_create会创建一个信号量，该函数需要传递一个信号值，dispatch\\_semaphore\\_signal会使信号值加1，如果信号值的大小等于1，dispatch\\_semaphore\\_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。\n\n```\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    NSLog(@\"start\");\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"semaphore +1\");\n    dispatch_semaphore_signal(semaphore); //+1 semaphore\n});\ndispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\nNSLog(@\"continue\");//打印结果：start、semaphore +1、continue。\n```\n\n***\n# Dispatch Source\ndispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。\n\nDispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：\n\n| Methods                              | explain     |\n| ------------------------------------ |:-----------:|\n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_ADD        | 变量增加      | \n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_OR         | 变量OR       | \n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_SEND       | Mach端口发送  |\n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_RECV       | MACH端口接收  |\n| DISPATCH_SOURCE\\_TYPE\\_MEMORYPRESSURE  | 内存压力  |\n| DISPATCH_SOURCE\\_TYPE\\_PROC            | 进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号  |\n| DISPATCH_SOURCE\\_TYPE\\_READ            | IO操作，如对文件的操作、socket操作的读响应  |\n| DISPATCH_SOURCE\\_TYPE\\_SIGNAL          | 接收到UNIX信号时响应 |\n| DISPATCH_SOURCE\\_TYPE\\_TIMER           | 定时器  |\n| DISPATCH_SOURCE\\_TYPE\\_VNODE           | 文件状态监听，文件被删除、移动、重命名  |\n| DISPATCH_SOURCE\\_TYPE\\_WRITE           | IO操作，如对文件的操作、socket操作的写响应  |\n\n####方法：\n*  dispatch\\_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。\n*  dispatch_source\\_set\\_event\\_handler：设置事件处理handler\n*  dispatch\\_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。\n\n```\n//监视文件夹内文件变化\nNSURL *directoryURL; //指定需要监听的文件夹路径\nint const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);\nif (fd < 0) {\n    char buffer[80];\n    strerror_r(errno, buffer, sizeof(buffer));\n    NSLog(@\"Unable to open \\\"%@\\\": %s (%d)\", [directoryURL path], buffer, errno);\n    return;\n}\n\n//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,\n                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置响应dispatch源事件的block，在dispatch源指定的队列上运行\ndispatch_source_set_event_handler(source, ^(){\n    \n    //可以通过dispatch_source_get_data(source)来得到dispatch源数据\n    unsigned long const data = dispatch_source_get_data(source);\n    if (data & DISPATCH_VNODE_WRITE) {\n        NSLog(@\"The directory changed.\");\n    }\n    if (data & DISPATCH_VNODE_DELETE) {\n        NSLog(@\"The directory has been deleted.\");\n    }\n});\ndispatch_source_set_cancel_handler(source, ^(){\n    close(fd);\n});\n//dispatch源创建后处于suspend状态，所以需要启动dispatch源\ndispatch_resume(source);\n//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听\n```\n\n***\n\n## dispatch\\_time_t\n\n```\ndispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0/*延迟执行时间*/ * NSEC_PER_SEC));\n\ndispatch_after(delayTime, dispatch_get_main_queue(), ^{\n    [weakSelf delayMethod];\n});\n```\n\n***\n\n## dispatch_source\\_set\\_timer\n\n```\ndispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway);\n```\n\n第一个参数:定时器对象；第二个参数:DISPATCH\\_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  \n\nNSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。\n\n   \nNSEC\\_PER_SEC 1000000000ull  \nUSEC\\_PER_SEC 1000000ull  \nNSEC\\_PER_USEC 1000ull  \n\nNSEC：纳秒；USEC：微妙；SEC：秒；PER：每。\n\n```\n//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置事件的处理handler\ndispatch_source_set_event_handler(source, ^(){\n    NSLog(@\"Time flies.\");\n});\n\n//5秒触发一次，误差100毫秒\ndispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC,100ull * NSEC_PER_MSEC);\n\n//开始处理定时器事件，dispatch_suspend暂停处理事件\ndispatch_resume(source);\n\n```\n\n***\n\n## dispatch_suspend和dispatch\\_resume\n*  dispatch_suspend 挂起队列\n*  dispatch_resume  恢复队列\n\ndispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。\n\n```\ndispatch_queue_t queue = dispatch_queue_create(\"me.kevin.gcd\", DISPATCH_QUEUE_SERIAL);\n\n//提交第一个block，延时5秒打印。\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds...\");\n});\n\n//提交第二个block，也是延时5秒打印\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds again...\");\n});\n\n//延时一秒\nNSLog(@\"sleep 1 second...\");\n[NSThread sleepForTimeInterval:1];\n\n//挂起队列\nNSLog(@\"suspend...\");\ndispatch_suspend(queue);\n\n//延时10秒\nNSLog(@\"sleep 10 second...\");\n[NSThread sleepForTimeInterval:10];\n\n//恢复队列\nNSLog(@\"resume...\");\ndispatch_resume(queue);\n```\n\n可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。\n结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。\n\n***\n\n# 死锁！\n## dispatch_sync导致的死锁\n在main线程使用“同步”方法提交Block，必定会死锁：\n\n```\ndispatch_sync(dispatch_get_main_queue(), ^{\n    NSLog(@\"I am block...\");\n});\n```\n\n嵌套调用可能就会造成死锁：\n\n```\n- (void)updateUI1 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 1\");\n\n        //死锁！\n        [self updateUI2];\n    });\n}\n- (void)updateUI2 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 2\");\n    });\n}\n```\n\n其它情况：\n\n```\n- (void)deadLockCase1 {\n    NSLog(@\"1\");\n    //主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase2 {\n    NSLog(@\"1\");\n    //3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行\n    dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase3 {\n    dispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\n    NSLog(@\"1\");\n    dispatch_async(serialQueue, ^{\n        NSLog(@\"2\");\n        //串行队列里面同步一个串行队列就会死锁\n        dispatch_sync(serialQueue, ^{\n            NSLog(@\"3\");\n        });\n        NSLog(@\"4\");\n    });\n    NSLog(@\"5\");\n}\n```\n\n***\n\n## dispatch_apply导致的死锁:\n\n```\n//在串行队列里嵌套使用dispatch_apply\ndispatch_queue_t queue = dispatch_queue_create(\"me.tutuge.test.gcd\", DISPATCH_QUEUE_SERIAL);\n\ndispatch_apply(3, queue, ^(size_t i) {\n\tNSLog(@\"apply loop: %zu\", i);\n\n    //再来一个dispatch_apply！死锁！\n\tdispatch_apply(3, queue, ^(size_t j) {\n\t\tNSLog(@\"apply loop inside %zu\", j);\n\t});\n});\n```\n","slug":"GCD","published":1,"updated":"2017-09-28T10:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjty6y6mo00035u03jq3v5wyb","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>GCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg\" alt=\"gcd_oc\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2015/718/\" target=\"_blank\" rel=\"external\">WWDC</a></li>\n</ul>\n<hr>\n<h1 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h1><h2 id=\"dispatch-queue-create\"><a href=\"#dispatch-queue-create\" class=\"headerlink\" title=\"dispatch_queue_create\"></a>dispatch_queue_create</h2><p>主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_main_queue(); <span class=\"comment\">//OC</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_get_main_queue()               <span class=\"comment\">//Swift</span></div></pre></td></tr></table></figure>\n<p>手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//OC</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Swift</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, nil);</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL)</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建任务\"><a href=\"#创建任务\" class=\"headerlink\" title=\"创建任务\"></a>创建任务</h1><h2 id=\"dispatch-async-dispatch-sync\"><a href=\"#dispatch-async-dispatch-sync\" class=\"headerlink\" title=\"dispatch_async / dispatch_sync\"></a>dispatch_async / dispatch_sync</h2><p>同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；<br>异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。</p>\n<ul>\n<li>dispatch_sync 同步任务：会阻塞当前线程；</li>\n<li>dispatch_async 异步任务：不会阻塞当前线程</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//OC</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//Swift</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h2><p>dispatch_after只是延时提交block，不是延时立刻执行。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">double delayInSeconds = <span class=\"number\">2</span>.<span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t) (delayInSeconds * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^(void)&#123;</div><div class=\"line\">    [self <span class=\"keyword\">bar];</span></div><div class=\"line\"><span class=\"keyword\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"dispatch-set-target-queue\"><a href=\"#dispatch-set-target-queue\" class=\"headerlink\" title=\"dispatch_set_target_queue\"></a>dispatch_set_target_queue</h2><p>dispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。</p>\n<p>（如果将多个串行的queue使用dispatch_set_target_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。<br>例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch_set_target_queue了。）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>serialQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>firstQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>secondQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\"></span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(firstQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(secondQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dispatch_async(firstQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">3</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"3\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>打印结果1、2、3。</p>\n<hr>\n<h2 id=\"dispatch-barrier-async-dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async / dispatch_barrier_sync\"></a>dispatch_barrier_async / dispatch_barrier_sync</h2><p>dispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。</p>\n<p>dispatch_barrier_sync 同上，除了它是同步返回函数。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.dataqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//等待前面的都完成，在执行barrier后面的</span></div><div class=\"line\">dispatch_barrier_async(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"write 1\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 3\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 4\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>打印结果：read 1、read 2、write 1、read 3、read 4。</p>\n<hr>\n<h2 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h2><p>dispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。</p>\n<p>需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The end\"</span>);</div><div class=\"line\"><span class=\"comment\">//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。</span></div></pre></td></tr></table></figure>\n<p>对比：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"><span class=\"keyword\">if</span> (explode) &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的情况，可能会死锁</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">999</span> ; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"wrong %d\"</span>,i);</div><div class=\"line\">            <span class=\"comment\">//do something hard</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//会优化很多，能够利用GCD管理</span></div><div class=\"line\">    dispatch_apply(<span class=\"number\">999</span>, concurrentQueue, ^(size_t i)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"correct %zu\"</span>,i);</div><div class=\"line\">        <span class=\"comment\">//do something hard</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"----\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Block\"><a href=\"#Dispatch-Block\" class=\"headerlink\" title=\"Dispatch Block\"></a>Dispatch Block</h1><h2 id=\"dispatch-block-create\"><a href=\"#dispatch-block-create\" class=\"headerlink\" title=\"dispatch_block_create\"></a>dispatch_block_create</h2><p>自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch_block_create_with_qos_class中指定QoS类别即可。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//normal way</div><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, block)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//QOS way</div><div class=\"line\">dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class=\"number\">0</span>, QOS_CLASS_USER_INITIATED, <span class=\"number\">-1</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run qos block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, qosBlock)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-wait\"><a href=\"#dispatch-block-wait\" class=\"headerlink\" title=\"dispatch_block_wait\"></a>dispatch_block_wait</h2><p>可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"star\"</span>);   </div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, block);</div><div class=\"line\"><span class=\"comment\">//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成</span></div><div class=\"line\">dispatch_block_wait(block, DISPATCH_TIME_FOREVER);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"ok, now can go on\"</span>);<span class=\"comment\">//打印结果：star、end、ok, now can go on。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-notify\"><a href=\"#dispatch-block-notify\" class=\"headerlink\" title=\"dispatch_block_notify\"></a>dispatch_block_notify</h2><p>dispatch_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//first block执行完才在serial queue中执行second block</span></div><div class=\"line\">dispatch_block_notify(firstBlock, serialQueue, secondBlock);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end、second block run。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-cancel\"><a href=\"#dispatch-block-cancel\" class=\"headerlink\" title=\"dispatch_block_cancel\"></a>dispatch_block_cancel</h2><p>iOS8后GCD支持对dispatch block的取消</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, secondBlock);</div><div class=\"line\"><span class=\"comment\">//取消secondBlock</span></div><div class=\"line\">dispatch_block_cancel(secondBlock);</div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-groups\"><a href=\"#Dispatch-groups\" class=\"headerlink\" title=\"Dispatch_groups\"></a>Dispatch_groups</h1><p>当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch_group 来实现了，dispatch_group 能很方便的解决同步的问题。dispatch_group_create可以创建一个group对象，然后可以添加block到该组里面。</p>\n<hr>\n<h2 id=\"dispatch-group-create\"><a href=\"#dispatch-group-create\" class=\"headerlink\" title=\"dispatch_group_create\"></a>dispatch_group_create</h2><p>创建dispatch_group_t</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_t<span class=\"built_in\"> group </span>= dispatch_group_create();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-async\"><a href=\"#dispatch-group-async\" class=\"headerlink\" title=\"dispatch_group_async\"></a>dispatch_group_async</h2><p>自己创建队列时，当然就用dispatch_group_async函数，简单有效。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, <span class=\"built_in\">queue</span>, ^&#123;</div><div class=\"line\">    <span class=\"comment\">//Do you work...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-wait\"><a href=\"#dispatch-group-wait\" class=\"headerlink\" title=\"dispatch_group_wait\"></a>dispatch_group_wait</h2><p>dispatch_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_group_t <span class=\"keyword\">group</span> = dispatch_group_create();</div><div class=\"line\"><span class=\"comment\">//在group中添加队列的block</span></div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    [<span class=\"meta\">NSThread sleepForTimeInterval:2.f</span>];</div><div class=\"line\">    NSLog(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_wait(<span class=\"keyword\">group</span>, DISPATCH_TIME_FOREVER);</div><div class=\"line\">NSLog(<span class=\"string\">@\"can continue\"</span>);<span class=\"comment\">//打印结果：2、1、can continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-notify\"><a href=\"#dispatch-group-notify\" class=\"headerlink\" title=\"dispatch_group_notify\"></a>dispatch_group_notify</h2><p>功能与dispatch_group_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch_group_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>concurrentQueue = <span class=\"keyword\">dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">   [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_notify(group, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">[NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"can continue\"</span>)<span class=\"comment\">;//打印结果：2、can continue、1、end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-enter-dispatch-group-leave\"><a href=\"#dispatch-group-enter-dispatch-group-leave\" class=\"headerlink\" title=\"dispatch_group_enter / dispatch_group_leave\"></a>dispatch_group_enter / dispatch_group_leave</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class=\"line\"></div><div class=\"line\">//Enter group</div><div class=\"line\">dispatch_group_enter(group);</div><div class=\"line\">[manager GET:@<span class=\"string\">\"http://www.baidu.com\"</span> parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class=\"line\"></div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-semaphore-create\"><a href=\"#dispatch-semaphore-create\" class=\"headerlink\" title=\"dispatch_semaphore_create\"></a>dispatch_semaphore_create</h2><p>dispatch semaphore用来做解决一些同步的问题，dispatch_semaphore_create会创建一个信号量，该函数需要传递一个信号值，dispatch_semaphore_signal会使信号值加1，如果信号值的大小等于1，dispatch_semaphore_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">dispatch_get_global_queue</span>(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"start\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"semaphore +1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_semaphore_signal(<span class=\"name\">semaphore</span>)<span class=\"comment\">; //+1 semaphore</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_semaphore_wait(<span class=\"name\">semaphore</span>, DISPATCH_TIME_FOREVER)<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"continue\"</span>)<span class=\"comment\">;//打印结果：start、semaphore +1、continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Source\"><a href=\"#Dispatch-Source\" class=\"headerlink\" title=\"Dispatch Source\"></a>Dispatch Source</h1><p>dispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。</p>\n<p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th style=\"text-align:center\">explain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>\n<td style=\"text-align:center\">变量增加</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_OR</td>\n<td style=\"text-align:center\">变量OR</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_SEND</td>\n<td style=\"text-align:center\">Mach端口发送</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_RECV</td>\n<td style=\"text-align:center\">MACH端口接收</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>\n<td style=\"text-align:center\">内存压力</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_PROC</td>\n<td style=\"text-align:center\">进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_READ</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的读响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_SIGNAL</td>\n<td style=\"text-align:center\">接收到UNIX信号时响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_TIMER</td>\n<td style=\"text-align:center\">定时器</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_VNODE</td>\n<td style=\"text-align:center\">文件状态监听，文件被删除、移动、重命名</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_WRITE</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的写响应</td>\n</tr>\n</tbody>\n</table>\n<p>####方法：</p>\n<ul>\n<li>dispatch_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。</li>\n<li>dispatch_source_set_event_handler：设置事件处理handler</li>\n<li>dispatch_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//监视文件夹内文件变化</span></div><div class=\"line\">NSURL *directoryURL; <span class=\"comment\">//指定需要监听的文件夹路径</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> fd = <span class=\"built_in\">open</span>([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class=\"line\"><span class=\"built_in\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">80</span>];</div><div class=\"line\">    strerror_r(errno, <span class=\"built_in\">buffer</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Unable to open \\\"%@\\\": %s (%d)\"</span>, [directoryURL path], <span class=\"built_in\">buffer</span>, errno);</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列</span></div><div class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class=\"line\">                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置响应dispatch源事件的block，在dispatch源指定的队列上运行</span></div><div class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以通过dispatch_source_get_data(source)来得到dispatch源数据</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">const</span> data = dispatch_source_get_data(source);</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory changed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory has been deleted.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class=\"line\">    <span class=\"built_in\">close</span>(fd);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//dispatch源创建后处于suspend状态，所以需要启动dispatch源</span></div><div class=\"line\">dispatch_resume(source);</div><div class=\"line\"><span class=\"comment\">//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-time-t\"><a href=\"#dispatch-time-t\" class=\"headerlink\" title=\"dispatch_time_t\"></a>dispatch_time_t</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_time_t delayTime = dispatch_time(<span class=\"name\">DISPATCH_TIME_NOW</span>, (<span class=\"name\">int64_t</span>)(<span class=\"number\">2.0</span>/*延迟执行时间*/ * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_after(<span class=\"name\">delayTime</span>, dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    [weakSelf delayMethod]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-source-set-timer\"><a href=\"#dispatch-source-set-timer\" class=\"headerlink\" title=\"dispatch_source_set_timer\"></a>dispatch_source_set_timer</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">dispatch_source_t</span> source, <span class=\"keyword\">dispatch_time_t</span> start, <span class=\"keyword\">uint64_t</span> interval, <span class=\"keyword\">uint64_t</span> leeway);</div></pre></td></tr></table></figure>\n<p>第一个参数:定时器对象；第二个参数:DISPATCH_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  </p>\n<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。</p>\n<p>NSEC_PER_SEC 1000000000ull<br>USEC_PER_SEC 1000000ull<br>NSEC_PER_USEC 1000ull  </p>\n<p>NSEC：纳秒；USEC：微妙；SEC：秒；PER：每。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。</span></div><div class=\"line\">dispatch_source_t <span class=\"keyword\">source</span> = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,<span class=\"number\">0</span>, <span class=\"number\">0</span>, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置事件的处理handler</span></div><div class=\"line\">dispatch_source_set_event_handler(<span class=\"keyword\">source</span>, ^()&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Time flies.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//5秒触发一次，误差100毫秒</span></div><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">source</span>, DISPATCH_TIME_NOW, <span class=\"number\">5</span>ull * NSEC_PER_SEC,<span class=\"number\">100</span>ull * NSEC_PER_MSEC);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始处理定时器事件，dispatch_suspend暂停处理事件</span></div><div class=\"line\">dispatch_resume(<span class=\"keyword\">source</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-suspend和dispatch-resume\"><a href=\"#dispatch-suspend和dispatch-resume\" class=\"headerlink\" title=\"dispatch_suspend和dispatch_resume\"></a>dispatch_suspend和dispatch_resume</h2><ul>\n<li>dispatch_suspend 挂起队列</li>\n<li>dispatch_resume  恢复队列</li>\n</ul>\n<p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"string\">\"me.kevin.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第一个block，延时5秒打印。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第二个block，也是延时5秒打印</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds again...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时一秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 1 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//挂起队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"suspend...\"</span>);</div><div class=\"line\">dispatch_suspend(queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时10秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 10 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//恢复队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"resume...\"</span>);</div><div class=\"line\">dispatch_resume(queue);</div></pre></td></tr></table></figure>\n<p>可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。<br>结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。</p>\n<hr>\n<h1 id=\"死锁！\"><a href=\"#死锁！\" class=\"headerlink\" title=\"死锁！\"></a>死锁！</h1><h2 id=\"dispatch-sync导致的死锁\"><a href=\"#dispatch-sync导致的死锁\" class=\"headerlink\" title=\"dispatch_sync导致的死锁\"></a>dispatch_sync导致的死锁</h2><p>在main线程使用“同步”方法提交Block，必定会死锁：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"I am block...\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>嵌套调用可能就会造成死锁：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI1 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 1\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//死锁！</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> updateUI2];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI2 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其它情况：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase1 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase2 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase3 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(serialQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">        <span class=\"comment\">//串行队列里面同步一个串行队列就会死锁</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(serialQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"5\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-apply导致的死锁\"><a href=\"#dispatch-apply导致的死锁\" class=\"headerlink\" title=\"dispatch_apply导致的死锁:\"></a>dispatch_apply导致的死锁:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在串行队列里嵌套使用dispatch_apply</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"me.tutuge.test.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">dispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> i) &#123;</div><div class=\"line\">\tNSLog(@<span class=\"string\">\"apply loop: %zu\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再来一个dispatch_apply！死锁！</span></div><div class=\"line\">\tdispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> j) &#123;</div><div class=\"line\">\t\tNSLog(@<span class=\"string\">\"apply loop inside %zu\"</span>, j);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>GCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。</p>","more":"<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg\" alt=\"gcd_oc\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2015/718/\" target=\"_blank\" rel=\"external\">WWDC</a></li>\n</ul>\n<hr>\n<h1 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h1><h2 id=\"dispatch-queue-create\"><a href=\"#dispatch-queue-create\" class=\"headerlink\" title=\"dispatch_queue_create\"></a>dispatch_queue_create</h2><p>主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_main_queue(); <span class=\"comment\">//OC</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_get_main_queue()               <span class=\"comment\">//Swift</span></div></pre></td></tr></table></figure>\n<p>手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//OC</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Swift</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, nil);</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL)</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建任务\"><a href=\"#创建任务\" class=\"headerlink\" title=\"创建任务\"></a>创建任务</h1><h2 id=\"dispatch-async-dispatch-sync\"><a href=\"#dispatch-async-dispatch-sync\" class=\"headerlink\" title=\"dispatch_async / dispatch_sync\"></a>dispatch_async / dispatch_sync</h2><p>同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；<br>异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。</p>\n<ul>\n<li>dispatch_sync 同步任务：会阻塞当前线程；</li>\n<li>dispatch_async 异步任务：不会阻塞当前线程</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//OC</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//Swift</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h2><p>dispatch_after只是延时提交block，不是延时立刻执行。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">double delayInSeconds = <span class=\"number\">2</span>.<span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t) (delayInSeconds * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^(void)&#123;</div><div class=\"line\">    [self <span class=\"keyword\">bar];</span></div><div class=\"line\"><span class=\"keyword\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"dispatch-set-target-queue\"><a href=\"#dispatch-set-target-queue\" class=\"headerlink\" title=\"dispatch_set_target_queue\"></a>dispatch_set_target_queue</h2><p>dispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。</p>\n<p>（如果将多个串行的queue使用dispatch_set_target_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。<br>例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch_set_target_queue了。）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>serialQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>firstQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>secondQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\"></span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(firstQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(secondQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dispatch_async(firstQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">3</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"3\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>打印结果1、2、3。</p>\n<hr>\n<h2 id=\"dispatch-barrier-async-dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async / dispatch_barrier_sync\"></a>dispatch_barrier_async / dispatch_barrier_sync</h2><p>dispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。</p>\n<p>dispatch_barrier_sync 同上，除了它是同步返回函数。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.dataqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//等待前面的都完成，在执行barrier后面的</span></div><div class=\"line\">dispatch_barrier_async(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"write 1\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 3\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 4\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>打印结果：read 1、read 2、write 1、read 3、read 4。</p>\n<hr>\n<h2 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h2><p>dispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。</p>\n<p>需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The end\"</span>);</div><div class=\"line\"><span class=\"comment\">//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。</span></div></pre></td></tr></table></figure>\n<p>对比：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"><span class=\"keyword\">if</span> (explode) &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的情况，可能会死锁</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">999</span> ; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"wrong %d\"</span>,i);</div><div class=\"line\">            <span class=\"comment\">//do something hard</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//会优化很多，能够利用GCD管理</span></div><div class=\"line\">    dispatch_apply(<span class=\"number\">999</span>, concurrentQueue, ^(size_t i)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"correct %zu\"</span>,i);</div><div class=\"line\">        <span class=\"comment\">//do something hard</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"----\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Block\"><a href=\"#Dispatch-Block\" class=\"headerlink\" title=\"Dispatch Block\"></a>Dispatch Block</h1><h2 id=\"dispatch-block-create\"><a href=\"#dispatch-block-create\" class=\"headerlink\" title=\"dispatch_block_create\"></a>dispatch_block_create</h2><p>自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch_block_create_with_qos_class中指定QoS类别即可。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//normal way</div><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, block)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//QOS way</div><div class=\"line\">dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class=\"number\">0</span>, QOS_CLASS_USER_INITIATED, <span class=\"number\">-1</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run qos block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, qosBlock)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-wait\"><a href=\"#dispatch-block-wait\" class=\"headerlink\" title=\"dispatch_block_wait\"></a>dispatch_block_wait</h2><p>可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"star\"</span>);   </div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, block);</div><div class=\"line\"><span class=\"comment\">//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成</span></div><div class=\"line\">dispatch_block_wait(block, DISPATCH_TIME_FOREVER);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"ok, now can go on\"</span>);<span class=\"comment\">//打印结果：star、end、ok, now can go on。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-notify\"><a href=\"#dispatch-block-notify\" class=\"headerlink\" title=\"dispatch_block_notify\"></a>dispatch_block_notify</h2><p>dispatch_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//first block执行完才在serial queue中执行second block</span></div><div class=\"line\">dispatch_block_notify(firstBlock, serialQueue, secondBlock);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end、second block run。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-cancel\"><a href=\"#dispatch-block-cancel\" class=\"headerlink\" title=\"dispatch_block_cancel\"></a>dispatch_block_cancel</h2><p>iOS8后GCD支持对dispatch block的取消</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, secondBlock);</div><div class=\"line\"><span class=\"comment\">//取消secondBlock</span></div><div class=\"line\">dispatch_block_cancel(secondBlock);</div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-groups\"><a href=\"#Dispatch-groups\" class=\"headerlink\" title=\"Dispatch_groups\"></a>Dispatch_groups</h1><p>当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch_group 来实现了，dispatch_group 能很方便的解决同步的问题。dispatch_group_create可以创建一个group对象，然后可以添加block到该组里面。</p>\n<hr>\n<h2 id=\"dispatch-group-create\"><a href=\"#dispatch-group-create\" class=\"headerlink\" title=\"dispatch_group_create\"></a>dispatch_group_create</h2><p>创建dispatch_group_t</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_t<span class=\"built_in\"> group </span>= dispatch_group_create();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-async\"><a href=\"#dispatch-group-async\" class=\"headerlink\" title=\"dispatch_group_async\"></a>dispatch_group_async</h2><p>自己创建队列时，当然就用dispatch_group_async函数，简单有效。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, <span class=\"built_in\">queue</span>, ^&#123;</div><div class=\"line\">    <span class=\"comment\">//Do you work...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-wait\"><a href=\"#dispatch-group-wait\" class=\"headerlink\" title=\"dispatch_group_wait\"></a>dispatch_group_wait</h2><p>dispatch_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_group_t <span class=\"keyword\">group</span> = dispatch_group_create();</div><div class=\"line\"><span class=\"comment\">//在group中添加队列的block</span></div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    [<span class=\"meta\">NSThread sleepForTimeInterval:2.f</span>];</div><div class=\"line\">    NSLog(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_wait(<span class=\"keyword\">group</span>, DISPATCH_TIME_FOREVER);</div><div class=\"line\">NSLog(<span class=\"string\">@\"can continue\"</span>);<span class=\"comment\">//打印结果：2、1、can continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-notify\"><a href=\"#dispatch-group-notify\" class=\"headerlink\" title=\"dispatch_group_notify\"></a>dispatch_group_notify</h2><p>功能与dispatch_group_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch_group_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>concurrentQueue = <span class=\"keyword\">dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">   [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_notify(group, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">[NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"can continue\"</span>)<span class=\"comment\">;//打印结果：2、can continue、1、end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-enter-dispatch-group-leave\"><a href=\"#dispatch-group-enter-dispatch-group-leave\" class=\"headerlink\" title=\"dispatch_group_enter / dispatch_group_leave\"></a>dispatch_group_enter / dispatch_group_leave</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class=\"line\"></div><div class=\"line\">//Enter group</div><div class=\"line\">dispatch_group_enter(group);</div><div class=\"line\">[manager GET:@<span class=\"string\">\"http://www.baidu.com\"</span> parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class=\"line\"></div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-semaphore-create\"><a href=\"#dispatch-semaphore-create\" class=\"headerlink\" title=\"dispatch_semaphore_create\"></a>dispatch_semaphore_create</h2><p>dispatch semaphore用来做解决一些同步的问题，dispatch_semaphore_create会创建一个信号量，该函数需要传递一个信号值，dispatch_semaphore_signal会使信号值加1，如果信号值的大小等于1，dispatch_semaphore_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">dispatch_get_global_queue</span>(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"start\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"semaphore +1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_semaphore_signal(<span class=\"name\">semaphore</span>)<span class=\"comment\">; //+1 semaphore</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_semaphore_wait(<span class=\"name\">semaphore</span>, DISPATCH_TIME_FOREVER)<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"continue\"</span>)<span class=\"comment\">;//打印结果：start、semaphore +1、continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Source\"><a href=\"#Dispatch-Source\" class=\"headerlink\" title=\"Dispatch Source\"></a>Dispatch Source</h1><p>dispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。</p>\n<p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th style=\"text-align:center\">explain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>\n<td style=\"text-align:center\">变量增加</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_OR</td>\n<td style=\"text-align:center\">变量OR</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_SEND</td>\n<td style=\"text-align:center\">Mach端口发送</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_RECV</td>\n<td style=\"text-align:center\">MACH端口接收</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>\n<td style=\"text-align:center\">内存压力</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_PROC</td>\n<td style=\"text-align:center\">进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_READ</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的读响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_SIGNAL</td>\n<td style=\"text-align:center\">接收到UNIX信号时响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_TIMER</td>\n<td style=\"text-align:center\">定时器</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_VNODE</td>\n<td style=\"text-align:center\">文件状态监听，文件被删除、移动、重命名</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_WRITE</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的写响应</td>\n</tr>\n</tbody>\n</table>\n<p>####方法：</p>\n<ul>\n<li>dispatch_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。</li>\n<li>dispatch_source_set_event_handler：设置事件处理handler</li>\n<li>dispatch_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//监视文件夹内文件变化</span></div><div class=\"line\">NSURL *directoryURL; <span class=\"comment\">//指定需要监听的文件夹路径</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> fd = <span class=\"built_in\">open</span>([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class=\"line\"><span class=\"built_in\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">80</span>];</div><div class=\"line\">    strerror_r(errno, <span class=\"built_in\">buffer</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Unable to open \\\"%@\\\": %s (%d)\"</span>, [directoryURL path], <span class=\"built_in\">buffer</span>, errno);</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列</span></div><div class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class=\"line\">                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置响应dispatch源事件的block，在dispatch源指定的队列上运行</span></div><div class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以通过dispatch_source_get_data(source)来得到dispatch源数据</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">const</span> data = dispatch_source_get_data(source);</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory changed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory has been deleted.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class=\"line\">    <span class=\"built_in\">close</span>(fd);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//dispatch源创建后处于suspend状态，所以需要启动dispatch源</span></div><div class=\"line\">dispatch_resume(source);</div><div class=\"line\"><span class=\"comment\">//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-time-t\"><a href=\"#dispatch-time-t\" class=\"headerlink\" title=\"dispatch_time_t\"></a>dispatch_time_t</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_time_t delayTime = dispatch_time(<span class=\"name\">DISPATCH_TIME_NOW</span>, (<span class=\"name\">int64_t</span>)(<span class=\"number\">2.0</span>/*延迟执行时间*/ * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_after(<span class=\"name\">delayTime</span>, dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    [weakSelf delayMethod]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-source-set-timer\"><a href=\"#dispatch-source-set-timer\" class=\"headerlink\" title=\"dispatch_source_set_timer\"></a>dispatch_source_set_timer</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">dispatch_source_t</span> source, <span class=\"keyword\">dispatch_time_t</span> start, <span class=\"keyword\">uint64_t</span> interval, <span class=\"keyword\">uint64_t</span> leeway);</div></pre></td></tr></table></figure>\n<p>第一个参数:定时器对象；第二个参数:DISPATCH_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  </p>\n<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。</p>\n<p>NSEC_PER_SEC 1000000000ull<br>USEC_PER_SEC 1000000ull<br>NSEC_PER_USEC 1000ull  </p>\n<p>NSEC：纳秒；USEC：微妙；SEC：秒；PER：每。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。</span></div><div class=\"line\">dispatch_source_t <span class=\"keyword\">source</span> = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,<span class=\"number\">0</span>, <span class=\"number\">0</span>, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置事件的处理handler</span></div><div class=\"line\">dispatch_source_set_event_handler(<span class=\"keyword\">source</span>, ^()&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Time flies.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//5秒触发一次，误差100毫秒</span></div><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">source</span>, DISPATCH_TIME_NOW, <span class=\"number\">5</span>ull * NSEC_PER_SEC,<span class=\"number\">100</span>ull * NSEC_PER_MSEC);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始处理定时器事件，dispatch_suspend暂停处理事件</span></div><div class=\"line\">dispatch_resume(<span class=\"keyword\">source</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-suspend和dispatch-resume\"><a href=\"#dispatch-suspend和dispatch-resume\" class=\"headerlink\" title=\"dispatch_suspend和dispatch_resume\"></a>dispatch_suspend和dispatch_resume</h2><ul>\n<li>dispatch_suspend 挂起队列</li>\n<li>dispatch_resume  恢复队列</li>\n</ul>\n<p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"string\">\"me.kevin.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第一个block，延时5秒打印。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第二个block，也是延时5秒打印</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds again...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时一秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 1 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//挂起队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"suspend...\"</span>);</div><div class=\"line\">dispatch_suspend(queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时10秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 10 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//恢复队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"resume...\"</span>);</div><div class=\"line\">dispatch_resume(queue);</div></pre></td></tr></table></figure>\n<p>可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。<br>结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。</p>\n<hr>\n<h1 id=\"死锁！\"><a href=\"#死锁！\" class=\"headerlink\" title=\"死锁！\"></a>死锁！</h1><h2 id=\"dispatch-sync导致的死锁\"><a href=\"#dispatch-sync导致的死锁\" class=\"headerlink\" title=\"dispatch_sync导致的死锁\"></a>dispatch_sync导致的死锁</h2><p>在main线程使用“同步”方法提交Block，必定会死锁：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"I am block...\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>嵌套调用可能就会造成死锁：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI1 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 1\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//死锁！</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> updateUI2];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI2 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其它情况：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase1 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase2 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase3 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(serialQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">        <span class=\"comment\">//串行队列里面同步一个串行队列就会死锁</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(serialQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"5\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-apply导致的死锁\"><a href=\"#dispatch-apply导致的死锁\" class=\"headerlink\" title=\"dispatch_apply导致的死锁:\"></a>dispatch_apply导致的死锁:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在串行队列里嵌套使用dispatch_apply</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"me.tutuge.test.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">dispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> i) &#123;</div><div class=\"line\">\tNSLog(@<span class=\"string\">\"apply loop: %zu\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再来一个dispatch_apply！死锁！</span></div><div class=\"line\">\tdispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> j) &#123;</div><div class=\"line\">\t\tNSLog(@<span class=\"string\">\"apply loop inside %zu\"</span>, j);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"时间魔法-NSDate回忆录","date":"2016-05-24T16:00:00.000Z","_content":"# 简介   \n总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。\n\n* 日期时间的比较\n* NSDate 简单实用\n* NSDateFormatter 对日期时间对象做格式化操作的类\n* NSDateComponents 的简单使用\n***\n<!-- more -->\n![time_oc](http://o7ttfnm00.bkt.clouddn.com/1.jpg)\n\n# 日期时间的比较\n```\n// 当前时间\nNSDate *currentDate = [NSDate date];\n// 比当前时间晚一个小时的时间\nNSDate *laterDate = [[NSDate alloc] initWithTimeInterval:60*60 sinceDate:[NSDate date]];\n// 比当前时间早一个小时的时间\nNSDate *earlierDate = [[NSDate alloc] initWithTimeInterval:-60*60 sinceDate:[NSDate date]];\n// 比较哪个时间晚\nif ([currentDate laterDate:laterDate]) {\n    // current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚\n    NSLog(@\"current-%@比later-%@晚\",currentDate,laterDate);\n}\n// 比较哪个时间早\nif ([currentDate earlierDate:earlierDate]) {\n    // current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早\n    NSLog(@\"current-%@ 比 earlier-%@ 早\",currentDate,earlierDate);\n}\n\n*\n- (NSComparisonResult)compare:(NSDate *)other;\n该方法用于排序时调用:\n. 当实例保存的日期值与anotherDate相同时返回NSOrderedSame\n. 当实例保存的日期值晚于anotherDate时返回NSOrderedDescending\n. 当实例保存的日期值早于anotherDate时返回NSOrderedAscending\n*/\n\nif ([currentDate compare:earlierDate]==NSOrderedDescending) {\n    // 打印结果\n    NSLog(@\"current 晚\");\n}\nif ([currentDate compare:currentDate]==NSOrderedSame) {\n    // 打印结果\n    NSLog(@\"时间相等\");\n}\nif ([currentDate compare:laterDate]==NSOrderedAscending) {\n    // 打印结果\n    NSLog(@\"current 早\");\n}\n\n```\n***\n# NSDate 简单实用\n```\n//-获取当前日期时间的方法\n//实例方法\nNSDate *date1=[[NSDate alloc]init];\nNSLog(@\"date1:%@\",date1);  //2016-05-25 13:06:12 +0000\n//类方法\nNSDate *date2=[NSDate date];\nNSLog(@\"date2:%@\",date2);  //2016-05-25 13:06:12 +0000\n\n//获取从1970年1月1日00:00到date2的秒数\nNSTimeInterval interval= [date2 timeIntervalSince1970];\nNSLog(@\"%f\",interval);     //1464182226.511477\n\n//*********可以加一个延时操作\n//[NSThread sleepForTimeInterval:2.f];\nfor(int i=0;i<10000;i++){}\n//********* \n//计算两个时间差（秒数）\ninterval=[date2 timeIntervalSinceDate:date1];\nNSLog(@\"%f\",interval);     //0.001625\n\n//date1距现在的时间差\ninterval=[date1 timeIntervalSinceNow];\nNSLog(@\"%f\",interval);     //-0.001935\n\n//-得到date2的后一天(单位-秒)的时间对象\n//实例方法：\nNSDate *date3=[date2 dateByAddingTimeInterval:24*3600];\nNSLog(@\"date3:%@\",date3);  //2016-05-26 13:18:21 +0000\n//类方法：\nNSDate *date4=[NSDate dateWithTimeInterval:24*3600 sinceDate:date2];\nNSLog(@\"date4:%@\",date4);  //2016-05-26 13:18:21 +0000\n\n//得到距现在多少秒后的一个日期时间对象\nNSDate *date5=[NSDate dateWithTimeIntervalSinceNow:3*24*3600];\nNSLog(@\"date5:%@\",date5);  //2016-05-28 13:18:21 +0000\n\n//获取将来的一个日期时间对象\nNSDate *date6=[NSDate distantFuture];\nNSLog(@\"date6:%@\",date6);  //4001-01-01 00:00:00 +0000\n    \n//获取过去的一个日期时间对象\nNSDate *date7=[NSDate distantPast];\nNSLog(@\"date7:%@\",date7);  //0000-12-30 00:00:00 +0000\n```\n***\n# NSDateFormatter 对日期时间对象做格式化操作的类\n```\nNSDateFormatter *format=[[NSDateFormatter alloc]init];\n[format setDateStyle:NSDateFormatterMediumStyle]; //设置日期的样式\n[format setTimeStyle:NSDateFormatterMediumStyle]; //设置时间的样式\nNSString *styledate= [format stringFromDate:date1];\nNSLog(@\"styledate:%@\",styledate);                 //May 25, 2016, 9:18:21 PM\n\n[format setDateFormat:@\"yyyy-MM-dd hh:mm:ss\"];    //自定义格式字符串\nNSString *sdate=[format stringFromDate:date1];    //将NSDate对象转换为字符串\nNSLog(@\"sdate:%@\",sdate);                         //2016-05-25 09:18:21\n\n//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)\nNSString *str=@\"2016-05-25 09:15:30\";\nNSDate *date8=[format dateFromString:str];\nNSLog(@\"date8:%@\",date8); //2015-07-09 16:10:30 +0000\n\n//时间格式化字符串\nNSDate *newdate=[NSDate date];\nNSDateFormatter *formatter = [[NSDateFormatter alloc]init];\n[formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss MMM eee a\"];\nNSString *strdate = [formatter stringFromDate:newdate];\nNSLog(@\"%@\",strdate); //2016-05-25 21:18:21 May Wed PM\n\n//时间字符串转换为时间类型\nNSDateFormatter * formatter2 = [[NSDateFormatter alloc]init];\nNSString * nstr =@\"2016年05月25日 9点14分18秒\";\n[formatter2 setDateFormat:@\"yyyy年MM月dd日  hh点mm分ss秒\"];\nNSDate * date9 = [formatter2 dateFromString:nstr];\n\n```\n***\n# NSDateComponents 的简单使用\n\n```\n//获取系统时间的年月日时分秒部分\nNSCalendar *cal = [NSCalendar currentCalendar];\n//Mac 10.10以前的系统使用 NSYearCalendarUnit\nunsigned int unitFlags = NSCalendarUnitYear |NSCalendarUnitMonth|NSCalendarUnitDay|NSCalendarUnitHour|NSCalendarUnitMinute|NSCalendarUnitSecond;\nNSDateComponents *d = [cal components:unitFlags fromDate:newdate];\nNSLog(@\"年=%ld\",[d year]);   //年=2016\nNSLog(@\"月=%ld\",[d month]);  //月=5\nNSLog(@\"日=%ld\",[d day]);    //日=25\nNSLog(@\"时=%ld\",[d hour]);   //时=21\nNSLog(@\"分=%ld\",[d minute]); //分=18\nNSLog(@\"秒=%ld\",[d second]); //秒=21\n   \n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n     \n//解决时分秒转换不准确问题--相差了8小时，是时区的问题\nNSTimeZone *fzone = [NSTimeZone systemTimeZone];\nNSInteger finterval = [fzone secondsFromGMTForDate:date9];\nNSDate *fDate = [date9  dateByAddingTimeInterval:finterval];\nNSLog(@\"%@\",fDate); //2014-05-01 10:23:18 +0000\n\n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n\n//解决时分秒转换不准确问题\nNSTimeZone *fromzone = [NSTimeZone systemTimeZone];\nNSInteger frominterval = [fromzone secondsFromGMTForDate: fromdate];\nNSDate *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];\nNSLog(@\"fromdate=%@\",fromDate);\n    \nNSDate *currentDate = [NSDate date];\nNSString *timeSp = [NSString stringWithFormat:@\"%ld\", (long)[currentDate timeIntervalSince1970]];\nNSLog(@\"currentDate == %@\", timeSp); //1464182301\nNSTimeInterval time = [timeSp doubleValue];\nNSTimeInterval addTime = 60 * 60 * 24 * 7;\ntime = time + addTime;\n    \nNSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n[dateFormatter setDateFormat:@\"YYYY/MM/dd hh:mm:ss SS\"];\nNSString *dateString = [dateFormatter stringFromDate:currentDate];\nNSString *year = [dateString substringToIndex:4];\nNSString *month = [dateString substringWithRange:NSMakeRange(5, 2)];\nNSString *day = [dateString substringWithRange:NSMakeRange(8, 2)];\nNSLog(@\"%@-%@-%@\", year, month, day); //2016-05-25\n```\n\n","source":"_posts/时间魔法.md","raw":"---\ntitle: 时间魔法-NSDate回忆录\ndate: 2016-05-25 \ntags: OC\n---\n# 简介   \n总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。\n\n* 日期时间的比较\n* NSDate 简单实用\n* NSDateFormatter 对日期时间对象做格式化操作的类\n* NSDateComponents 的简单使用\n***\n<!-- more -->\n![time_oc](http://o7ttfnm00.bkt.clouddn.com/1.jpg)\n\n# 日期时间的比较\n```\n// 当前时间\nNSDate *currentDate = [NSDate date];\n// 比当前时间晚一个小时的时间\nNSDate *laterDate = [[NSDate alloc] initWithTimeInterval:60*60 sinceDate:[NSDate date]];\n// 比当前时间早一个小时的时间\nNSDate *earlierDate = [[NSDate alloc] initWithTimeInterval:-60*60 sinceDate:[NSDate date]];\n// 比较哪个时间晚\nif ([currentDate laterDate:laterDate]) {\n    // current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚\n    NSLog(@\"current-%@比later-%@晚\",currentDate,laterDate);\n}\n// 比较哪个时间早\nif ([currentDate earlierDate:earlierDate]) {\n    // current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早\n    NSLog(@\"current-%@ 比 earlier-%@ 早\",currentDate,earlierDate);\n}\n\n*\n- (NSComparisonResult)compare:(NSDate *)other;\n该方法用于排序时调用:\n. 当实例保存的日期值与anotherDate相同时返回NSOrderedSame\n. 当实例保存的日期值晚于anotherDate时返回NSOrderedDescending\n. 当实例保存的日期值早于anotherDate时返回NSOrderedAscending\n*/\n\nif ([currentDate compare:earlierDate]==NSOrderedDescending) {\n    // 打印结果\n    NSLog(@\"current 晚\");\n}\nif ([currentDate compare:currentDate]==NSOrderedSame) {\n    // 打印结果\n    NSLog(@\"时间相等\");\n}\nif ([currentDate compare:laterDate]==NSOrderedAscending) {\n    // 打印结果\n    NSLog(@\"current 早\");\n}\n\n```\n***\n# NSDate 简单实用\n```\n//-获取当前日期时间的方法\n//实例方法\nNSDate *date1=[[NSDate alloc]init];\nNSLog(@\"date1:%@\",date1);  //2016-05-25 13:06:12 +0000\n//类方法\nNSDate *date2=[NSDate date];\nNSLog(@\"date2:%@\",date2);  //2016-05-25 13:06:12 +0000\n\n//获取从1970年1月1日00:00到date2的秒数\nNSTimeInterval interval= [date2 timeIntervalSince1970];\nNSLog(@\"%f\",interval);     //1464182226.511477\n\n//*********可以加一个延时操作\n//[NSThread sleepForTimeInterval:2.f];\nfor(int i=0;i<10000;i++){}\n//********* \n//计算两个时间差（秒数）\ninterval=[date2 timeIntervalSinceDate:date1];\nNSLog(@\"%f\",interval);     //0.001625\n\n//date1距现在的时间差\ninterval=[date1 timeIntervalSinceNow];\nNSLog(@\"%f\",interval);     //-0.001935\n\n//-得到date2的后一天(单位-秒)的时间对象\n//实例方法：\nNSDate *date3=[date2 dateByAddingTimeInterval:24*3600];\nNSLog(@\"date3:%@\",date3);  //2016-05-26 13:18:21 +0000\n//类方法：\nNSDate *date4=[NSDate dateWithTimeInterval:24*3600 sinceDate:date2];\nNSLog(@\"date4:%@\",date4);  //2016-05-26 13:18:21 +0000\n\n//得到距现在多少秒后的一个日期时间对象\nNSDate *date5=[NSDate dateWithTimeIntervalSinceNow:3*24*3600];\nNSLog(@\"date5:%@\",date5);  //2016-05-28 13:18:21 +0000\n\n//获取将来的一个日期时间对象\nNSDate *date6=[NSDate distantFuture];\nNSLog(@\"date6:%@\",date6);  //4001-01-01 00:00:00 +0000\n    \n//获取过去的一个日期时间对象\nNSDate *date7=[NSDate distantPast];\nNSLog(@\"date7:%@\",date7);  //0000-12-30 00:00:00 +0000\n```\n***\n# NSDateFormatter 对日期时间对象做格式化操作的类\n```\nNSDateFormatter *format=[[NSDateFormatter alloc]init];\n[format setDateStyle:NSDateFormatterMediumStyle]; //设置日期的样式\n[format setTimeStyle:NSDateFormatterMediumStyle]; //设置时间的样式\nNSString *styledate= [format stringFromDate:date1];\nNSLog(@\"styledate:%@\",styledate);                 //May 25, 2016, 9:18:21 PM\n\n[format setDateFormat:@\"yyyy-MM-dd hh:mm:ss\"];    //自定义格式字符串\nNSString *sdate=[format stringFromDate:date1];    //将NSDate对象转换为字符串\nNSLog(@\"sdate:%@\",sdate);                         //2016-05-25 09:18:21\n\n//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)\nNSString *str=@\"2016-05-25 09:15:30\";\nNSDate *date8=[format dateFromString:str];\nNSLog(@\"date8:%@\",date8); //2015-07-09 16:10:30 +0000\n\n//时间格式化字符串\nNSDate *newdate=[NSDate date];\nNSDateFormatter *formatter = [[NSDateFormatter alloc]init];\n[formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss MMM eee a\"];\nNSString *strdate = [formatter stringFromDate:newdate];\nNSLog(@\"%@\",strdate); //2016-05-25 21:18:21 May Wed PM\n\n//时间字符串转换为时间类型\nNSDateFormatter * formatter2 = [[NSDateFormatter alloc]init];\nNSString * nstr =@\"2016年05月25日 9点14分18秒\";\n[formatter2 setDateFormat:@\"yyyy年MM月dd日  hh点mm分ss秒\"];\nNSDate * date9 = [formatter2 dateFromString:nstr];\n\n```\n***\n# NSDateComponents 的简单使用\n\n```\n//获取系统时间的年月日时分秒部分\nNSCalendar *cal = [NSCalendar currentCalendar];\n//Mac 10.10以前的系统使用 NSYearCalendarUnit\nunsigned int unitFlags = NSCalendarUnitYear |NSCalendarUnitMonth|NSCalendarUnitDay|NSCalendarUnitHour|NSCalendarUnitMinute|NSCalendarUnitSecond;\nNSDateComponents *d = [cal components:unitFlags fromDate:newdate];\nNSLog(@\"年=%ld\",[d year]);   //年=2016\nNSLog(@\"月=%ld\",[d month]);  //月=5\nNSLog(@\"日=%ld\",[d day]);    //日=25\nNSLog(@\"时=%ld\",[d hour]);   //时=21\nNSLog(@\"分=%ld\",[d minute]); //分=18\nNSLog(@\"秒=%ld\",[d second]); //秒=21\n   \n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n     \n//解决时分秒转换不准确问题--相差了8小时，是时区的问题\nNSTimeZone *fzone = [NSTimeZone systemTimeZone];\nNSInteger finterval = [fzone secondsFromGMTForDate:date9];\nNSDate *fDate = [date9  dateByAddingTimeInterval:finterval];\nNSLog(@\"%@\",fDate); //2014-05-01 10:23:18 +0000\n\n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n\n//解决时分秒转换不准确问题\nNSTimeZone *fromzone = [NSTimeZone systemTimeZone];\nNSInteger frominterval = [fromzone secondsFromGMTForDate: fromdate];\nNSDate *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];\nNSLog(@\"fromdate=%@\",fromDate);\n    \nNSDate *currentDate = [NSDate date];\nNSString *timeSp = [NSString stringWithFormat:@\"%ld\", (long)[currentDate timeIntervalSince1970]];\nNSLog(@\"currentDate == %@\", timeSp); //1464182301\nNSTimeInterval time = [timeSp doubleValue];\nNSTimeInterval addTime = 60 * 60 * 24 * 7;\ntime = time + addTime;\n    \nNSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n[dateFormatter setDateFormat:@\"YYYY/MM/dd hh:mm:ss SS\"];\nNSString *dateString = [dateFormatter stringFromDate:currentDate];\nNSString *year = [dateString substringToIndex:4];\nNSString *month = [dateString substringWithRange:NSMakeRange(5, 2)];\nNSString *day = [dateString substringWithRange:NSMakeRange(8, 2)];\nNSLog(@\"%@-%@-%@\", year, month, day); //2016-05-25\n```\n\n","slug":"时间魔法","published":1,"updated":"2017-04-27T09:28:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjty6y6mq00055u03i3i4yy9c","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。</p>\n<ul>\n<li>日期时间的比较</li>\n<li>NSDate 简单实用</li>\n<li>NSDateFormatter 对日期时间对象做格式化操作的类</li>\n<li>NSDateComponents 的简单使用</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/1.jpg\" alt=\"time_oc\"></p>\n<h1 id=\"日期时间的比较\"><a href=\"#日期时间的比较\" class=\"headerlink\" title=\"日期时间的比较\"></a>日期时间的比较</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">// 比当前时间晚一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *laterDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比当前时间早一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *earlierDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">-60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间晚</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate laterDate:laterDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@比later-%@晚\"</span>,currentDate,laterDate);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间早</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate earlierDate:earlierDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@ 比 earlier-%@ 早\"</span>,currentDate,earlierDate);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*</div><div class=\"line\">- (<span class=\"built_in\">NSComparisonResult</span>)compare:(<span class=\"built_in\">NSDate</span> *)other;</div><div class=\"line\">该方法用于排序时调用:</div><div class=\"line\">. 当实例保存的日期值与anotherDate相同时返回<span class=\"built_in\">NSOrderedSame</span></div><div class=\"line\">. 当实例保存的日期值晚于anotherDate时返回<span class=\"built_in\">NSOrderedDescending</span></div><div class=\"line\">. 当实例保存的日期值早于anotherDate时返回<span class=\"built_in\">NSOrderedAscending</span></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:earlierDate]==<span class=\"built_in\">NSOrderedDescending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 晚\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:currentDate]==<span class=\"built_in\">NSOrderedSame</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时间相等\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:laterDate]==<span class=\"built_in\">NSOrderedAscending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 早\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDate-简单实用\"><a href=\"#NSDate-简单实用\" class=\"headerlink\" title=\"NSDate 简单实用\"></a>NSDate 简单实用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//-获取当前日期时间的方法</span></div><div class=\"line\"><span class=\"comment\">//实例方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date1=[[<span class=\"built_in\">NSDate</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date1:%@\"</span>,date1);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date2=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date2:%@\"</span>,date2);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到date2的秒数</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> interval= [date2 timeIntervalSince1970];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//1464182226.511477</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//*********可以加一个延时操作</span></div><div class=\"line\"><span class=\"comment\">//[NSThread sleepForTimeInterval:2.f];</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//********* </span></div><div class=\"line\"><span class=\"comment\">//计算两个时间差（秒数）</span></div><div class=\"line\">interval=[date2 timeIntervalSinceDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//0.001625</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//date1距现在的时间差</span></div><div class=\"line\">interval=[date1 timeIntervalSinceNow];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//-0.001935</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//-得到date2的后一天(单位-秒)的时间对象</span></div><div class=\"line\"><span class=\"comment\">//实例方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date3=[date2 dateByAddingTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date3:%@\"</span>,date3);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date4=[<span class=\"built_in\">NSDate</span> dateWithTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span> sinceDate:date2];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date4:%@\"</span>,date4);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date5=[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date5:%@\"</span>,date5);  <span class=\"comment\">//2016-05-28 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取将来的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date6=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date6:%@\"</span>,date6);  <span class=\"comment\">//4001-01-01 00:00:00 +0000</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获取过去的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date7=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date7:%@\"</span>,date7);  <span class=\"comment\">//0000-12-30 00:00:00 +0000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter-对日期时间对象做格式化操作的类\"><a href=\"#NSDateFormatter-对日期时间对象做格式化操作的类\" class=\"headerlink\" title=\"NSDateFormatter 对日期时间对象做格式化操作的类\"></a>NSDateFormatter 对日期时间对象做格式化操作的类</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format=[[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[format setDateStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置日期的样式</span></div><div class=\"line\">[format setTimeStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置时间的样式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *styledate= [format stringFromDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"styledate:%@\"</span>,styledate);                 <span class=\"comment\">//May 25, 2016, 9:18:21 PM</span></div><div class=\"line\"></div><div class=\"line\">[format setDateFormat:<span class=\"string\">@\"yyyy-MM-dd hh:mm:ss\"</span>];    <span class=\"comment\">//自定义格式字符串</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *sdate=[format stringFromDate:date1];    <span class=\"comment\">//将NSDate对象转换为字符串</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sdate:%@\"</span>,sdate);                         <span class=\"comment\">//2016-05-25 09:18:21</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *str=<span class=\"string\">@\"2016-05-25 09:15:30\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date8=[format dateFromString:str];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date8:%@\"</span>,date8); <span class=\"comment\">//2015-07-09 16:10:30 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间格式化字符串</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *newdate=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *formatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[formatter setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss MMM eee a\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *strdate = [formatter stringFromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,strdate); <span class=\"comment\">//2016-05-25 21:18:21 May Wed PM</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间字符串转换为时间类型</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> * formatter2 = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSString</span> * nstr =<span class=\"string\">@\"2016年05月25日 9点14分18秒\"</span>;</div><div class=\"line\">[formatter2 setDateFormat:<span class=\"string\">@\"yyyy年MM月dd日  hh点mm分ss秒\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> * date9 = [formatter2 dateFromString:nstr];</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents-的简单使用\"><a href=\"#NSDateComponents-的简单使用\" class=\"headerlink\" title=\"NSDateComponents 的简单使用\"></a>NSDateComponents 的简单使用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取系统时间的年月日时分秒部分</span></div><div class=\"line\"><span class=\"built_in\">NSCalendar</span> *cal = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\"><span class=\"comment\">//Mac 10.10以前的系统使用 NSYearCalendarUnit</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> unitFlags = <span class=\"built_in\">NSCalendarUnitYear</span> |<span class=\"built_in\">NSCalendarUnitMonth</span>|<span class=\"built_in\">NSCalendarUnitDay</span>|<span class=\"built_in\">NSCalendarUnitHour</span>|<span class=\"built_in\">NSCalendarUnitMinute</span>|<span class=\"built_in\">NSCalendarUnitSecond</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateComponents</span> *d = [cal components:unitFlags fromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"年=%ld\"</span>,[d year]);   <span class=\"comment\">//年=2016</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"月=%ld\"</span>,[d month]);  <span class=\"comment\">//月=5</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"日=%ld\"</span>,[d day]);    <span class=\"comment\">//日=25</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时=%ld\"</span>,[d hour]);   <span class=\"comment\">//时=21</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"分=%ld\"</span>,[d minute]); <span class=\"comment\">//分=18</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"秒=%ld\"</span>,[d second]); <span class=\"comment\">//秒=21</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题--相差了8小时，是时区的问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> finterval = [fzone secondsFromGMTForDate:date9];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fDate = [date9  dateByAddingTimeInterval:finterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,fDate); <span class=\"comment\">//2014-05-01 10:23:18 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fromzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> frominterval = [fromzone secondsFromGMTForDate: fromdate];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"fromdate=%@\"</span>,fromDate);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *timeSp = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, (<span class=\"keyword\">long</span>)[currentDate timeIntervalSince1970]];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"currentDate == %@\"</span>, timeSp); <span class=\"comment\">//1464182301</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> time = [timeSp doubleValue];</div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> addTime = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span>;</div><div class=\"line\">time = time + addTime;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[dateFormatter setDateFormat:<span class=\"string\">@\"YYYY/MM/dd hh:mm:ss SS\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [dateFormatter stringFromDate:currentDate];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *year = [dateString substringToIndex:<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *month = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *day = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@-%@-%@\"</span>, year, month, day); <span class=\"comment\">//2016-05-25</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。</p>\n<ul>\n<li>日期时间的比较</li>\n<li>NSDate 简单实用</li>\n<li>NSDateFormatter 对日期时间对象做格式化操作的类</li>\n<li>NSDateComponents 的简单使用</li>\n</ul>\n<hr>","more":"<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/1.jpg\" alt=\"time_oc\"></p>\n<h1 id=\"日期时间的比较\"><a href=\"#日期时间的比较\" class=\"headerlink\" title=\"日期时间的比较\"></a>日期时间的比较</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">// 比当前时间晚一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *laterDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比当前时间早一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *earlierDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">-60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间晚</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate laterDate:laterDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@比later-%@晚\"</span>,currentDate,laterDate);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间早</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate earlierDate:earlierDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@ 比 earlier-%@ 早\"</span>,currentDate,earlierDate);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*</div><div class=\"line\">- (<span class=\"built_in\">NSComparisonResult</span>)compare:(<span class=\"built_in\">NSDate</span> *)other;</div><div class=\"line\">该方法用于排序时调用:</div><div class=\"line\">. 当实例保存的日期值与anotherDate相同时返回<span class=\"built_in\">NSOrderedSame</span></div><div class=\"line\">. 当实例保存的日期值晚于anotherDate时返回<span class=\"built_in\">NSOrderedDescending</span></div><div class=\"line\">. 当实例保存的日期值早于anotherDate时返回<span class=\"built_in\">NSOrderedAscending</span></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:earlierDate]==<span class=\"built_in\">NSOrderedDescending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 晚\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:currentDate]==<span class=\"built_in\">NSOrderedSame</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时间相等\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:laterDate]==<span class=\"built_in\">NSOrderedAscending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 早\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDate-简单实用\"><a href=\"#NSDate-简单实用\" class=\"headerlink\" title=\"NSDate 简单实用\"></a>NSDate 简单实用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//-获取当前日期时间的方法</span></div><div class=\"line\"><span class=\"comment\">//实例方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date1=[[<span class=\"built_in\">NSDate</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date1:%@\"</span>,date1);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date2=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date2:%@\"</span>,date2);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到date2的秒数</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> interval= [date2 timeIntervalSince1970];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//1464182226.511477</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//*********可以加一个延时操作</span></div><div class=\"line\"><span class=\"comment\">//[NSThread sleepForTimeInterval:2.f];</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//********* </span></div><div class=\"line\"><span class=\"comment\">//计算两个时间差（秒数）</span></div><div class=\"line\">interval=[date2 timeIntervalSinceDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//0.001625</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//date1距现在的时间差</span></div><div class=\"line\">interval=[date1 timeIntervalSinceNow];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//-0.001935</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//-得到date2的后一天(单位-秒)的时间对象</span></div><div class=\"line\"><span class=\"comment\">//实例方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date3=[date2 dateByAddingTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date3:%@\"</span>,date3);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date4=[<span class=\"built_in\">NSDate</span> dateWithTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span> sinceDate:date2];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date4:%@\"</span>,date4);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date5=[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date5:%@\"</span>,date5);  <span class=\"comment\">//2016-05-28 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取将来的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date6=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date6:%@\"</span>,date6);  <span class=\"comment\">//4001-01-01 00:00:00 +0000</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获取过去的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date7=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date7:%@\"</span>,date7);  <span class=\"comment\">//0000-12-30 00:00:00 +0000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter-对日期时间对象做格式化操作的类\"><a href=\"#NSDateFormatter-对日期时间对象做格式化操作的类\" class=\"headerlink\" title=\"NSDateFormatter 对日期时间对象做格式化操作的类\"></a>NSDateFormatter 对日期时间对象做格式化操作的类</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format=[[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[format setDateStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置日期的样式</span></div><div class=\"line\">[format setTimeStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置时间的样式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *styledate= [format stringFromDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"styledate:%@\"</span>,styledate);                 <span class=\"comment\">//May 25, 2016, 9:18:21 PM</span></div><div class=\"line\"></div><div class=\"line\">[format setDateFormat:<span class=\"string\">@\"yyyy-MM-dd hh:mm:ss\"</span>];    <span class=\"comment\">//自定义格式字符串</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *sdate=[format stringFromDate:date1];    <span class=\"comment\">//将NSDate对象转换为字符串</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sdate:%@\"</span>,sdate);                         <span class=\"comment\">//2016-05-25 09:18:21</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *str=<span class=\"string\">@\"2016-05-25 09:15:30\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date8=[format dateFromString:str];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date8:%@\"</span>,date8); <span class=\"comment\">//2015-07-09 16:10:30 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间格式化字符串</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *newdate=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *formatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[formatter setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss MMM eee a\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *strdate = [formatter stringFromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,strdate); <span class=\"comment\">//2016-05-25 21:18:21 May Wed PM</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间字符串转换为时间类型</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> * formatter2 = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSString</span> * nstr =<span class=\"string\">@\"2016年05月25日 9点14分18秒\"</span>;</div><div class=\"line\">[formatter2 setDateFormat:<span class=\"string\">@\"yyyy年MM月dd日  hh点mm分ss秒\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> * date9 = [formatter2 dateFromString:nstr];</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents-的简单使用\"><a href=\"#NSDateComponents-的简单使用\" class=\"headerlink\" title=\"NSDateComponents 的简单使用\"></a>NSDateComponents 的简单使用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取系统时间的年月日时分秒部分</span></div><div class=\"line\"><span class=\"built_in\">NSCalendar</span> *cal = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\"><span class=\"comment\">//Mac 10.10以前的系统使用 NSYearCalendarUnit</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> unitFlags = <span class=\"built_in\">NSCalendarUnitYear</span> |<span class=\"built_in\">NSCalendarUnitMonth</span>|<span class=\"built_in\">NSCalendarUnitDay</span>|<span class=\"built_in\">NSCalendarUnitHour</span>|<span class=\"built_in\">NSCalendarUnitMinute</span>|<span class=\"built_in\">NSCalendarUnitSecond</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateComponents</span> *d = [cal components:unitFlags fromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"年=%ld\"</span>,[d year]);   <span class=\"comment\">//年=2016</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"月=%ld\"</span>,[d month]);  <span class=\"comment\">//月=5</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"日=%ld\"</span>,[d day]);    <span class=\"comment\">//日=25</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时=%ld\"</span>,[d hour]);   <span class=\"comment\">//时=21</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"分=%ld\"</span>,[d minute]); <span class=\"comment\">//分=18</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"秒=%ld\"</span>,[d second]); <span class=\"comment\">//秒=21</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题--相差了8小时，是时区的问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> finterval = [fzone secondsFromGMTForDate:date9];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fDate = [date9  dateByAddingTimeInterval:finterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,fDate); <span class=\"comment\">//2014-05-01 10:23:18 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fromzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> frominterval = [fromzone secondsFromGMTForDate: fromdate];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"fromdate=%@\"</span>,fromDate);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *timeSp = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, (<span class=\"keyword\">long</span>)[currentDate timeIntervalSince1970]];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"currentDate == %@\"</span>, timeSp); <span class=\"comment\">//1464182301</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> time = [timeSp doubleValue];</div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> addTime = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span>;</div><div class=\"line\">time = time + addTime;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[dateFormatter setDateFormat:<span class=\"string\">@\"YYYY/MM/dd hh:mm:ss SS\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [dateFormatter stringFromDate:currentDate];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *year = [dateString substringToIndex:<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *month = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *day = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@-%@-%@\"</span>, year, month, day); <span class=\"comment\">//2016-05-25</span></div></pre></td></tr></table></figure>"},{"title":"时间魔法 Swift篇","date":"2016-05-26T16:00:00.000Z","_content":"# 简介\n* NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。\n* NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。\n<!-- more -->\n 除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n* NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。\n*  NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。\n NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。\n* NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。\n\n***\n<!-- more -->\n![time](http://o7ttfnm00.bkt.clouddn.com/5.jpg)\n\n* [NSDate](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/)\n* [NSDateFormatter](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html)\n* [NSDateComponentFormatter](https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html)\n* [NSCalendar](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)\n***\n\n# NSDate\n```\n//获取当前时间\nlet date1 = NSDate()     //\"May 27, 2016, 2:36 PM\"\nlet str1 = String(date1) //\"2016-05-27 06:36:17 +0000\"\n\n//获取从1970年1月1日00:00到当前时间的秒数\nvar interval : NSTimeInterval = date1.timeIntervalSince1970 //1464330977.49057 \n\nlet date2 = NSDate()\n//计算时间差\ninterval = date2.timeIntervalSinceDate(date1) //0.2234339714050293\n//date1 距现在的时间差\ninterval = date1.timeIntervalSinceNow         //-0.2241280078887939\n\n//得到date2后一天的时间对象\nlet date3 = date2 .dateByAddingTimeInterval(24*3600)             // 实例方法\nlet date4 = NSDate.init(timeInterval: 24*3600, sinceDate: date2) // 类方法\nprint(\"date3 == \\(date3) ; date4 == \\(date4)\")                   \n//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"\n\n//得到距现在多少秒后一个日期时间对象\nlet date5 = NSDate.init(timeIntervalSinceNow: 3*24*3600) //\"May 30, 2016, 2:36 PM\"\nprint(date5)                                             //\"2016-05-30 06:36:17 +0000\\n\"\n\n//未来\nlet date6 = NSDate.distantFuture() //\"Jan 1, 4001, 8:00 AM\"\n//亘古\nlet date7 = NSDate.distantPast()   //\"4001-01-01 00:00:00 +0000\\n\"\nprint(\"future == \\(date6); past == \\(date7)\")\n//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"\n```\n***\n# NSDateFormatter\n\n## 初始化\n```\nlet dateFormatter = NSDateFormatter()\n```\n有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle   //完整样式（FullStyle）\nvar convertedDate = dateFormatter.stringFromDate(date1)    //\"Friday, May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.LongStyle   //长样式（Long Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.MediumStyle //中等样式(Medium Style)\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.ShortStyle  //短样式（Short Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"5/27/16\"\n```\n## 改变时区\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle\n// 希腊\ndateFormatter.locale = NSLocale(localeIdentifier: \"el_GR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Παρασκευή, 27 Μαΐου 2016\"\n// 法国\ndateFormatter.locale = NSLocale(localeIdentifier: \"fr_FR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"vendredi 27 mai 2016\"\n// 本地\ndateFormatter.locale = NSLocale.currentLocale()\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n```\n## 自定义的日期格式\n\n[设置自定义日期格式](http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns)在两种场景中很有用：          \n1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。\n```\n EEEE：“星期”的全名（比如Monday）。如需缩写，指定1-3个字符（如E，EE，EEE代表Mon）。\n MMMM：“月份”的全名（比如October）。如需缩写，指定1-3个字符（如M，MM，MMM代表Oct）。\n dd：某月的第几天（例如，09或15）\n yyyy：四位字符串表示“年”（例如2015）\n HH：两位字符串表示“小时”（例如08或19）\n mm：两位字符串表示“分钟”（例如05或54）\n ss：两位字符串表示“秒”\n zzz：三位字符串表示“时区”（例如GMT）\n GGG：公元前BC或公元后AD\n ```\n \n```\ndateFormatter.dateFormat = \"EEEE, MMMM dd, yyyy\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n\ndateFormatter.dateFormat = \"HH:mm:ss\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"14:36:17\"\n\nvar dateAsString = \"27-05-2016 23:59\"\ndateFormatter.dateFormat = \"dd-MM-yyyy HH:mm\"\nvar newDate = dateFormatter.dateFromString(dateAsString)   //\"May 27, 2016, 11:59 PM\"\n\n// 包含时区信息的复杂字符串：\ndateAsString = \"Thu, 27 May 2016 09:22:33 GMT\"\ndateFormatter.dateFormat = \"EEE, dd MMM yyyy HH:mm:ss zzz\"\nnewDate = dateFormatter.dateFromString(dateAsString)       //\"May 27, 2016, 5:22 PM\"\n```\n***\n# NSDateComponents\n\n## NSDate到NSDateComponents\n\nNSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个[文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit) 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。\n\n```\nlet calendar = NSCalendar.currentCalendar()\nlet dateComponents = calendar.components([NSCalendarUnit.Day, NSCalendarUnit.Month, NSCalendarUnit.Year, NSCalendarUnit.WeekOfYear, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second, NSCalendarUnit.Nanosecond], fromDate: date1)\n\nprint(\"day = \\(dateComponents.day)\", \"month = \\(dateComponents.month)\", \"year = \\(dateComponents.year)\", \"week of year = \\(dateComponents.weekOfYear)\", \"hour = \\(dateComponents.hour)\", \"minute = \\(dateComponents.minute)\", \"second = \\(dateComponents.second)\", \"nanosecond = \\(dateComponents.nanosecond)\" , separator: \", \", terminator: \"\")\n\n//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"\n\nlet year = dateComponents.year             //年\nlet mondth = dateComponents.month          //月\nlet day = dateComponents.day               //日\nlet weekOfYear = dateComponents.weekOfYear //第几周\nlet hour = dateComponents.hour             //时\nlet minute = dateComponents.minute         //分\nlet second = dateComponents.second         //秒\nlet nanosecond = dateComponents.nanosecond //毫微秒\n```\n## NSDateComponents到NSDate\n\n### 初始化\n\n这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可\n```\nlet components = NSDateComponents()\ncomponents.day = 5\ncomponents.month = 01\ncomponents.year = 2016\ncomponents.hour = 19\ncomponents.minute = 30\nnewDate = calendar.dateFromComponents(components)\n```\n### 改动时区对转换日期对象的影响\n```\nGMT = Greenwich Mean Time（格林尼治标准时间）\nCST = China Standard Time（中国标准时间）\nCET = Central European Time(欧洲中部时间）\n时区缩写的列表（http://www.timeanddate.com/time/zones/）\n```\n```\ncomponents.timeZone = NSTimeZone(abbreviation: \"GMT\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 3:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CST\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 9:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CET\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 2:30 AM\"\n```\n***\n# 比较日期和时间\nearlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:\n```\nearlierDate:\n如果 date1 早于 date2，该方法返回date1\n如过 date2 早于 date1，该方法返回date2\n如果 date1 和 date2 相同，返回date1\n\ndateFormatter.dateFormat = \"MMM dd, yyyy zzz\"\ndateAsString = \"May 27, 2016 GMT\"\nvar date8 = dateFormatter.dateFromString(dateAsString)! //\"May 27, 2016, 8:00 AM\"\n\nvar date10 = date1.earlierDate(date8)                   //\"May 27, 2016, 8:00 AM\"\ndate10 = date1.laterDate(date8)                         //\"May 27, 2016, 3:12 PM\"\n```\nNSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。\n```\nif date1.compare(date2) == NSComparisonResult.OrderedDescending{\n    print(\"Date1 is later than date2\")\n}else if date1.compare(date2) == NSComparisonResult.OrderedAscending{\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else if date1.compare(date2) == NSComparisonResult.OrderedSame {\n    print(\"Same date\")\n}\n```\n时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。\n```\nif date1.timeIntervalSinceReferenceDate > date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Later than Date2\")\n}else if date1.timeIntervalSinceReferenceDate <  date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else {\n    print(\"Same dates\")\n}\n```\n在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。\n```\ndateFormatter.dateFormat = \"HH:mm:ss zzz\"\ndateAsString = \"14:28:16 GMT\"\nlet date11 = dateFormatter.dateFromString(dateAsString)!\ndateAsString = \"19:53:12 GMT\"\nlet date12 = dateFormatter.dateFromString(dateAsString)!\n\nif date1.earlierDate(date2) == date1 {\n    if date1.isEqualToDate(date2) {\n        print(\"Same time\")\n    }else {\n        print(\"\\(date1) is earlier than \\(date2)\")\n        //2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000\n    }\n}else {\n    print(\"\\(date2) is earlier than \\(date1)\")\n}\n```\n***\n# 计算未来和过去的日期\n两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。\n\n假定我们需要为这个日期往后推两个月又5天。\n```\nlet monthsToAdd = 2\nlet daysToAdd = 5\n\n```\n这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。\n```\nvar calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, value: monthsToAdd, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, value: daysToAdd, toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n```\n当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。\n```\nlet newDateComponents = NSDateComponents()\nnewDateComponents.month = monthsToAdd\nnewDateComponents.day = daysToAdd\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(newDateComponents, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\n\n```\n// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 [官方文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)。\n\n***\n# 计算日期间隔\n通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。\n```\nvar diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: 0))\n\nprint(\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\")\n//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n\nlet diffYear = diffFateComponents.year\nlet diffMonth = diffFateComponents.month\nlet diffDay = diffFateComponents.day\nlet diffHour = diffFateComponents.hour\nlet diffMinute = diffFateComponents.minute\nlet diffSecond = diffFateComponents.second\n```\nNSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。\n```\nlet dateComponentsFormatter = NSDateComponentsFormatter()\ndateComponentsFormatter.unitsStyle = NSDateComponentsFormatterUnitsStyle.Full\n\nlet interval2 = date14.timeIntervalSinceDate(date1)\ndateComponentsFormatter.stringFromTimeInterval(interval2)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：\n```\ndateComponentsFormatter.allowedUnits = [NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second]\nlet autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n","source":"_posts/时间魔法Swift篇.md","raw":"---\ntitle: 时间魔法 Swift篇\ndate: 2016-05-27\ntags: Swift\n---\n# 简介\n* NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。\n* NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。\n<!-- more -->\n 除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n* NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。\n*  NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。\n NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。\n* NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。\n\n***\n<!-- more -->\n![time](http://o7ttfnm00.bkt.clouddn.com/5.jpg)\n\n* [NSDate](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/)\n* [NSDateFormatter](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html)\n* [NSDateComponentFormatter](https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html)\n* [NSCalendar](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)\n***\n\n# NSDate\n```\n//获取当前时间\nlet date1 = NSDate()     //\"May 27, 2016, 2:36 PM\"\nlet str1 = String(date1) //\"2016-05-27 06:36:17 +0000\"\n\n//获取从1970年1月1日00:00到当前时间的秒数\nvar interval : NSTimeInterval = date1.timeIntervalSince1970 //1464330977.49057 \n\nlet date2 = NSDate()\n//计算时间差\ninterval = date2.timeIntervalSinceDate(date1) //0.2234339714050293\n//date1 距现在的时间差\ninterval = date1.timeIntervalSinceNow         //-0.2241280078887939\n\n//得到date2后一天的时间对象\nlet date3 = date2 .dateByAddingTimeInterval(24*3600)             // 实例方法\nlet date4 = NSDate.init(timeInterval: 24*3600, sinceDate: date2) // 类方法\nprint(\"date3 == \\(date3) ; date4 == \\(date4)\")                   \n//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"\n\n//得到距现在多少秒后一个日期时间对象\nlet date5 = NSDate.init(timeIntervalSinceNow: 3*24*3600) //\"May 30, 2016, 2:36 PM\"\nprint(date5)                                             //\"2016-05-30 06:36:17 +0000\\n\"\n\n//未来\nlet date6 = NSDate.distantFuture() //\"Jan 1, 4001, 8:00 AM\"\n//亘古\nlet date7 = NSDate.distantPast()   //\"4001-01-01 00:00:00 +0000\\n\"\nprint(\"future == \\(date6); past == \\(date7)\")\n//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"\n```\n***\n# NSDateFormatter\n\n## 初始化\n```\nlet dateFormatter = NSDateFormatter()\n```\n有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle   //完整样式（FullStyle）\nvar convertedDate = dateFormatter.stringFromDate(date1)    //\"Friday, May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.LongStyle   //长样式（Long Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.MediumStyle //中等样式(Medium Style)\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.ShortStyle  //短样式（Short Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"5/27/16\"\n```\n## 改变时区\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle\n// 希腊\ndateFormatter.locale = NSLocale(localeIdentifier: \"el_GR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Παρασκευή, 27 Μαΐου 2016\"\n// 法国\ndateFormatter.locale = NSLocale(localeIdentifier: \"fr_FR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"vendredi 27 mai 2016\"\n// 本地\ndateFormatter.locale = NSLocale.currentLocale()\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n```\n## 自定义的日期格式\n\n[设置自定义日期格式](http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns)在两种场景中很有用：          \n1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。\n```\n EEEE：“星期”的全名（比如Monday）。如需缩写，指定1-3个字符（如E，EE，EEE代表Mon）。\n MMMM：“月份”的全名（比如October）。如需缩写，指定1-3个字符（如M，MM，MMM代表Oct）。\n dd：某月的第几天（例如，09或15）\n yyyy：四位字符串表示“年”（例如2015）\n HH：两位字符串表示“小时”（例如08或19）\n mm：两位字符串表示“分钟”（例如05或54）\n ss：两位字符串表示“秒”\n zzz：三位字符串表示“时区”（例如GMT）\n GGG：公元前BC或公元后AD\n ```\n \n```\ndateFormatter.dateFormat = \"EEEE, MMMM dd, yyyy\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n\ndateFormatter.dateFormat = \"HH:mm:ss\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"14:36:17\"\n\nvar dateAsString = \"27-05-2016 23:59\"\ndateFormatter.dateFormat = \"dd-MM-yyyy HH:mm\"\nvar newDate = dateFormatter.dateFromString(dateAsString)   //\"May 27, 2016, 11:59 PM\"\n\n// 包含时区信息的复杂字符串：\ndateAsString = \"Thu, 27 May 2016 09:22:33 GMT\"\ndateFormatter.dateFormat = \"EEE, dd MMM yyyy HH:mm:ss zzz\"\nnewDate = dateFormatter.dateFromString(dateAsString)       //\"May 27, 2016, 5:22 PM\"\n```\n***\n# NSDateComponents\n\n## NSDate到NSDateComponents\n\nNSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个[文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit) 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。\n\n```\nlet calendar = NSCalendar.currentCalendar()\nlet dateComponents = calendar.components([NSCalendarUnit.Day, NSCalendarUnit.Month, NSCalendarUnit.Year, NSCalendarUnit.WeekOfYear, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second, NSCalendarUnit.Nanosecond], fromDate: date1)\n\nprint(\"day = \\(dateComponents.day)\", \"month = \\(dateComponents.month)\", \"year = \\(dateComponents.year)\", \"week of year = \\(dateComponents.weekOfYear)\", \"hour = \\(dateComponents.hour)\", \"minute = \\(dateComponents.minute)\", \"second = \\(dateComponents.second)\", \"nanosecond = \\(dateComponents.nanosecond)\" , separator: \", \", terminator: \"\")\n\n//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"\n\nlet year = dateComponents.year             //年\nlet mondth = dateComponents.month          //月\nlet day = dateComponents.day               //日\nlet weekOfYear = dateComponents.weekOfYear //第几周\nlet hour = dateComponents.hour             //时\nlet minute = dateComponents.minute         //分\nlet second = dateComponents.second         //秒\nlet nanosecond = dateComponents.nanosecond //毫微秒\n```\n## NSDateComponents到NSDate\n\n### 初始化\n\n这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可\n```\nlet components = NSDateComponents()\ncomponents.day = 5\ncomponents.month = 01\ncomponents.year = 2016\ncomponents.hour = 19\ncomponents.minute = 30\nnewDate = calendar.dateFromComponents(components)\n```\n### 改动时区对转换日期对象的影响\n```\nGMT = Greenwich Mean Time（格林尼治标准时间）\nCST = China Standard Time（中国标准时间）\nCET = Central European Time(欧洲中部时间）\n时区缩写的列表（http://www.timeanddate.com/time/zones/）\n```\n```\ncomponents.timeZone = NSTimeZone(abbreviation: \"GMT\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 3:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CST\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 9:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CET\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 2:30 AM\"\n```\n***\n# 比较日期和时间\nearlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:\n```\nearlierDate:\n如果 date1 早于 date2，该方法返回date1\n如过 date2 早于 date1，该方法返回date2\n如果 date1 和 date2 相同，返回date1\n\ndateFormatter.dateFormat = \"MMM dd, yyyy zzz\"\ndateAsString = \"May 27, 2016 GMT\"\nvar date8 = dateFormatter.dateFromString(dateAsString)! //\"May 27, 2016, 8:00 AM\"\n\nvar date10 = date1.earlierDate(date8)                   //\"May 27, 2016, 8:00 AM\"\ndate10 = date1.laterDate(date8)                         //\"May 27, 2016, 3:12 PM\"\n```\nNSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。\n```\nif date1.compare(date2) == NSComparisonResult.OrderedDescending{\n    print(\"Date1 is later than date2\")\n}else if date1.compare(date2) == NSComparisonResult.OrderedAscending{\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else if date1.compare(date2) == NSComparisonResult.OrderedSame {\n    print(\"Same date\")\n}\n```\n时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。\n```\nif date1.timeIntervalSinceReferenceDate > date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Later than Date2\")\n}else if date1.timeIntervalSinceReferenceDate <  date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else {\n    print(\"Same dates\")\n}\n```\n在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。\n```\ndateFormatter.dateFormat = \"HH:mm:ss zzz\"\ndateAsString = \"14:28:16 GMT\"\nlet date11 = dateFormatter.dateFromString(dateAsString)!\ndateAsString = \"19:53:12 GMT\"\nlet date12 = dateFormatter.dateFromString(dateAsString)!\n\nif date1.earlierDate(date2) == date1 {\n    if date1.isEqualToDate(date2) {\n        print(\"Same time\")\n    }else {\n        print(\"\\(date1) is earlier than \\(date2)\")\n        //2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000\n    }\n}else {\n    print(\"\\(date2) is earlier than \\(date1)\")\n}\n```\n***\n# 计算未来和过去的日期\n两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。\n\n假定我们需要为这个日期往后推两个月又5天。\n```\nlet monthsToAdd = 2\nlet daysToAdd = 5\n\n```\n这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。\n```\nvar calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, value: monthsToAdd, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, value: daysToAdd, toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n```\n当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。\n```\nlet newDateComponents = NSDateComponents()\nnewDateComponents.month = monthsToAdd\nnewDateComponents.day = daysToAdd\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(newDateComponents, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\n\n```\n// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 [官方文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)。\n\n***\n# 计算日期间隔\n通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。\n```\nvar diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: 0))\n\nprint(\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\")\n//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n\nlet diffYear = diffFateComponents.year\nlet diffMonth = diffFateComponents.month\nlet diffDay = diffFateComponents.day\nlet diffHour = diffFateComponents.hour\nlet diffMinute = diffFateComponents.minute\nlet diffSecond = diffFateComponents.second\n```\nNSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。\n```\nlet dateComponentsFormatter = NSDateComponentsFormatter()\ndateComponentsFormatter.unitsStyle = NSDateComponentsFormatterUnitsStyle.Full\n\nlet interval2 = date14.timeIntervalSinceDate(date1)\ndateComponentsFormatter.stringFromTimeInterval(interval2)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：\n```\ndateComponentsFormatter.allowedUnits = [NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second]\nlet autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n","slug":"时间魔法Swift篇","published":1,"updated":"2017-09-28T07:58:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjty6y6mr00065u03pkxo2t2w","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。</li>\n<li>NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。<a id=\"more\"></a>\n除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。</li>\n<li>NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。</li>\n<li>NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。<br>NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。</li>\n<li>NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。</li>\n</ul>\n<hr>\n<!-- more -->\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/5.jpg\" alt=\"time\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/\" target=\"_blank\" rel=\"external\">NSDate</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html\" target=\"_blank\" rel=\"external\">NSDateFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html\" target=\"_blank\" rel=\"external\">NSDateComponentFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">NSCalendar</a></li>\n</ul>\n<hr>\n<h1 id=\"NSDate\"><a href=\"#NSDate\" class=\"headerlink\" title=\"NSDate\"></a>NSDate</h1><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"keyword\">let</span> date1 = <span class=\"type\">NSDate</span>()     <span class=\"comment\">//\"May 27, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"type\">String</span>(date1) <span class=\"comment\">//\"2016-05-27 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到当前时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">var</span> interval : <span class=\"type\">NSTimeInterval</span> = date1.timeIntervalSince1970 <span class=\"comment\">//1464330977.49057 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> date2 = <span class=\"type\">NSDate</span>()</div><div class=\"line\"><span class=\"comment\">//计算时间差</span></div><div class=\"line\">interval = date2.timeIntervalSinceDate(date1) <span class=\"comment\">//0.2234339714050293</span></div><div class=\"line\"><span class=\"comment\">//date1 距现在的时间差</span></div><div class=\"line\">interval = date1.timeIntervalSinceNow         <span class=\"comment\">//-0.2241280078887939</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到date2后一天的时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date3 = date2 .dateByAddingTimeInterval(<span class=\"number\">24</span>*<span class=\"number\">3600</span>)             <span class=\"comment\">// 实例方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> date4 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeInterval: <span class=\"number\">24</span>*<span class=\"number\">3600</span>, sinceDate: date2) <span class=\"comment\">// 类方法</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"date3 == <span class=\"subst\">\\(date3)</span> ; date4 == <span class=\"subst\">\\(date4)</span>\"</span>)                   </div><div class=\"line\"><span class=\"comment\">//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后一个日期时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date5 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeIntervalSinceNow: <span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>) <span class=\"comment\">//\"May 30, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(date5)                                             <span class=\"comment\">//\"2016-05-30 06:36:17 +0000\\n\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//未来</span></div><div class=\"line\"><span class=\"keyword\">let</span> date6 = <span class=\"type\">NSDate</span>.distantFuture() <span class=\"comment\">//\"Jan 1, 4001, 8:00 AM\"</span></div><div class=\"line\"><span class=\"comment\">//亘古</span></div><div class=\"line\"><span class=\"keyword\">let</span> date7 = <span class=\"type\">NSDate</span>.distantPast()   <span class=\"comment\">//\"4001-01-01 00:00:00 +0000\\n\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"future == <span class=\"subst\">\\(date6)</span>; past == <span class=\"subst\">\\(date7)</span>\"</span>)</div><div class=\"line\"><span class=\"comment\">//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter\"><a href=\"#NSDateFormatter\" class=\"headerlink\" title=\"NSDateFormatter\"></a>NSDateFormatter</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateFormatter</span> = NSDateFormatter()</div></pre></td></tr></table></figure>\n<p>有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.FullStyle</span>   <span class=\"comment\">//完整样式（FullStyle）</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> convertedDate = dateFormatter.stringFromDate(date1)    <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.LongStyle</span>   <span class=\"comment\">//长样式（Long Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.MediumStyle</span> <span class=\"comment\">//中等样式(Medium Style)</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.ShortStyle</span>  <span class=\"comment\">//短样式（Short Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"5/27/16\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改变时区\"><a href=\"#改变时区\" class=\"headerlink\" title=\"改变时区\"></a>改变时区</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle.FullStyle</div><div class=\"line\"><span class=\"comment\">// 希腊</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"el_GR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Παρασκευή, 27 Μαΐου 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 法国</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"fr_FR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"vendredi 27 mai 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 本地</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale.currentLocale()</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"自定义的日期格式\"><a href=\"#自定义的日期格式\" class=\"headerlink\" title=\"自定义的日期格式\"></a>自定义的日期格式</h2><p><a href=\"http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns\" target=\"_blank\" rel=\"external\">设置自定义日期格式</a>在两种场景中很有用：<br>1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">EEEE：“星期”的全名（比如Monday）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如E，EE，EEE代表Mon）。</div><div class=\"line\">MMMM：“月份”的全名（比如October）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如M，MM，MMM代表Oct）。</div><div class=\"line\">dd：某月的第几天（例如，<span class=\"number\">09</span>或<span class=\"number\">15</span>）</div><div class=\"line\">yyyy：四位字符串表示“年”（例如<span class=\"number\">2015</span>）</div><div class=\"line\">HH：两位字符串表示“小时”（例如<span class=\"number\">08</span>或<span class=\"number\">19</span>）</div><div class=\"line\">mm：两位字符串表示“分钟”（例如<span class=\"number\">05</span>或<span class=\"number\">54</span>）</div><div class=\"line\">ss：两位字符串表示“秒”</div><div class=\"line\">zzz：三位字符串表示“时区”（例如GMT）</div><div class=\"line\">GGG：公元前BC或公元后AD</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEEE, MMMM dd, yyyy\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"HH:mm:ss\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"14:36:17\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> dateAsString = <span class=\"string\">\"27-05-2016 23:59\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"dd-MM-yyyy HH:mm\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> newDate = dateFormatter.dateFromString(dateAsString)   <span class=\"comment\">//\"May 27, 2016, 11:59 PM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含时区信息的复杂字符串：</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"Thu, 27 May 2016 09:22:33 GMT\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEE, dd MMM yyyy HH:mm:ss zzz\"</span></div><div class=\"line\">newDate = dateFormatter.dateFromString(dateAsString)       <span class=\"comment\">//\"May 27, 2016, 5:22 PM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents\"><a href=\"#NSDateComponents\" class=\"headerlink\" title=\"NSDateComponents\"></a>NSDateComponents</h1><h2 id=\"NSDate到NSDateComponents\"><a href=\"#NSDate到NSDateComponents\" class=\"headerlink\" title=\"NSDate到NSDateComponents\"></a>NSDate到NSDateComponents</h2><p>NSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit\" target=\"_blank\" rel=\"external\">文档</a> 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let calendar = NSCalendar.currentCalendar()</div><div class=\"line\">let dateComponents = calendar.components([NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.WeekOfYear</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit<span class=\"selector-class\">.Second</span>, NSCalendarUnit.Nanosecond], fromDate: date1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"day = \\(dateComponents.day)\"</span>, <span class=\"string\">\"month = \\(dateComponents.month)\"</span>, <span class=\"string\">\"year = \\(dateComponents.year)\"</span>, <span class=\"string\">\"week of year = \\(dateComponents.weekOfYear)\"</span>, <span class=\"string\">\"hour = \\(dateComponents.hour)\"</span>, <span class=\"string\">\"minute = \\(dateComponents.minute)\"</span>, <span class=\"string\">\"second = \\(dateComponents.second)\"</span>, <span class=\"string\">\"nanosecond = \\(dateComponents.nanosecond)\"</span> , separator: <span class=\"string\">\", \"</span>, terminator: <span class=\"string\">\"\"</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"</span></div><div class=\"line\"></div><div class=\"line\">let year = dateComponents<span class=\"selector-class\">.year</span>             <span class=\"comment\">//年</span></div><div class=\"line\">let mondth = dateComponents<span class=\"selector-class\">.month</span>          <span class=\"comment\">//月</span></div><div class=\"line\">let day = dateComponents<span class=\"selector-class\">.day</span>               <span class=\"comment\">//日</span></div><div class=\"line\">let weekOfYear = dateComponents<span class=\"selector-class\">.weekOfYear</span> <span class=\"comment\">//第几周</span></div><div class=\"line\">let hour = dateComponents<span class=\"selector-class\">.hour</span>             <span class=\"comment\">//时</span></div><div class=\"line\">let minute = dateComponents<span class=\"selector-class\">.minute</span>         <span class=\"comment\">//分</span></div><div class=\"line\">let second = dateComponents<span class=\"selector-class\">.second</span>         <span class=\"comment\">//秒</span></div><div class=\"line\">let nanosecond = dateComponents<span class=\"selector-class\">.nanosecond</span> <span class=\"comment\">//毫微秒</span></div></pre></td></tr></table></figure>\n<h2 id=\"NSDateComponents到NSDate\"><a href=\"#NSDateComponents到NSDate\" class=\"headerlink\" title=\"NSDateComponents到NSDate\"></a>NSDateComponents到NSDate</h2><h3 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let components = NSDateComponents()</div><div class=\"line\">components<span class=\"selector-class\">.day</span> = <span class=\"number\">5</span></div><div class=\"line\">components<span class=\"selector-class\">.month</span> = <span class=\"number\">01</span></div><div class=\"line\">components<span class=\"selector-class\">.year</span> = <span class=\"number\">2016</span></div><div class=\"line\">components<span class=\"selector-class\">.hour</span> = <span class=\"number\">19</span></div><div class=\"line\">components<span class=\"selector-class\">.minute</span> = <span class=\"number\">30</span></div><div class=\"line\">newDate = calendar.dateFromComponents(components)</div></pre></td></tr></table></figure></p>\n<h3 id=\"改动时区对转换日期对象的影响\"><a href=\"#改动时区对转换日期对象的影响\" class=\"headerlink\" title=\"改动时区对转换日期对象的影响\"></a>改动时区对转换日期对象的影响</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GMT = Greenwich Mean Time（格林尼治标准时间）</div><div class=\"line\">CST = China Standard Time（中国标准时间）</div><div class=\"line\">CET = Central European Time(欧洲中部时间）</div><div class=\"line\"><span class=\"section\">时区缩写的列表（http://www.timeanddate.com/time/zones/）</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"GMT\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 3:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CST\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 9:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CET\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 2:30 AM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"比较日期和时间\"><a href=\"#比较日期和时间\" class=\"headerlink\" title=\"比较日期和时间\"></a>比较日期和时间</h1><p>earlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">earlierDate:</div><div class=\"line\">如果 date1 早于 date2，该方法返回date1</div><div class=\"line\">如过 date2 早于 date1，该方法返回date2</div><div class=\"line\">如果 date1 和 date2 相同，返回date1</div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"MMM dd, yyyy zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"May 27, 2016 GMT\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> date8 = dateFormatter.dateFromString(dateAsString)! <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> date10 = date1.earlierDate(date8)                   <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\">date10 = date1.laterDate(date8)                         <span class=\"comment\">//\"May 27, 2016, 3:12 PM\"</span></div></pre></td></tr></table></figure></p>\n<p>NSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedDescending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is later than date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedAscending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) //<span class=\"string\">\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedSame &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Same date\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &gt; date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Later than Date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &lt;  date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) <span class=\"comment\">//\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Same dates\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">\"HH:mm:ss zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"14:28:16 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date11 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\">dateAsString = <span class=\"string\">\"19:53:12 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date12 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> date1.earlierDate(date2) == date1 &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> date1.isEqualToDate(date2) &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Same time\"</span>)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date1)</span> is earlier than <span class=\"subst\">\\(date2)</span>\"</span>)</div><div class=\"line\">        <span class=\"comment\">//2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date2)</span> is earlier than <span class=\"subst\">\\(date1)</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"计算未来和过去的日期\"><a href=\"#计算未来和过去的日期\" class=\"headerlink\" title=\"计算未来和过去的日期\"></a>计算未来和过去的日期</h1><p>两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。</p>\n<p>假定我们需要为这个日期往后推两个月又5天。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">monthsToAdd</span> = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">daysToAdd</span> = <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, <span class=\"string\">value:</span> monthsToAdd, <span class=\"string\">toDate:</span> date1, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, <span class=\"string\">value:</span> daysToAdd, <span class=\"string\">toDate:</span> calculatedDate!, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">new</span><span class=\"type\">DateComponents</span> = NSDateComponents()</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.month = monthsToAdd</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.day = daysToAdd</div><div class=\"line\"></div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(<span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>, toDate: <span class=\"type\">date1</span>, options: <span class=\"type\">NSCalendarOptions</span>.init(rawValue: <span class=\"type\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<hr>\n<h1 id=\"计算日期间隔\"><a href=\"#计算日期间隔\" class=\"headerlink\" title=\"计算日期间隔\"></a>计算日期间隔</h1><p>通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">var</span> diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: <span class=\"number\">0</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\"</span>)</span></span></div><div class=\"line\"><span class=\"comment\">//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div><div class=\"line\"></div><div class=\"line\">let diffYear = diffFateComponents.year</div><div class=\"line\">let diffMonth = diffFateComponents.month</div><div class=\"line\">let diffDay = diffFateComponents.day</div><div class=\"line\">let diffHour = diffFateComponents.hour</div><div class=\"line\">let diffMinute = diffFateComponents.minute</div><div class=\"line\">let diffSecond = diffFateComponents.second</div></pre></td></tr></table></figure></p>\n<p>NSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateComponentsFormatter</span> = NSDateComponentsFormatter()</div><div class=\"line\">dateComponentsFormatter.<span class=\"attr\">unitsStyle</span> = NSDateComponentsFormatterUnitsStyle.Full</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">interval2</span> = date14.timeIntervalSinceDate(date1)</div><div class=\"line\">dateComponentsFormatter.stringFromTimeInterval(interval2)</div><div class=\"line\">//<span class=\"string\">\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n<p>最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateComponentsFormatter<span class=\"selector-class\">.allowedUnits</span> = [NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second]</div><div class=\"line\">let autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)</div><div class=\"line\"><span class=\"comment\">//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。</li>\n<li>NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。</li></ul>","more":"除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n<li>NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。</li>\n<li>NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。<br>NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。</li>\n<li>NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。</li>\n\n<hr>\n<!-- more -->\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/5.jpg\" alt=\"time\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/\" target=\"_blank\" rel=\"external\">NSDate</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html\" target=\"_blank\" rel=\"external\">NSDateFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html\" target=\"_blank\" rel=\"external\">NSDateComponentFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">NSCalendar</a></li>\n</ul>\n<hr>\n<h1 id=\"NSDate\"><a href=\"#NSDate\" class=\"headerlink\" title=\"NSDate\"></a>NSDate</h1><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"keyword\">let</span> date1 = <span class=\"type\">NSDate</span>()     <span class=\"comment\">//\"May 27, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"type\">String</span>(date1) <span class=\"comment\">//\"2016-05-27 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到当前时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">var</span> interval : <span class=\"type\">NSTimeInterval</span> = date1.timeIntervalSince1970 <span class=\"comment\">//1464330977.49057 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> date2 = <span class=\"type\">NSDate</span>()</div><div class=\"line\"><span class=\"comment\">//计算时间差</span></div><div class=\"line\">interval = date2.timeIntervalSinceDate(date1) <span class=\"comment\">//0.2234339714050293</span></div><div class=\"line\"><span class=\"comment\">//date1 距现在的时间差</span></div><div class=\"line\">interval = date1.timeIntervalSinceNow         <span class=\"comment\">//-0.2241280078887939</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到date2后一天的时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date3 = date2 .dateByAddingTimeInterval(<span class=\"number\">24</span>*<span class=\"number\">3600</span>)             <span class=\"comment\">// 实例方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> date4 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeInterval: <span class=\"number\">24</span>*<span class=\"number\">3600</span>, sinceDate: date2) <span class=\"comment\">// 类方法</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"date3 == <span class=\"subst\">\\(date3)</span> ; date4 == <span class=\"subst\">\\(date4)</span>\"</span>)                   </div><div class=\"line\"><span class=\"comment\">//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后一个日期时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date5 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeIntervalSinceNow: <span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>) <span class=\"comment\">//\"May 30, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(date5)                                             <span class=\"comment\">//\"2016-05-30 06:36:17 +0000\\n\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//未来</span></div><div class=\"line\"><span class=\"keyword\">let</span> date6 = <span class=\"type\">NSDate</span>.distantFuture() <span class=\"comment\">//\"Jan 1, 4001, 8:00 AM\"</span></div><div class=\"line\"><span class=\"comment\">//亘古</span></div><div class=\"line\"><span class=\"keyword\">let</span> date7 = <span class=\"type\">NSDate</span>.distantPast()   <span class=\"comment\">//\"4001-01-01 00:00:00 +0000\\n\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"future == <span class=\"subst\">\\(date6)</span>; past == <span class=\"subst\">\\(date7)</span>\"</span>)</div><div class=\"line\"><span class=\"comment\">//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter\"><a href=\"#NSDateFormatter\" class=\"headerlink\" title=\"NSDateFormatter\"></a>NSDateFormatter</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateFormatter</span> = NSDateFormatter()</div></pre></td></tr></table></figure>\n<p>有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.FullStyle</span>   <span class=\"comment\">//完整样式（FullStyle）</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> convertedDate = dateFormatter.stringFromDate(date1)    <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.LongStyle</span>   <span class=\"comment\">//长样式（Long Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.MediumStyle</span> <span class=\"comment\">//中等样式(Medium Style)</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.ShortStyle</span>  <span class=\"comment\">//短样式（Short Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"5/27/16\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改变时区\"><a href=\"#改变时区\" class=\"headerlink\" title=\"改变时区\"></a>改变时区</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle.FullStyle</div><div class=\"line\"><span class=\"comment\">// 希腊</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"el_GR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Παρασκευή, 27 Μαΐου 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 法国</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"fr_FR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"vendredi 27 mai 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 本地</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale.currentLocale()</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"自定义的日期格式\"><a href=\"#自定义的日期格式\" class=\"headerlink\" title=\"自定义的日期格式\"></a>自定义的日期格式</h2><p><a href=\"http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns\" target=\"_blank\" rel=\"external\">设置自定义日期格式</a>在两种场景中很有用：<br>1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">EEEE：“星期”的全名（比如Monday）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如E，EE，EEE代表Mon）。</div><div class=\"line\">MMMM：“月份”的全名（比如October）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如M，MM，MMM代表Oct）。</div><div class=\"line\">dd：某月的第几天（例如，<span class=\"number\">09</span>或<span class=\"number\">15</span>）</div><div class=\"line\">yyyy：四位字符串表示“年”（例如<span class=\"number\">2015</span>）</div><div class=\"line\">HH：两位字符串表示“小时”（例如<span class=\"number\">08</span>或<span class=\"number\">19</span>）</div><div class=\"line\">mm：两位字符串表示“分钟”（例如<span class=\"number\">05</span>或<span class=\"number\">54</span>）</div><div class=\"line\">ss：两位字符串表示“秒”</div><div class=\"line\">zzz：三位字符串表示“时区”（例如GMT）</div><div class=\"line\">GGG：公元前BC或公元后AD</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEEE, MMMM dd, yyyy\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"HH:mm:ss\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"14:36:17\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> dateAsString = <span class=\"string\">\"27-05-2016 23:59\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"dd-MM-yyyy HH:mm\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> newDate = dateFormatter.dateFromString(dateAsString)   <span class=\"comment\">//\"May 27, 2016, 11:59 PM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含时区信息的复杂字符串：</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"Thu, 27 May 2016 09:22:33 GMT\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEE, dd MMM yyyy HH:mm:ss zzz\"</span></div><div class=\"line\">newDate = dateFormatter.dateFromString(dateAsString)       <span class=\"comment\">//\"May 27, 2016, 5:22 PM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents\"><a href=\"#NSDateComponents\" class=\"headerlink\" title=\"NSDateComponents\"></a>NSDateComponents</h1><h2 id=\"NSDate到NSDateComponents\"><a href=\"#NSDate到NSDateComponents\" class=\"headerlink\" title=\"NSDate到NSDateComponents\"></a>NSDate到NSDateComponents</h2><p>NSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit\" target=\"_blank\" rel=\"external\">文档</a> 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let calendar = NSCalendar.currentCalendar()</div><div class=\"line\">let dateComponents = calendar.components([NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.WeekOfYear</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit<span class=\"selector-class\">.Second</span>, NSCalendarUnit.Nanosecond], fromDate: date1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"day = \\(dateComponents.day)\"</span>, <span class=\"string\">\"month = \\(dateComponents.month)\"</span>, <span class=\"string\">\"year = \\(dateComponents.year)\"</span>, <span class=\"string\">\"week of year = \\(dateComponents.weekOfYear)\"</span>, <span class=\"string\">\"hour = \\(dateComponents.hour)\"</span>, <span class=\"string\">\"minute = \\(dateComponents.minute)\"</span>, <span class=\"string\">\"second = \\(dateComponents.second)\"</span>, <span class=\"string\">\"nanosecond = \\(dateComponents.nanosecond)\"</span> , separator: <span class=\"string\">\", \"</span>, terminator: <span class=\"string\">\"\"</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"</span></div><div class=\"line\"></div><div class=\"line\">let year = dateComponents<span class=\"selector-class\">.year</span>             <span class=\"comment\">//年</span></div><div class=\"line\">let mondth = dateComponents<span class=\"selector-class\">.month</span>          <span class=\"comment\">//月</span></div><div class=\"line\">let day = dateComponents<span class=\"selector-class\">.day</span>               <span class=\"comment\">//日</span></div><div class=\"line\">let weekOfYear = dateComponents<span class=\"selector-class\">.weekOfYear</span> <span class=\"comment\">//第几周</span></div><div class=\"line\">let hour = dateComponents<span class=\"selector-class\">.hour</span>             <span class=\"comment\">//时</span></div><div class=\"line\">let minute = dateComponents<span class=\"selector-class\">.minute</span>         <span class=\"comment\">//分</span></div><div class=\"line\">let second = dateComponents<span class=\"selector-class\">.second</span>         <span class=\"comment\">//秒</span></div><div class=\"line\">let nanosecond = dateComponents<span class=\"selector-class\">.nanosecond</span> <span class=\"comment\">//毫微秒</span></div></pre></td></tr></table></figure>\n<h2 id=\"NSDateComponents到NSDate\"><a href=\"#NSDateComponents到NSDate\" class=\"headerlink\" title=\"NSDateComponents到NSDate\"></a>NSDateComponents到NSDate</h2><h3 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let components = NSDateComponents()</div><div class=\"line\">components<span class=\"selector-class\">.day</span> = <span class=\"number\">5</span></div><div class=\"line\">components<span class=\"selector-class\">.month</span> = <span class=\"number\">01</span></div><div class=\"line\">components<span class=\"selector-class\">.year</span> = <span class=\"number\">2016</span></div><div class=\"line\">components<span class=\"selector-class\">.hour</span> = <span class=\"number\">19</span></div><div class=\"line\">components<span class=\"selector-class\">.minute</span> = <span class=\"number\">30</span></div><div class=\"line\">newDate = calendar.dateFromComponents(components)</div></pre></td></tr></table></figure></p>\n<h3 id=\"改动时区对转换日期对象的影响\"><a href=\"#改动时区对转换日期对象的影响\" class=\"headerlink\" title=\"改动时区对转换日期对象的影响\"></a>改动时区对转换日期对象的影响</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GMT = Greenwich Mean Time（格林尼治标准时间）</div><div class=\"line\">CST = China Standard Time（中国标准时间）</div><div class=\"line\">CET = Central European Time(欧洲中部时间）</div><div class=\"line\"><span class=\"section\">时区缩写的列表（http://www.timeanddate.com/time/zones/）</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"GMT\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 3:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CST\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 9:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CET\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 2:30 AM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"比较日期和时间\"><a href=\"#比较日期和时间\" class=\"headerlink\" title=\"比较日期和时间\"></a>比较日期和时间</h1><p>earlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">earlierDate:</div><div class=\"line\">如果 date1 早于 date2，该方法返回date1</div><div class=\"line\">如过 date2 早于 date1，该方法返回date2</div><div class=\"line\">如果 date1 和 date2 相同，返回date1</div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"MMM dd, yyyy zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"May 27, 2016 GMT\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> date8 = dateFormatter.dateFromString(dateAsString)! <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> date10 = date1.earlierDate(date8)                   <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\">date10 = date1.laterDate(date8)                         <span class=\"comment\">//\"May 27, 2016, 3:12 PM\"</span></div></pre></td></tr></table></figure></p>\n<p>NSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedDescending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is later than date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedAscending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) //<span class=\"string\">\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedSame &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Same date\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &gt; date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Later than Date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &lt;  date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) <span class=\"comment\">//\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Same dates\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">\"HH:mm:ss zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"14:28:16 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date11 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\">dateAsString = <span class=\"string\">\"19:53:12 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date12 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> date1.earlierDate(date2) == date1 &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> date1.isEqualToDate(date2) &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Same time\"</span>)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date1)</span> is earlier than <span class=\"subst\">\\(date2)</span>\"</span>)</div><div class=\"line\">        <span class=\"comment\">//2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date2)</span> is earlier than <span class=\"subst\">\\(date1)</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"计算未来和过去的日期\"><a href=\"#计算未来和过去的日期\" class=\"headerlink\" title=\"计算未来和过去的日期\"></a>计算未来和过去的日期</h1><p>两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。</p>\n<p>假定我们需要为这个日期往后推两个月又5天。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">monthsToAdd</span> = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">daysToAdd</span> = <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, <span class=\"string\">value:</span> monthsToAdd, <span class=\"string\">toDate:</span> date1, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, <span class=\"string\">value:</span> daysToAdd, <span class=\"string\">toDate:</span> calculatedDate!, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">new</span><span class=\"type\">DateComponents</span> = NSDateComponents()</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.month = monthsToAdd</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.day = daysToAdd</div><div class=\"line\"></div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(<span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>, toDate: <span class=\"type\">date1</span>, options: <span class=\"type\">NSCalendarOptions</span>.init(rawValue: <span class=\"type\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<hr>\n<h1 id=\"计算日期间隔\"><a href=\"#计算日期间隔\" class=\"headerlink\" title=\"计算日期间隔\"></a>计算日期间隔</h1><p>通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">var</span> diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: <span class=\"number\">0</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\"</span>)</span></span></div><div class=\"line\"><span class=\"comment\">//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div><div class=\"line\"></div><div class=\"line\">let diffYear = diffFateComponents.year</div><div class=\"line\">let diffMonth = diffFateComponents.month</div><div class=\"line\">let diffDay = diffFateComponents.day</div><div class=\"line\">let diffHour = diffFateComponents.hour</div><div class=\"line\">let diffMinute = diffFateComponents.minute</div><div class=\"line\">let diffSecond = diffFateComponents.second</div></pre></td></tr></table></figure></p>\n<p>NSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateComponentsFormatter</span> = NSDateComponentsFormatter()</div><div class=\"line\">dateComponentsFormatter.<span class=\"attr\">unitsStyle</span> = NSDateComponentsFormatterUnitsStyle.Full</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">interval2</span> = date14.timeIntervalSinceDate(date1)</div><div class=\"line\">dateComponentsFormatter.stringFromTimeInterval(interval2)</div><div class=\"line\">//<span class=\"string\">\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n<p>最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateComponentsFormatter<span class=\"selector-class\">.allowedUnits</span> = [NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second]</div><div class=\"line\">let autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)</div><div class=\"line\"><span class=\"comment\">//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjty6y6ml00015u03qc1sdhg9","tag_id":"cjty6y6mp00045u03ihz7tz2n","_id":"cjty6y6mt00085u03fw671tas"},{"post_id":"cjty6y6mo00035u03jq3v5wyb","tag_id":"cjty6y6mp00045u03ihz7tz2n","_id":"cjty6y6mv000a5u03iiuy3xt8"},{"post_id":"cjty6y6mq00055u03i3i4yy9c","tag_id":"cjty6y6mp00045u03ihz7tz2n","_id":"cjty6y6mv000c5u03hj4c2wvi"},{"post_id":"cjty6y6mr00065u03pkxo2t2w","tag_id":"cjty6y6mv000b5u035j7qm083","_id":"cjty6y6mv000d5u03kwuk71ae"}],"Tag":[{"name":"OC","_id":"cjty6y6mp00045u03ihz7tz2n"},{"name":"Swift","_id":"cjty6y6mv000b5u035j7qm083"}]}}