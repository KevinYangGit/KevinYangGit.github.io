{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/myAvatar.gif","path":"images/myAvatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e88b9d14bdba6ed451f546b8144eb1f4e0653a7c","modified":1586485139057},{"_id":"source/404.htm","hash":"d6b2506dc5ea40ace839fee3064354f3efcf6b89","modified":1506580926000},{"_id":"themes/next/.DS_Store","hash":"0907c08250c0612fdbe8f04ae1e7b3c2ec54d085","modified":1506587616000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1506508854000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1506508854000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1506508854000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1506508854000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1506508854000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1506508854000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1506508854000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1506508854000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1506508854000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1506508854000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1506508854000},{"_id":"themes/next/README.md","hash":"950ca6e9c0fa607d290a5b1fd883df44725b36b2","modified":1506508854000},{"_id":"themes/next/_config.yml","hash":"7d352019aa5f986aa1323905b5fb0ee3b731de3d","modified":1589166750196},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1506508854000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1506508854000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1506508854000},{"_id":"source/_posts/.DS_Store","hash":"ca0e16327e718948f842cd7e1dc9313538ef1473","modified":1589785896769},{"_id":"source/tags/index.md","hash":"1769cc88d5b38c0ca6b34944ce348b9198cb52bd","modified":1463622800000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1506508854000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"213d0f6c9c7ed9b035d84486b540a57e24869909","modified":1506508854000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1506508854000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1506508854000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"b414e9a084638438f0d8ae2426fee2d4bcaa0d3c","modified":1579327673021},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1506508854000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"13d37f01583769457bc3fe358d073c15dca3c674","modified":1579327673034},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1506508854000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506508572000},{"_id":"themes/next/.git/index","hash":"ae7e6ec5286834f14872554f07498526201e4b98","modified":1506508854000},{"_id":"themes/next/.git/packed-refs","hash":"a476816cb73522d446a264df704c6a632081c54a","modified":1506508854000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1506508854000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1506508854000},{"_id":"themes/next/languages/en.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1506508854000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1506508854000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1506508854000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1506508854000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1506508854000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1506508854000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1506508854000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1506508854000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1506508854000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b342544b715da19d982349017bd56c5aaca11f71","modified":1506508854000},{"_id":"themes/next/languages/zh-hk.yml","hash":"2ef272bcb1f325480f59f1e2ab95584de3c6b8da","modified":1506508854000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c53941a2eaac8e3a2f8dacc73ed555d3c6c5bd59","modified":1506508854000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1506508854000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1506508854000},{"_id":"themes/next/layout/_layout.swig","hash":"ada7ffc71cf05e7236a19e0648bce6d6d6cbc7dc","modified":1506508854000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1506508854000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1506508854000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1506508854000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1506508854000},{"_id":"themes/next/layout/post.swig","hash":"f8221725bfe3fe52723405b524077973121f17ba","modified":1506508854000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1506508854000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1506508854000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1506508854000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1506508854000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1506508854000},{"_id":"themes/next/source/.DS_Store","hash":"52c41ffa161e382c15b78349665c2041a2915b8c","modified":1579351191053},{"_id":"source/_posts/AFHTTPSessionManager/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1588831349626},{"_id":"source/_posts/AFHTTPSessionManager/AFHTTPSessionManager.md","hash":"9167dab1c3dc4c76b43e8a608b0b17f4a6d1c2fd","modified":1588830871437},{"_id":"source/_posts/OC/GCD.md","hash":"34d40cf3a08fc9f3281717987b97ed91e1804f68","modified":1588744581381},{"_id":"source/_posts/OC/时间魔法.md","hash":"f4675fd4377563ee6655e9bb88cc49c838d88533","modified":1588821327126},{"_id":"source/_posts/OC底层/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1589013433261},{"_id":"source/_posts/Swift/时间魔法Swift篇.md","hash":"f517123629abca1045f5dfee06c01fd0bd2b64f6","modified":1588744592763},{"_id":"source/_posts/不二医疗/不二医疗技术支持网址.md","hash":"b414d175c19447e0dd4ba14789577de9a7e51ed1","modified":1588744894623},{"_id":"source/_posts/不二医疗/不二医疗隐私政策.md","hash":"3e57c9727a8e12fe2570c5e99f7679fdb81c5c0b","modified":1588744898798},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1506508572000},{"_id":"themes/next/.git/logs/HEAD","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506508572000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506508572000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506508572000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1506508572000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506508572000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506508572000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1506508854000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1506508854000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1506508854000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1506508854000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1506508854000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1506508854000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1506508854000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1506508854000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1506508854000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506508854000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1506508854000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1506508854000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1506508854000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1506508854000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1506508854000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1506508854000},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1506508854000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1506508854000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1506508854000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3e01900762d889a04379abba37b419972e366698","modified":1506508854000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1506508854000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1506508854000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1506508854000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1506508854000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1506508854000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1506508854000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"80b3a5527c4bf7b19b1eaf4ccb3c3221cb8aec98","modified":1579403144523},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1506508854000},{"_id":"themes/next/layout/_partials/head.swig","hash":"2cbeae795c9929ec1966b8a1fb9c058a0b547fa9","modified":1506508854000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1506508854000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1506508854000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1506508854000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1506508854000},{"_id":"themes/next/source/css/.DS_Store","hash":"db57eca040b81c22da5bcac31c13ebbe8ddc026e","modified":1506587623000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1506508854000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1506508854000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1506508854000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1506508854000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1506508854000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1506508854000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506508854000},{"_id":"themes/next/source/images/myAvatar.gif","hash":"68c098f4f5258f5fa8f7178c169c52c04d6bbc29","modified":1579336711418},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506508854000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1506508854000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1506508854000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506508854000},{"_id":"source/_posts/AFHTTPSessionManager/AFHTTPSessionManager/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1588831386846},{"_id":"source/_posts/OC底层/原理/.DS_Store","hash":"692034393bd641fb02af292913a07864e0a11e34","modified":1589785737568},{"_id":"source/_posts/OC底层/原理/Category的实现原理.md","hash":"d41e2b06af7dfcb2d2a2d9e9b7226d6ede7d1f44","modified":1589902721090},{"_id":"source/_posts/OC底层/原理/KVO.md","hash":"03542f7725c46199416ae80ff9fcfa88f1548dd7","modified":1589474274071},{"_id":"source/_posts/OC底层/原理/OC对象的分类.md","hash":"9f2d5408031bec4e0ace04d27c9178e6cef0a44a","modified":1589353708513},{"_id":"source/_posts/OC底层/原理/OC对象的本质.md","hash":"1f3a08cf616891e553b1d6dc51a3472e09d8b5d3","modified":1589353706795},{"_id":"source/_posts/OC底层/原理/isa和superclass.md","hash":"04a9403955bfefef71f658f1326a38ad4fa6ed5e","modified":1589353713018},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-2fa19a2eea8e092a2b695a31d08f62770ed8b196.idx","hash":"719d762a75f5eb556114b28cf8e693a8135d99b6","modified":1579327672989},{"_id":"themes/next/.git/refs/heads/master","hash":"13d37f01583769457bc3fe358d073c15dca3c674","modified":1506508854000},{"_id":"themes/next/.git/refs/tags/v5.1.3","hash":"5eec1427a836e6e34c81dc784bafb33c2ccf48f9","modified":1579327673021},{"_id":"themes/next/.git/refs/tags/v5.1.4","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1579327673021},{"_id":"source/_posts/AFHTTPSessionManager/AFHTTPSessionManager/AFHTTPSessionManager.jpeg","hash":"49f6b6c3fa36e04beb3a53dc432ea751fd673107","modified":1588831241722},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506508854000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"9f840198079d39d94782a6a26418210541edbc4d","modified":1589167968835},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"069b3e919e883465f3f89665df6e5c360501c19b","modified":1579351483992},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1506508854000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1506508854000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1506508854000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1506508854000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1506508854000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1506508854000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1506508854000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1506508854000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1506508854000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1506508854000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506508854000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506508854000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1506508854000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506508854000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506508854000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506508854000},{"_id":"themes/next/source/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1506508854000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506508854000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506508854000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506508854000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1506508854000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1506508854000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"eaa4b101c5884e466705ce5bc02c50e718a43629","modified":1506587770000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506508854000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1506508854000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506508854000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506508854000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506508854000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506508854000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506508854000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506508854000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1506508854000},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理01.png","hash":"a2b8ab5d661f0cd59b1beb0ac90526cdd0f873b4","modified":1589858295327},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理02.png","hash":"b7ce5b67cf057f8bffde00fd4d99a9752ee691d2","modified":1589878954415},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理03.png","hash":"7bf1d9f72b4c4ddbd3643c8738c3cb9afceb38dd","modified":1589879057052},{"_id":"source/_posts/OC底层/原理/KVO/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1589463546003},{"_id":"source/_posts/OC底层/原理/KVO/KVO01.png","hash":"223a3ce909522712540c6e5abeffbaadb37b2600","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO02.png","hash":"d27429636b5dfbaf47ba7a43e76bc444fad4cd88","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO03.png","hash":"2c700989d7e16f55096f21bc21e0833734939fe7","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO05.png","hash":"b76ce10c3842d03c45bcc299fa6490bea3d372b0","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO04.png","hash":"0a3b765594c74ba0dc3fed25ff2f4741afdc0b5b","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO06.png","hash":"e84c1667a0863a1e9337ac8b14a1a2e4d9dc45b0","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/KVO/KVO07.png","hash":"716caff6a5f9a88af48679c3a085c892de387456","modified":1589439712000},{"_id":"source/_posts/OC底层/原理/OC对象的分类/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1589079490755},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类01.png","hash":"5c19befd827b7179814ef1781f907e219952a3e6","modified":1589049850000},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类02.png","hash":"b218f0cbe3ac57774ebc56abe2c1c3adba66464b","modified":1589050700000},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类03.png","hash":"7ef6861b68d2d804f7e7386d2cb6b86b058f3a3b","modified":1589051248000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质.png","hash":"f26b037aa6d2d42f5de29e3046f08c9a2be4525c","modified":1588830169125},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质02.png","hash":"6ad4368e9e2381a0fcb362ef23b1305ebebd25cb","modified":1588880672000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质03.png","hash":"ea5236b8a1e4379052ad5e97aa3603350c0d6fae","modified":1588910843310},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶01.png","hash":"a5776dfe684bf5b31e6111e56a4e5d959d0c9c12","modified":1588959144000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶03.png","hash":"daefbf696f3d8d79760d1f0fcd9f9951db2ccd41","modified":1588964158000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶02.png","hash":"f4e3b2920ecf8ced5da7370e0d1bbe33d3b4172c","modified":1588991941441},{"_id":"source/_posts/OC底层/原理/Category的实现原理/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1589903296849},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶04.png","hash":"9cf652902340ccd5cdd9e0a094bc6f2f68cb034f","modified":1588965200000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶05.png","hash":"f6937a61be45582d79c0612735f2b4c9f5851d9c","modified":1588965398000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶06.png","hash":"1d9f7be90372b4cfe400cbf6dbc61bf7c9adacbd","modified":1588967788000},{"_id":"source/_posts/OC底层/原理/OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png","hash":"78906c3ae470c1eac34f75c86e89bf9efd9e08ec","modified":1588830165165},{"_id":"source/_posts/OC底层/原理/OC对象的本质/取消编译main_arm64_cpp.png","hash":"0c77042f8d921614d98718946aede80aae7e6880","modified":1588838811573},{"_id":"source/_posts/OC底层/原理/isa和superclass/.DS_Store","hash":"14754969fb12fa7b3cc1d7c3d6c663de0097bbaf","modified":1589341287577},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass01.png","hash":"d343f837c6a768bca6c575e6d0a792cbc87ede34","modified":1589150344000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass02.png","hash":"e79c185d1319188e6a3defbde59a166bdb1cc690","modified":1589153978000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass03.png","hash":"0f74c46b282da91884312923cdbe59e1fa9f28cc","modified":1589157730000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass04.png","hash":"52423fb0e495240187fffbe7dca42f31863421cc","modified":1589163708000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass05.png","hash":"7337da6c4538fd5d2b0b492cf4d4b94847b195a2","modified":1589243076000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass06.png","hash":"76b8a7833d6e4e7ab8d4df51d01558236ea12c5a","modified":1589248820000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass07.png","hash":"224f82b020cb235a6c0b88936fab7b54a15acf7c","modified":1589247486000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass08.png","hash":"df2c5d403f69cc4a97eab30dbde5b989abc2c0be","modified":1589248058000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass09.png","hash":"3579788d106bf27dbb1f19849f270847a186edc9","modified":1589250122000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass10.png","hash":"ed5c772440b18187a1803cc2aabd0e96984403ff","modified":1589250246000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass12.png","hash":"36860f8b376270314a8166be549dbcea8b5b9ddf","modified":1589310216000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass11.png","hash":"c8e441475247599b567d288941519e913e0ca087","modified":1589309316000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass13.png","hash":"032a3c3c17d03d8b8637e1a6325987c26961fc8c","modified":1589312502000},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass14.png","hash":"98f1ec3524fcbc231e3c63dfed358fe5f1887852","modified":1589312502000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506508854000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1506508854000},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1579327673010},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1579327673007},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_03.png","hash":"15b3931fe1d53df484978cad494ca20591375961","modified":1589445444000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_04.png","hash":"0eb513f3bc8021df0e5b3387afafc80750efcd89","modified":1589445444000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1506508854000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1506508854000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1506508854000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"5e6c9f8a730b78c7ce5572d327c2a7311c3609b9","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"264a52c0a7877381f9a6a87d495757a0ba7e29d6","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1506508854000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506508854000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506508854000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506508854000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506508854000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_01.png","hash":"55fe71c9b78a84432f5af1938ff2514818bb2711","modified":1589445444000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_07.png","hash":"fc53665011a5be87e32ce3d170d4e3a88091a5b9","modified":1589445444000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_08.png","hash":"6cc64629e82e672ac9c702eb746d8fb281c81bf1","modified":1589445444000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506508854000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506508854000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0ff8408c7091fe0afdc6993fb887a93b57242e85","modified":1506508854000},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"6c73a1e60a0c3e202d282fad71b0e95f1abe4db2","modified":1579327673010},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"dff23c9177477b9c66c5543565d5ee99a9cc37ac","modified":1579327673007},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_02.png","hash":"c4325781d8daf6bd9a76ce31e52d04bf00785e1c","modified":1589445444000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_05.png","hash":"3087c7ea7c52944f6098107770974ab586202b0f","modified":1589445444000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_09.png","hash":"10cb5c2c983b97b5df04a6de7790657a67242f9f","modified":1589445444000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8bb08dcb8e5c5dcc5044ef1d8981d8dc16ec6036","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c15f9a179c47c3f61e56577ece63fa8c9393ac6","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1579403252264},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"8c26b70de80a258897663f0653a2cbd855b11d4a","modified":1584167596799},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1506508854000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1506508854000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506508854000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506508854000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-9cd1cbc0f9c9c0b1b4b9becee91b151145312118.idx","hash":"f84443ef4f2d75ad1dd31ed9f60fb45556aa5136","modified":1506508854000},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理04.png","hash":"a9f9d5143230f149b4bcf13a9108ae024b3d56f8","modified":1589903279210},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506508854000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506508854000},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_06.png","hash":"4d8eaccd35abd293c999a27b5ac3f264c37338e6","modified":1589445444000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506508854000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-2fa19a2eea8e092a2b695a31d08f62770ed8b196.pack","hash":"130d2377f6a98c25878f136aebe05f0c33897310","modified":1579327672988},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1506508854000},{"_id":"themes/next/.git/objects/pack/pack-9cd1cbc0f9c9c0b1b4b9becee91b151145312118.pack","hash":"a678da08e6d3af400e24781b42e2704f700d2bc6","modified":1506508854000},{"_id":"public/404.html","hash":"850e53d33731512e6b157d46d1c4186fa42ef873","modified":1589904367564},{"_id":"public/tags/index.html","hash":"5519166cf3d53fb105df019bc127dba408a76b6a","modified":1589904367564},{"_id":"public/2020/03/14/不二医疗/不二医疗技术支持网址/index.html","hash":"448c72b06bd75634311abe6aeefec6c19389452f","modified":1589904367564},{"_id":"public/archives/page/2/index.html","hash":"c4bac1ffb82b5b847e9b9fbd7580752508c4ed23","modified":1589904367564},{"_id":"public/archives/2016/index.html","hash":"a7a62c8dc6bb7074888211cd4f3569e964611529","modified":1589904367564},{"_id":"public/archives/2016/05/index.html","hash":"6d75c546fe413aacb0dcab39558764ba48739729","modified":1589904367564},{"_id":"public/archives/2016/06/index.html","hash":"45281b2a05198e9005290766425a155f8aca4133","modified":1589904367564},{"_id":"public/archives/2017/index.html","hash":"e05f27d4c1a85a0fe757dd3351ca0e19e4193f2f","modified":1589904367564},{"_id":"public/archives/2017/07/index.html","hash":"a624e7d45d216fcaa7bc31977c44953cda4afef7","modified":1589904367564},{"_id":"public/archives/2020/index.html","hash":"892146648396e2d517b7d1fb79e5695effd5c319","modified":1589904367564},{"_id":"public/archives/2020/03/index.html","hash":"0389cee5c5bb0cf34345de1cbf5aa520b0b5066b","modified":1589904367564},{"_id":"public/archives/2020/05/index.html","hash":"fda43503d2938d3fa4e0765b63fceefe191d7b4d","modified":1589904367564},{"_id":"public/tags/OC/index.html","hash":"de79ab10baa7ba948501b0865b5872fc156ca68f","modified":1589904367564},{"_id":"public/tags/Swift/index.html","hash":"04ecf435e034b7abea0a89fa5b1e0dc5d8f55e3c","modified":1589904367564},{"_id":"public/tags/Other/index.html","hash":"fbbd82741efa1c94b4cc7a44c776a8b0815122d4","modified":1589904367564},{"_id":"public/tags/OC底层原理/index.html","hash":"6bcc99e9b7ee7b6b0f6e1f07372cc4a4b08f29a5","modified":1589904367564},{"_id":"public/page/2/index.html","hash":"0edd7941376fa0acb512d3a2ee39ab540cec6cd2","modified":1589904367564},{"_id":"public/2020/05/18/OC底层/原理/Category的实现原理/index.html","hash":"ede92db8ea9149e52ccfbdcddb31007d36236350","modified":1589904367564},{"_id":"public/2020/05/13/OC底层/原理/KVO/index.html","hash":"c50c06b0959b0bf727bd097f79632f7d81a5b20f","modified":1589904367564},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/index.html","hash":"accd05cb2b74962771b769b5bcc510733b783f5a","modified":1589904367565},{"_id":"public/2020/05/09/OC底层/原理/OC对象的分类/index.html","hash":"ca1833ede94b9500883079a396a6f5e58fe67287","modified":1589904367565},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/index.html","hash":"ec01091458e95f700c509085ca0c3696e0e4f932","modified":1589904367565},{"_id":"public/2020/03/14/不二医疗/不二医疗隐私政策/index.html","hash":"20033e293150efcddc06e2ca612c9702c4effa04","modified":1589904367565},{"_id":"public/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager/index.html","hash":"3edb133973aa7a2439560b51908fd6e94d6c34a9","modified":1589904367565},{"_id":"public/2016/06/14/OC/GCD/index.html","hash":"1597c41d606cd05a2ad1014a605c25219f89e707","modified":1589904367565},{"_id":"public/2016/05/27/Swift/时间魔法Swift篇/index.html","hash":"690190df7f4d06b34dd73d823a55b0bb8444ce58","modified":1589904367565},{"_id":"public/2016/05/25/OC/时间魔法/index.html","hash":"3dbc13160ca3c2f6099edec193f8df96cabfbd26","modified":1589904367565},{"_id":"public/archives/index.html","hash":"43ecc29c0c601129673f26db344688e6d35b1c34","modified":1589904367565},{"_id":"public/index.html","hash":"1de5321650818510e452f6f7b0767a27f721f5db","modified":1589904367565},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589904367572},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1589904367572},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1589904367572},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1589904367572},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1589904367572},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1589904367572},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1589904367572},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1589904367572},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1589904367572},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1589904367572},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1589904367572},{"_id":"public/images/myAvatar.gif","hash":"68c098f4f5258f5fa8f7178c169c52c04d6bbc29","modified":1589904367572},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1589904367572},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1589904367572},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1589904367572},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1589904367572},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1589904367572},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589904367572},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589904367572},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589904367572},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589904367572},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589904367572},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589904367572},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1589904367572},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1589904367572},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1589904367572},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1589904367572},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1589904367572},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1589904367573},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1589904367573},{"_id":"public/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类01.png","hash":"5c19befd827b7179814ef1781f907e219952a3e6","modified":1589904367573},{"_id":"public/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类02.png","hash":"b218f0cbe3ac57774ebc56abe2c1c3adba66464b","modified":1589904367573},{"_id":"public/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类03.png","hash":"7ef6861b68d2d804f7e7386d2cb6b86b058f3a3b","modified":1589904367573},{"_id":"public/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理01.png","hash":"a2b8ab5d661f0cd59b1beb0ac90526cdd0f873b4","modified":1589904367573},{"_id":"public/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理02.png","hash":"b7ce5b67cf057f8bffde00fd4d99a9752ee691d2","modified":1589904367573},{"_id":"public/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理03.png","hash":"7bf1d9f72b4c4ddbd3643c8738c3cb9afceb38dd","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质.png","hash":"f26b037aa6d2d42f5de29e3046f08c9a2be4525c","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质02.png","hash":"6ad4368e9e2381a0fcb362ef23b1305ebebd25cb","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质03.png","hash":"ea5236b8a1e4379052ad5e97aa3603350c0d6fae","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶01.png","hash":"a5776dfe684bf5b31e6111e56a4e5d959d0c9c12","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶02.png","hash":"f4e3b2920ecf8ced5da7370e0d1bbe33d3b4172c","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶03.png","hash":"daefbf696f3d8d79760d1f0fcd9f9951db2ccd41","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶04.png","hash":"9cf652902340ccd5cdd9e0a094bc6f2f68cb034f","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶05.png","hash":"f6937a61be45582d79c0612735f2b4c9f5851d9c","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶06.png","hash":"1d9f7be90372b4cfe400cbf6dbc61bf7c9adacbd","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png","hash":"78906c3ae470c1eac34f75c86e89bf9efd9e08ec","modified":1589904367573},{"_id":"public/2020/05/06/OC底层/原理/OC对象的本质/取消编译main_arm64_cpp.png","hash":"0c77042f8d921614d98718946aede80aae7e6880","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass01.png","hash":"d343f837c6a768bca6c575e6d0a792cbc87ede34","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass02.png","hash":"e79c185d1319188e6a3defbde59a166bdb1cc690","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass03.png","hash":"0f74c46b282da91884312923cdbe59e1fa9f28cc","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass04.png","hash":"52423fb0e495240187fffbe7dca42f31863421cc","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass05.png","hash":"7337da6c4538fd5d2b0b492cf4d4b94847b195a2","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass06.png","hash":"76b8a7833d6e4e7ab8d4df51d01558236ea12c5a","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass07.png","hash":"224f82b020cb235a6c0b88936fab7b54a15acf7c","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass08.png","hash":"df2c5d403f69cc4a97eab30dbde5b989abc2c0be","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass09.png","hash":"3579788d106bf27dbb1f19849f270847a186edc9","modified":1589904367573},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass10.png","hash":"ed5c772440b18187a1803cc2aabd0e96984403ff","modified":1589904367574},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass11.png","hash":"c8e441475247599b567d288941519e913e0ca087","modified":1589904367574},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass12.png","hash":"36860f8b376270314a8166be549dbcea8b5b9ddf","modified":1589904367574},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass13.png","hash":"032a3c3c17d03d8b8637e1a6325987c26961fc8c","modified":1589904367574},{"_id":"public/2020/05/11/OC底层/原理/isa和superclass/isa和superclass14.png","hash":"98f1ec3524fcbc231e3c63dfed358fe5f1887852","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO01.png","hash":"223a3ce909522712540c6e5abeffbaadb37b2600","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO02.png","hash":"d27429636b5dfbaf47ba7a43e76bc444fad4cd88","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO04.png","hash":"0a3b765594c74ba0dc3fed25ff2f4741afdc0b5b","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO03.png","hash":"2c700989d7e16f55096f21bc21e0833734939fe7","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO05.png","hash":"b76ce10c3842d03c45bcc299fa6490bea3d372b0","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO06.png","hash":"e84c1667a0863a1e9337ac8b14a1a2e4d9dc45b0","modified":1589904367574},{"_id":"public/2020/05/13/OC底层/原理/KVO/KVO07.png","hash":"716caff6a5f9a88af48679c3a085c892de387456","modified":1589904367574},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1589904367884},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1589904367888},{"_id":"public/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager/AFHTTPSessionManager.jpeg","hash":"49f6b6c3fa36e04beb3a53dc432ea751fd673107","modified":1589904367891},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_04.png","hash":"0eb513f3bc8021df0e5b3387afafc80750efcd89","modified":1589904367891},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_03.png","hash":"15b3931fe1d53df484978cad494ca20591375961","modified":1589904367891},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1589904367896},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1589904367896},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1589904367896},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1589904367896},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1589904367896},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1589904367896},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1589904367896},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1589904367896},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1589904367896},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1589904367896},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1589904367896},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1589904367896},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1589904367896},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1589904367896},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1589904367896},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1589904367896},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1589904367896},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1589904367896},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1589904367896},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1589904367896},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1589904367896},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1589904367897},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1589904367897},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1589904367897},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1589904367898},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1589904367898},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1589904367898},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1589904367898},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589904367898},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1589904367898},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1589904367898},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1589904367898},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1589904367898},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1589904367898},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1589904367898},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1589904367899},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1589904367899},{"_id":"public/css/main.css","hash":"8c748db3822fcb7ac899ba87f853c1146fb90a68","modified":1589904367899},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1589904367899},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1589904367899},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1589904367899},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1589904367899},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1589904367899},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1589904367899},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1589904367899},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1589904367899},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1589904367899},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1589904367899},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1589904367899},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589904367899},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1589904367899},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1589904367899},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1589904367899},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1589904367899},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1589904367899},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1589904367899},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1589904367900},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1589904367900},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1589904367900},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_01.png","hash":"55fe71c9b78a84432f5af1938ff2514818bb2711","modified":1589904367900},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_07.png","hash":"fc53665011a5be87e32ce3d170d4e3a88091a5b9","modified":1589904367900},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_08.png","hash":"6cc64629e82e672ac9c702eb746d8fb281c81bf1","modified":1589904367900},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_02.png","hash":"c4325781d8daf6bd9a76ce31e52d04bf00785e1c","modified":1589904367903},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_05.png","hash":"3087c7ea7c52944f6098107770974ab586202b0f","modified":1589904367903},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_09.png","hash":"10cb5c2c983b97b5df04a6de7790657a67242f9f","modified":1589904367903},{"_id":"public/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理04.png","hash":"a9f9d5143230f149b4bcf13a9108ae024b3d56f8","modified":1589904367908},{"_id":"public/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_06.png","hash":"4d8eaccd35abd293c999a27b5ac3f264c37338e6","modified":1589904367908},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1589904367922}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta name=\"robots\" content=\"all\" />\n        <meta name=\"robots\" content=\"index,follow\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n            charset=\"utf-8\" homePageUrl=\"/\"\n            homePageName=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","source":"404.htm","raw":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta name=\"robots\" content=\"all\" />\n        <meta name=\"robots\" content=\"index,follow\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n            charset=\"utf-8\" homePageUrl=\"/\"\n            homePageName=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","date":"2020-01-18T05:24:39.341Z","updated":"2017-09-28T06:42:06.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckae40aim0000te03kb4g2jbf","content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"robots\" content=\"all\">\n        <meta name=\"robots\" content=\"index,follow\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <meta name=\"robots\" content=\"all\">\n        <meta name=\"robots\" content=\"index,follow\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n    </head>\n    <body>\n        <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n            </script>\n        <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n        <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n"},{"title":"tags","date":"2016-05-19T01:50:26.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-19 09:50:26\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-19T01:53:20.000Z","path":"tags/index.html","layout":"page","_id":"ckae40and0001te03qrdmaj98","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AFHTTPSessionManager","date":"2017-07-14T16:00:00.000Z","_content":"\n# 概述\nAFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。\n\n<!-- more -->\n\n![AFHTTPSessionManager](AFHTTPSessionManager/AFHTTPSessionManager.png)\n\n# AFHTTPSessionManager\n下面是 AFHTTPSessionManager 引用的类：\n\n.h 文件  \n\n```\n#import <Foundation/Foundation.h>\n#if !TARGET_OS_WATCH\n//提供和联网相关的function, 可用来检查网络连接状态\n#import <SystemConfiguration/SystemConfiguration.h>\n#endif\n#import <TargetConditionals.h>\n\n#if TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV\n#import <MobileCoreServices/MobileCoreServices.h>\n#else\n#import <CoreServices/CoreServices.h>\n#endif\n\n#import \"AFURLSessionManager.h\"\n```\n.m 文件\n\n```\n#import \"AFHTTPSessionManager.h\"\n\n#import \"AFURLRequestSerialization.h\"\n#import \"AFURLResponseSerialization.h\"\n\n#import <Availability.h>\n#import <TargetConditionals.h>\n#import <Security/Security.h>\n\n#import <netinet/in.h>\n#import <netinet6/in6.h>\n#import <arpa/inet.h>\n#import <ifaddrs.h>\n#import <netdb.h>\n\n#if TARGET_OS_IOS || TARGET_OS_TV\n#import <UIKit/UIKit.h>\n#elif TARGET_OS_WATCH\n#import <WatchKit/WatchKit.h>\n#endif\n```\n## 类库介绍\n### SystemConfiguration\n\n### [TargetConditionals](https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/)\n\n“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<TargetConditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  \n\n* TARGET_OS\\_IOS\n* TARGET_OS\\_WATCH\n* TARGET_OS\\_TV    \n\n还有几个有趣的宏：\n\n* TARGET_IPHONE\\_SIMULATOR\n* TARGET_OS\\_MAC\n* TARGET_OS\\_IPHONE\n\n这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET\\_OS\\_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET\\_OS\\_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET\\_OS\\_IPHONE。\n\n\n### Availability  \n\n### Security  \n\n### netinet/in.h\n\n### netinet6/in6.h  \n\n### arpa/inet.h  \n\n### ifaddrs.h  \n\n### netdb.h  \n\n\n\n1. [AFURLSessionManager](http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more) 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；\n\n2. [AFURLRequestSerialization]() 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；\n3. [AFURLResponseSerialization]() 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。\n\nAFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。\n\n```\n- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method\n                                       URLString:(NSString *)URLString\n                                      parameters:(id)parameters\n                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress\n                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress\n                                         success:(void (^)(NSURLSessionDataTask *, id))success\n                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure\n{\n    NSError *serializationError = nil;\n//1.创建 request\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&serializationError];\n    if (serializationError) {\n        if (failure) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n        }\n\n        return nil;\n    }\n//2.创建 dataTask\n    __block NSURLSessionDataTask *dataTask = nil;\n    dataTask = [self dataTaskWithRequest:request\n                          uploadProgress:uploadProgress\n                        downloadProgress:downloadProgress\n                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n        if (error) {\n            if (failure) {\n                failure(dataTask, error);\n            }\n        } else {\n            if (success) {\n                success(dataTask, responseObject);\n            }\n        }\n    }];\n\n    return dataTask;\n}\n```\n以上描述也可以简单的概括为：  \n\n* AFHTTPSessionManager 通过 AFURLRequestSerialization —> request  \n* AFHTTPSessionManager 通过 AFURLSessionManager + request —> dataTask  \n* AFHTTPSessionManager 通过 AFURLResponseSerialization —> 序列化后的请求结果  \n\n# 知识点梳理\n\n## \\#pragma\n[#pragma](http://nshipster.cn/pragma/) 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。\n这里的 [#pragma clang diagnostic ignored \"-Wgnu\"](http://fuckingclangwarnings.com) 就是用来忽略警告的。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n```\n\n## block\n对象 dataTask 在被 [__block](http://www.jianshu.com/p/710026d5bcfb) 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。\n\n```\n__block NSURLSessionDataTask *dataTask = nil;\ndataTask = [self dataTaskWithRequest:request\n                      uploadProgress:uploadProgress\n                    downloadProgress:downloadProgress\n                   completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n    if (error) \n        if (failure) {\n            failure(dataTask, error);\n        }\n    } else {\n        if (success) {\n            success(dataTask, responseObject);\n        }\n    }\n}];\n```\n可以用 clang -rewrite-objc 命令查看它的 c++ 实现：\n\n\n```\n//__block NSURLSessionDataTask *dataTask = nil;\n//============= 对应代码 =============\nstruct __Block_byref_dataTask_0 {\n void *__isa;\n __Block_byref_dataTask_0 *__forwarding;\n int __flags;\n int __size;\n void (*__Block_byref_id_object_copy)(void*, void*);\n void (*__Block_byref_id_object_dispose)(void*);\n NSURLSessionDataTask *dataTask;\n};\n\n//============= block 变量 =============\nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 {\n  struct __block_impl impl;\n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;\n  struct __block_impl *failure;\n  struct __block_impl *success;\n  __Block_byref_dataTask_0 *dataTask; // by ref\n  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(void *fp, struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, void *_failure, void *_success, __Block_byref_dataTask_0 *_dataTask, int flags=0) : failure((struct __block_impl *)_failure), success((struct __block_impl *)_success), dataTask(_dataTask->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n//============= block 函数体 =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, NSURLResponse *response, id responseObject, NSError *error) {\n  __Block_byref_dataTask_0 *dataTask = __cself->dataTask; // bound by ref\n  void (*failure)(NSURLSessionDataTask *, NSError *) = (void (*)(NSURLSessionDataTask *, NSError *))__cself->failure; // bound by copy\n  void (*success)(NSURLSessionDataTask *, id) = (void (*)(NSURLSessionDataTask *, id))__cself->success; // bound by copy\n\n        if (error) {\n            if (failure) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, NSError *))((__block_impl *)failure)->FuncPtr)((__block_impl *)failure, (dataTask->__forwarding->dataTask), error);\n            }\n        } else {\n            if (success) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, id))((__block_impl *)success)->FuncPtr)((__block_impl *)success, (dataTask->__forwarding->dataTask), responseObject);\n            }\n        }\n    }\n    \n//============= copy =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   \nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_assign((void*)&dst->failure, (void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_assign((void*)&dst->dataTask, (void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_assign((void*)&dst->success, (void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n}\n\n//============= release =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_dispose((void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_dispose((void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_dispose((void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);}  \n\n//============= block的内存管理 =============\nstatic struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 {\n  size_t reserved;  \n  size_t Block_size;  \n  void (*copy)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  \n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    \n  void (*dispose)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  \n} __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = { 0,   \nsizeof(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0};  \n```\n在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：\n\n```\nimpl.isa = &_NSConcreteStackBlock;\n```\n\n* _NSConcreteStackBlock：(栈区)  \n\t只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。\n\tStackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。\n\n* _NSConcreteMallocBlock：(堆区)  \n\t有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制\n\n* _NSConcreteGlobalBlock：(全局)  \n   没有用到外界变量或只用到全局变量、静态变量的block为\\_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。\n\n## NSSecure​Coding\n[NSSecureCoding](http://nshipster.cn/nssecurecoding/) 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  \n\nNSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。\n\n## NSParameterAssert\n\n基础类库中定义了两套断言宏：\n\n* [NSAssert / NSCAssert](http://nshipster.cn/nsassertionhandler/)\n* [NSParameterAssert / NSCParameterAssert](http://nshipster.cn/nsassertionhandler/)\n\n基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。  \n第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。  \n第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  \n\nNSAssertionHandler:自定义处理方法,程序不会直接崩溃。  \n\n* 当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用   \n  -handleFailureInMethod:object:file:lineNumber:description: 方法。  \n* 当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用  \n  -handleFailureInFunction:file:lineNumber:description: 方法。\n  \nNSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。  \nPS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。\n\n\n","source":"_posts/AFHTTPSessionManager/AFHTTPSessionManager.md","raw":"---\ntitle: AFHTTPSessionManager\ndate: 2017-07-15 \ntags: OC\n---\n\n# 概述\nAFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。\n\n<!-- more -->\n\n![AFHTTPSessionManager](AFHTTPSessionManager/AFHTTPSessionManager.png)\n\n# AFHTTPSessionManager\n下面是 AFHTTPSessionManager 引用的类：\n\n.h 文件  \n\n```\n#import <Foundation/Foundation.h>\n#if !TARGET_OS_WATCH\n//提供和联网相关的function, 可用来检查网络连接状态\n#import <SystemConfiguration/SystemConfiguration.h>\n#endif\n#import <TargetConditionals.h>\n\n#if TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV\n#import <MobileCoreServices/MobileCoreServices.h>\n#else\n#import <CoreServices/CoreServices.h>\n#endif\n\n#import \"AFURLSessionManager.h\"\n```\n.m 文件\n\n```\n#import \"AFHTTPSessionManager.h\"\n\n#import \"AFURLRequestSerialization.h\"\n#import \"AFURLResponseSerialization.h\"\n\n#import <Availability.h>\n#import <TargetConditionals.h>\n#import <Security/Security.h>\n\n#import <netinet/in.h>\n#import <netinet6/in6.h>\n#import <arpa/inet.h>\n#import <ifaddrs.h>\n#import <netdb.h>\n\n#if TARGET_OS_IOS || TARGET_OS_TV\n#import <UIKit/UIKit.h>\n#elif TARGET_OS_WATCH\n#import <WatchKit/WatchKit.h>\n#endif\n```\n## 类库介绍\n### SystemConfiguration\n\n### [TargetConditionals](https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/)\n\n“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<TargetConditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  \n\n* TARGET_OS\\_IOS\n* TARGET_OS\\_WATCH\n* TARGET_OS\\_TV    \n\n还有几个有趣的宏：\n\n* TARGET_IPHONE\\_SIMULATOR\n* TARGET_OS\\_MAC\n* TARGET_OS\\_IPHONE\n\n这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET\\_OS\\_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET\\_OS\\_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET\\_OS\\_IPHONE。\n\n\n### Availability  \n\n### Security  \n\n### netinet/in.h\n\n### netinet6/in6.h  \n\n### arpa/inet.h  \n\n### ifaddrs.h  \n\n### netdb.h  \n\n\n\n1. [AFURLSessionManager](http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more) 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；\n\n2. [AFURLRequestSerialization]() 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；\n3. [AFURLResponseSerialization]() 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。\n\nAFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。\n\n```\n- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method\n                                       URLString:(NSString *)URLString\n                                      parameters:(id)parameters\n                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress\n                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress\n                                         success:(void (^)(NSURLSessionDataTask *, id))success\n                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure\n{\n    NSError *serializationError = nil;\n//1.创建 request\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&serializationError];\n    if (serializationError) {\n        if (failure) {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n        }\n\n        return nil;\n    }\n//2.创建 dataTask\n    __block NSURLSessionDataTask *dataTask = nil;\n    dataTask = [self dataTaskWithRequest:request\n                          uploadProgress:uploadProgress\n                        downloadProgress:downloadProgress\n                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n        if (error) {\n            if (failure) {\n                failure(dataTask, error);\n            }\n        } else {\n            if (success) {\n                success(dataTask, responseObject);\n            }\n        }\n    }];\n\n    return dataTask;\n}\n```\n以上描述也可以简单的概括为：  \n\n* AFHTTPSessionManager 通过 AFURLRequestSerialization —> request  \n* AFHTTPSessionManager 通过 AFURLSessionManager + request —> dataTask  \n* AFHTTPSessionManager 通过 AFURLResponseSerialization —> 序列化后的请求结果  \n\n# 知识点梳理\n\n## \\#pragma\n[#pragma](http://nshipster.cn/pragma/) 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。\n这里的 [#pragma clang diagnostic ignored \"-Wgnu\"](http://fuckingclangwarnings.com) 就是用来忽略警告的。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wgnu\"\n            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{\n                failure(nil, serializationError);\n            });\n#pragma clang diagnostic pop\n```\n\n## block\n对象 dataTask 在被 [__block](http://www.jianshu.com/p/710026d5bcfb) 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。\n\n```\n__block NSURLSessionDataTask *dataTask = nil;\ndataTask = [self dataTaskWithRequest:request\n                      uploadProgress:uploadProgress\n                    downloadProgress:downloadProgress\n                   completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {\n    if (error) \n        if (failure) {\n            failure(dataTask, error);\n        }\n    } else {\n        if (success) {\n            success(dataTask, responseObject);\n        }\n    }\n}];\n```\n可以用 clang -rewrite-objc 命令查看它的 c++ 实现：\n\n\n```\n//__block NSURLSessionDataTask *dataTask = nil;\n//============= 对应代码 =============\nstruct __Block_byref_dataTask_0 {\n void *__isa;\n __Block_byref_dataTask_0 *__forwarding;\n int __flags;\n int __size;\n void (*__Block_byref_id_object_copy)(void*, void*);\n void (*__Block_byref_id_object_dispose)(void*);\n NSURLSessionDataTask *dataTask;\n};\n\n//============= block 变量 =============\nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 {\n  struct __block_impl impl;\n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;\n  struct __block_impl *failure;\n  struct __block_impl *success;\n  __Block_byref_dataTask_0 *dataTask; // by ref\n  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(void *fp, struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, void *_failure, void *_success, __Block_byref_dataTask_0 *_dataTask, int flags=0) : failure((struct __block_impl *)_failure), success((struct __block_impl *)_success), dataTask(_dataTask->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\n//============= block 函数体 =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, NSURLResponse *response, id responseObject, NSError *error) {\n  __Block_byref_dataTask_0 *dataTask = __cself->dataTask; // bound by ref\n  void (*failure)(NSURLSessionDataTask *, NSError *) = (void (*)(NSURLSessionDataTask *, NSError *))__cself->failure; // bound by copy\n  void (*success)(NSURLSessionDataTask *, id) = (void (*)(NSURLSessionDataTask *, id))__cself->success; // bound by copy\n\n        if (error) {\n            if (failure) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, NSError *))((__block_impl *)failure)->FuncPtr)((__block_impl *)failure, (dataTask->__forwarding->dataTask), error);\n            }\n        } else {\n            if (success) {\n                ((void (*)(__block_impl *, NSURLSessionDataTask *, id))((__block_impl *)success)->FuncPtr)((__block_impl *)success, (dataTask->__forwarding->dataTask), responseObject);\n            }\n        }\n    }\n    \n//============= copy =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   \nstruct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_assign((void*)&dst->failure, (void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_assign((void*)&dst->dataTask, (void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_assign((void*)&dst->success, (void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n}\n\n//============= release =============\nstatic void __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) {  \n_Block_object_dispose((void*)src->failure, 7/*BLOCK_FIELD_IS_BLOCK*/);  \n_Block_object_dispose((void*)src->dataTask, 8/*BLOCK_FIELD_IS_BYREF*/);  \n_Block_object_dispose((void*)src->success, 7/*BLOCK_FIELD_IS_BLOCK*/);}  \n\n//============= block的内存管理 =============\nstatic struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 {\n  size_t reserved;  \n  size_t Block_size;  \n  void (*copy)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  \n  struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    \n  void (*dispose)(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  \n} __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = { 0,   \nsizeof(struct __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  \n__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0};  \n```\n在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：\n\n```\nimpl.isa = &_NSConcreteStackBlock;\n```\n\n* _NSConcreteStackBlock：(栈区)  \n\t只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。\n\tStackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。\n\n* _NSConcreteMallocBlock：(堆区)  \n\t有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制\n\n* _NSConcreteGlobalBlock：(全局)  \n   没有用到外界变量或只用到全局变量、静态变量的block为\\_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。\n\n## NSSecure​Coding\n[NSSecureCoding](http://nshipster.cn/nssecurecoding/) 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  \n\nNSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。\n\n## NSParameterAssert\n\n基础类库中定义了两套断言宏：\n\n* [NSAssert / NSCAssert](http://nshipster.cn/nsassertionhandler/)\n* [NSParameterAssert / NSCParameterAssert](http://nshipster.cn/nsassertionhandler/)\n\n基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。  \n第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。  \n第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  \n\nNSAssertionHandler:自定义处理方法,程序不会直接崩溃。  \n\n* 当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用   \n  -handleFailureInMethod:object:file:lineNumber:description: 方法。  \n* 当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用  \n  -handleFailureInFunction:file:lineNumber:description: 方法。\n  \nNSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。  \nPS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。\n\n\n","slug":"AFHTTPSessionManager/AFHTTPSessionManager","published":1,"updated":"2020-05-07T05:54:31.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aog0002te03q8ntkako","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>AFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager/AFHTTPSessionManager.png\" alt=\"AFHTTPSessionManager\"></p>\n<h1 id=\"AFHTTPSessionManager\"><a href=\"#AFHTTPSessionManager\" class=\"headerlink\" title=\"AFHTTPSessionManager\"></a>AFHTTPSessionManager</h1><p>下面是 AFHTTPSessionManager 引用的类：</p>\n<p>.h 文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Foundation/Foundation.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !TARGET_OS_WATCH</span></div><div class=\"line\">//提供和联网相关的function, 可用来检查网络连接状态</div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;SystemConfiguration/SystemConfiguration.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;CoreServices/CoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLSessionManager.h\"</span></span></div></pre></td></tr></table></figure>\n<p>.m 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFHTTPSessionManager.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLRequestSerialization.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLResponseSerialization.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Availability.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Security/Security.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet6/in6.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;arpa/inet.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;ifaddrs.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netdb.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;UIKit/UIKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">elif</span> TARGET_OS_WATCH</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;WatchKit/WatchKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div></pre></td></tr></table></figure>\n<h2 id=\"类库介绍\"><a href=\"#类库介绍\" class=\"headerlink\" title=\"类库介绍\"></a>类库介绍</h2><h3 id=\"SystemConfiguration\"><a href=\"#SystemConfiguration\" class=\"headerlink\" title=\"SystemConfiguration\"></a>SystemConfiguration</h3><h3 id=\"TargetConditionals\"><a href=\"#TargetConditionals\" class=\"headerlink\" title=\"TargetConditionals\"></a><a href=\"https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/\" target=\"_blank\" rel=\"external\">TargetConditionals</a></h3><p>“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<targetconditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  </targetconditionals.h></p>\n<ul>\n<li>TARGET_OS_IOS</li>\n<li>TARGET_OS_WATCH</li>\n<li>TARGET_OS_TV    </li>\n</ul>\n<p>还有几个有趣的宏：</p>\n<ul>\n<li>TARGET_IPHONE_SIMULATOR</li>\n<li>TARGET_OS_MAC</li>\n<li>TARGET_OS_IPHONE</li>\n</ul>\n<p>这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET_OS_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET_OS_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET_OS_IPHONE。</p>\n<h3 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h3><h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><h3 id=\"netinet-in-h\"><a href=\"#netinet-in-h\" class=\"headerlink\" title=\"netinet/in.h\"></a>netinet/in.h</h3><h3 id=\"netinet6-in6-h\"><a href=\"#netinet6-in6-h\" class=\"headerlink\" title=\"netinet6/in6.h\"></a>netinet6/in6.h</h3><h3 id=\"arpa-inet-h\"><a href=\"#arpa-inet-h\" class=\"headerlink\" title=\"arpa/inet.h\"></a>arpa/inet.h</h3><h3 id=\"ifaddrs-h\"><a href=\"#ifaddrs-h\" class=\"headerlink\" title=\"ifaddrs.h\"></a>ifaddrs.h</h3><h3 id=\"netdb-h\"><a href=\"#netdb-h\" class=\"headerlink\" title=\"netdb.h\"></a>netdb.h</h3><ol>\n<li><p><a href=\"http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more\" target=\"_blank\" rel=\"external\">AFURLSessionManager</a> 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；</p>\n</li>\n<li><p><a href=\"\">AFURLRequestSerialization</a> 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；</p>\n</li>\n<li><a href=\"\">AFURLResponseSerialization</a> 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。</li>\n</ol>\n<p>AFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTaskWithHTTPMethod:(<span class=\"built_in\">NSString</span> *)method</div><div class=\"line\">                                       URLString:(<span class=\"built_in\">NSString</span> *)URLString</div><div class=\"line\">                                      parameters:(<span class=\"keyword\">id</span>)parameters</div><div class=\"line\">                                  uploadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *uploadProgress)) uploadProgress</div><div class=\"line\">                                downloadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *downloadProgress)) downloadProgress</div><div class=\"line\">                                         success:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))success</div><div class=\"line\">                                         failure:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))failure</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSError</span> *serializationError = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"comment\">//1.创建 request</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *request = [<span class=\"keyword\">self</span>.requestSerializer requestWithMethod:method URLString:[[<span class=\"built_in\">NSURL</span> URLWithString:URLString relativeToURL:<span class=\"keyword\">self</span>.baseURL] absoluteString] parameters:parameters error:&amp;serializationError];</div><div class=\"line\">    <span class=\"keyword\">if</span> (serializationError) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//2.创建 dataTask</span></div><div class=\"line\">    __block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">    dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                          uploadProgress:uploadProgress</div><div class=\"line\">                        downloadProgress:downloadProgress</div><div class=\"line\">                       completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                failure(dataTask, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                success(dataTask, responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dataTask;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上描述也可以简单的概括为：  </p>\n<ul>\n<li>AFHTTPSessionManager 通过 AFURLRequestSerialization —&gt; request  </li>\n<li>AFHTTPSessionManager 通过 AFURLSessionManager + request —&gt; dataTask  </li>\n<li>AFHTTPSessionManager 通过 AFURLResponseSerialization —&gt; 序列化后的请求结果  </li>\n</ul>\n<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"pragma\"><a href=\"#pragma\" class=\"headerlink\" title=\"#pragma\"></a>#pragma</h2><p><a href=\"http://nshipster.cn/pragma/\" target=\"_blank\" rel=\"external\">#pragma</a> 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。<br>这里的 <a href=\"http://fuckingclangwarnings.com\" target=\"_blank\" rel=\"external\">#pragma clang diagnostic ignored “-Wgnu”</a> 就是用来忽略警告的。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>对象 dataTask 在被 <a href=\"http://www.jianshu.com/p/710026d5bcfb\" target=\"_blank\" rel=\"external\">__block</a> 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                      uploadProgress:uploadProgress</div><div class=\"line\">                    downloadProgress:downloadProgress</div><div class=\"line\">                   completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) </div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">            failure(dataTask, error);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">            success(dataTask, responseObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>可以用 clang -rewrite-objc 命令查看它的 c++ 实现：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//__block NSURLSessionDataTask *dataTask = nil;</span></div><div class=\"line\"><span class=\"comment\">//============= 对应代码 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __Block_byref_dataTask_0 &#123;</div><div class=\"line\"> <span class=\"keyword\">void</span> *__isa;</div><div class=\"line\"> __Block_byref_dataTask_0 *__forwarding;</div><div class=\"line\"> <span class=\"keyword\">int</span> __flags;</div><div class=\"line\"> <span class=\"keyword\">int</span> __size;</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_copy)(<span class=\"keyword\">void</span>*, <span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_dispose)(<span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 变量 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *failure;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *success;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask; <span class=\"comment\">// by ref</span></div><div class=\"line\">  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(<span class=\"keyword\">void</span> *fp, <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, <span class=\"keyword\">void</span> *_failure, <span class=\"keyword\">void</span> *_success, __Block_byref_dataTask_0 *_dataTask, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : failure((<span class=\"keyword\">struct</span> __block_impl *)_failure), success((<span class=\"keyword\">struct</span> __block_impl *)_success), dataTask(_dataTask-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 函数体 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask = __cself-&gt;dataTask; <span class=\"comment\">// bound by ref</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*failure)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))__cself-&gt;failure; <span class=\"comment\">// bound by copy</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*success)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))__cself-&gt;success; <span class=\"comment\">// bound by copy</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))((__block_impl *)failure)-&gt;FuncPtr)((__block_impl *)failure, (dataTask-&gt;__forwarding-&gt;dataTask), error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))((__block_impl *)success)-&gt;FuncPtr)((__block_impl *)success, (dataTask-&gt;__forwarding-&gt;dataTask), responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//============= copy =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   </div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;failure, (<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;dataTask, (<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;success, (<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= release =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block的内存管理 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;  </div><div class=\"line\">  size_t Block_size;  </div><div class=\"line\">  <span class=\"keyword\">void</span> (*<span class=\"keyword\">copy</span>)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  </div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    </div><div class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  </div><div class=\"line\">&#125; __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = &#123; <span class=\"number\">0</span>,   </div><div class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0&#125;;</div></pre></td></tr></table></figure>\n<p>在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">impl.isa = <span class=\"meta\">&amp;_NSConcreteStackBlock;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>_NSConcreteStackBlock：(栈区)<br>  只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。<br>  StackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。</p>\n</li>\n<li><p>_NSConcreteMallocBlock：(堆区)<br>  有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制</p>\n</li>\n<li><p>_NSConcreteGlobalBlock：(全局)<br> 没有用到外界变量或只用到全局变量、静态变量的block为_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。</p>\n</li>\n</ul>\n<h2 id=\"NSSecure​Coding\"><a href=\"#NSSecure​Coding\" class=\"headerlink\" title=\"NSSecure​Coding\"></a>NSSecure​Coding</h2><p><a href=\"http://nshipster.cn/nssecurecoding/\" target=\"_blank\" rel=\"external\">NSSecureCoding</a> 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  </p>\n<p>NSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。</p>\n<h2 id=\"NSParameterAssert\"><a href=\"#NSParameterAssert\" class=\"headerlink\" title=\"NSParameterAssert\"></a>NSParameterAssert</h2><p>基础类库中定义了两套断言宏：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSAssert / NSCAssert</a></li>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSParameterAssert / NSCParameterAssert</a></li>\n</ul>\n<p>基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。<br>第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。<br>第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  </p>\n<p>NSAssertionHandler:自定义处理方法,程序不会直接崩溃。  </p>\n<ul>\n<li>当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInMethod:object:file:lineNumber:description: 方法。  </li>\n<li>当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInFunction:file:lineNumber:description: 方法。</li>\n</ul>\n<p>NSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。<br>PS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>AFHTTPSessionManager 继承自 AFURLSessionManager，它是对 AFURLSessionManager 里的方法进行了二次封装，使用时更加便捷，是网络请求最常用的类。</p>","more":"<p><img src=\"/2017/07/15/AFHTTPSessionManager/AFHTTPSessionManager/AFHTTPSessionManager.png\" alt=\"AFHTTPSessionManager\"></p>\n<h1 id=\"AFHTTPSessionManager\"><a href=\"#AFHTTPSessionManager\" class=\"headerlink\" title=\"AFHTTPSessionManager\"></a>AFHTTPSessionManager</h1><p>下面是 AFHTTPSessionManager 引用的类：</p>\n<p>.h 文件  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Foundation/Foundation.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !TARGET_OS_WATCH</span></div><div class=\"line\">//提供和联网相关的function, 可用来检查网络连接状态</div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;SystemConfiguration/SystemConfiguration.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_WATCH || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;CoreServices/CoreServices.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLSessionManager.h\"</span></span></div></pre></td></tr></table></figure>\n<p>.m 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFHTTPSessionManager.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLRequestSerialization.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import <span class=\"string\">\"AFURLResponseSerialization.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Availability.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;TargetConditionals.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;Security/Security.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netinet6/in6.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;arpa/inet.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;ifaddrs.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;netdb.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> TARGET_OS_IOS || TARGET_OS_TV</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;UIKit/UIKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">elif</span> TARGET_OS_WATCH</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">import &lt;WatchKit/WatchKit.h&gt;</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div></pre></td></tr></table></figure>\n<h2 id=\"类库介绍\"><a href=\"#类库介绍\" class=\"headerlink\" title=\"类库介绍\"></a>类库介绍</h2><h3 id=\"SystemConfiguration\"><a href=\"#SystemConfiguration\" class=\"headerlink\" title=\"SystemConfiguration\"></a>SystemConfiguration</h3><h3 id=\"TargetConditionals\"><a href=\"#TargetConditionals\" class=\"headerlink\" title=\"TargetConditionals\"></a><a href=\"https://www.cocoanetics.com/2012/09/target-conditionals-and-availability/\" target=\"_blank\" rel=\"external\">TargetConditionals</a></h3><p>“Target Conditionals” 目标条件，是由 Apple 提供的，内部定义了多种方便的宏代码。如果要使用内部的一些宏，就需要导入 \\<targetconditionals.h> ，否则在用到时会提示未定义。作为判断条件这里用到的宏是：  </targetconditionals.h></p>\n<ul>\n<li>TARGET_OS_IOS</li>\n<li>TARGET_OS_WATCH</li>\n<li>TARGET_OS_TV    </li>\n</ul>\n<p>还有几个有趣的宏：</p>\n<ul>\n<li>TARGET_IPHONE_SIMULATOR</li>\n<li>TARGET_OS_MAC</li>\n<li>TARGET_OS_IPHONE</li>\n</ul>\n<p>这里需要注意的是 iPhone OS 是 Mac OS 演变过来的子系统，所以当运行在手机系统上时，TARGET_OS_MAC 也会被定义。这个时候，如果想限制代码只包含在手机系统上时，可以使用 TARGET_OS_IPHONE，相应的只包含在 Mac 系统上使用 #if !TARGET_OS_IPHONE。</p>\n<h3 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h3><h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><h3 id=\"netinet-in-h\"><a href=\"#netinet-in-h\" class=\"headerlink\" title=\"netinet/in.h\"></a>netinet/in.h</h3><h3 id=\"netinet6-in6-h\"><a href=\"#netinet6-in6-h\" class=\"headerlink\" title=\"netinet6/in6.h\"></a>netinet6/in6.h</h3><h3 id=\"arpa-inet-h\"><a href=\"#arpa-inet-h\" class=\"headerlink\" title=\"arpa/inet.h\"></a>arpa/inet.h</h3><h3 id=\"ifaddrs-h\"><a href=\"#ifaddrs-h\" class=\"headerlink\" title=\"ifaddrs.h\"></a>ifaddrs.h</h3><h3 id=\"netdb-h\"><a href=\"#netdb-h\" class=\"headerlink\" title=\"netdb.h\"></a>netdb.h</h3><ol>\n<li><p><a href=\"http://kevinyanggit.github.io/2017/08/10/AFURLSessionManager/#more\" target=\"_blank\" rel=\"external\">AFURLSessionManager</a> 是网络请求类。主要做了两件事，一是创建 NSURLSession 对象并实现相应的代理方法；二是创建 NSURLSessionDataTask 对象并管理；</p>\n</li>\n<li><p><a href=\"\">AFURLRequestSerialization</a> 是序列化请求数据类。它会将请求数据进行序列化后生成一个 NSMutableURLRequest 对象，用于创建 NSURLSessionDataTask 对象；</p>\n</li>\n<li><a href=\"\">AFURLResponseSerialization</a> 是序列化返回结果类。它会将服务器返回的数据进行序列化后，返回给开发者。</li>\n</ol>\n<p>AFHTTPSessionManager 中实现的 GET、HEAD、POST、PUT、PATCH、DELETE 等方法，都是基于下面的这个私有方法。下面的这个方法会根据传入的 method 来区分具体实现的方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTaskWithHTTPMethod:(<span class=\"built_in\">NSString</span> *)method</div><div class=\"line\">                                       URLString:(<span class=\"built_in\">NSString</span> *)URLString</div><div class=\"line\">                                      parameters:(<span class=\"keyword\">id</span>)parameters</div><div class=\"line\">                                  uploadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *uploadProgress)) uploadProgress</div><div class=\"line\">                                downloadProgress:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSProgress</span> *downloadProgress)) downloadProgress</div><div class=\"line\">                                         success:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))success</div><div class=\"line\">                                         failure:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))failure</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSError</span> *serializationError = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"comment\">//1.创建 request</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *request = [<span class=\"keyword\">self</span>.requestSerializer requestWithMethod:method URLString:[[<span class=\"built_in\">NSURL</span> URLWithString:URLString relativeToURL:<span class=\"keyword\">self</span>.baseURL] absoluteString] parameters:parameters error:&amp;serializationError];</div><div class=\"line\">    <span class=\"keyword\">if</span> (serializationError) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//2.创建 dataTask</span></div><div class=\"line\">    __block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">    dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                          uploadProgress:uploadProgress</div><div class=\"line\">                        downloadProgress:downloadProgress</div><div class=\"line\">                       completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                failure(dataTask, error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                success(dataTask, responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dataTask;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上描述也可以简单的概括为：  </p>\n<ul>\n<li>AFHTTPSessionManager 通过 AFURLRequestSerialization —&gt; request  </li>\n<li>AFHTTPSessionManager 通过 AFURLSessionManager + request —&gt; dataTask  </li>\n<li>AFHTTPSessionManager 通过 AFURLResponseSerialization —&gt; 序列化后的请求结果  </li>\n</ul>\n<h1 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h1><h2 id=\"pragma\"><a href=\"#pragma\" class=\"headerlink\" title=\"#pragma\"></a>#pragma</h2><p><a href=\"http://nshipster.cn/pragma/\" target=\"_blank\" rel=\"external\">#pragma</a> 声明主要由 Xcode 用来完成两个主要任务：整理代码和防止编译器警告。通过使用#pragma clang diagnostic push/pop，你可以告诉编译器仅仅为某一特定部分的代码（最初的诊断设置在最后的pop被恢复）来忽视特定警告。<br>这里的 <a href=\"http://fuckingclangwarnings.com\" target=\"_blank\" rel=\"external\">#pragma clang diagnostic ignored “-Wgnu”</a> 就是用来忽略警告的。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic ignored <span class=\"meta-string\">\"-Wgnu\"</span></span></div><div class=\"line\">            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                failure(<span class=\"literal\">nil</span>, serializationError);</div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>对象 dataTask 在被 <a href=\"http://www.jianshu.com/p/710026d5bcfb\" target=\"_blank\" rel=\"external\">__block</a> 修饰后，会生成一个结构体，里面记录了 dataTask 对象的地址。当 block 的函数体内部调用 dataTask 时，该结构体会作为 block 实例内的一个变量被 block 函数体记录。由于记录的是 dataTask 对象的地址，所以在函数体内部可以对其进行修改，同样的，在外部被修改时，函数体内部的 dataTask 也会被修改，毕竟它们访问的是同一个地址。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">__block <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">dataTask = [<span class=\"keyword\">self</span> dataTaskWithRequest:request</div><div class=\"line\">                      uploadProgress:uploadProgress</div><div class=\"line\">                    downloadProgress:downloadProgress</div><div class=\"line\">                   completionHandler:^(<span class=\"built_in\">NSURLResponse</span> * __unused response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) </div><div class=\"line\">        <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">            failure(dataTask, error);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">            success(dataTask, responseObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>可以用 clang -rewrite-objc 命令查看它的 c++ 实现：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//__block NSURLSessionDataTask *dataTask = nil;</span></div><div class=\"line\"><span class=\"comment\">//============= 对应代码 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __Block_byref_dataTask_0 &#123;</div><div class=\"line\"> <span class=\"keyword\">void</span> *__isa;</div><div class=\"line\"> __Block_byref_dataTask_0 *__forwarding;</div><div class=\"line\"> <span class=\"keyword\">int</span> __flags;</div><div class=\"line\"> <span class=\"keyword\">int</span> __size;</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_copy)(<span class=\"keyword\">void</span>*, <span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"keyword\">void</span> (*__Block_byref_id_object_dispose)(<span class=\"keyword\">void</span>*);</div><div class=\"line\"> <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 变量 =============</span></div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0* Desc;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *failure;</div><div class=\"line\">  <span class=\"keyword\">struct</span> __block_impl *success;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask; <span class=\"comment\">// by ref</span></div><div class=\"line\">  __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0(<span class=\"keyword\">void</span> *fp, <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 *desc, <span class=\"keyword\">void</span> *_failure, <span class=\"keyword\">void</span> *_success, __Block_byref_dataTask_0 *_dataTask, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : failure((<span class=\"keyword\">struct</span> __block_impl *)_failure), success((<span class=\"keyword\">struct</span> __block_impl *)_success), dataTask(_dataTask-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block 函数体 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_func_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0 *__cself, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"keyword\">id</span> responseObject, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">  __Block_byref_dataTask_0 *dataTask = __cself-&gt;dataTask; <span class=\"comment\">// bound by ref</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*failure)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))__cself-&gt;failure; <span class=\"comment\">// bound by copy</span></div><div class=\"line\">  <span class=\"keyword\">void</span> (*success)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>) = (<span class=\"keyword\">void</span> (*)(<span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))__cself-&gt;success; <span class=\"comment\">// bound by copy</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (failure) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"built_in\">NSError</span> *))((__block_impl *)failure)-&gt;FuncPtr)((__block_impl *)failure, (dataTask-&gt;__forwarding-&gt;dataTask), error);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (success) &#123;</div><div class=\"line\">                ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"built_in\">NSURLSessionDataTask</span> *, <span class=\"keyword\">id</span>))((__block_impl *)success)-&gt;FuncPtr)((__block_impl *)success, (dataTask-&gt;__forwarding-&gt;dataTask), responseObject);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//============= copy =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*dst,   </div><div class=\"line\"><span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;failure, (<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;dataTask, (<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;success, (<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= release =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*src) &#123;  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;failure, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;dataTask, <span class=\"number\">8</span><span class=\"comment\">/*BLOCK_FIELD_IS_BYREF*/</span>);  </div><div class=\"line\">_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;success, <span class=\"number\">7</span><span class=\"comment\">/*BLOCK_FIELD_IS_BLOCK*/</span>);&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//============= block的内存管理 =============</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;  </div><div class=\"line\">  size_t Block_size;  </div><div class=\"line\">  <span class=\"keyword\">void</span> (*<span class=\"keyword\">copy</span>)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*,  </div><div class=\"line\">  <span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);    </div><div class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0*);  </div><div class=\"line\">&#125; __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_desc_0_DATA = &#123; <span class=\"number\">0</span>,   </div><div class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> __AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_impl_0),  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_copy_0,  </div><div class=\"line\">__AFHTTPSessionManager__dataTaskWithHTTPMethod_URLString_parameters_uploadProgress_downloadProgress_success_failure__block_dispose_0&#125;;</div></pre></td></tr></table></figure>\n<p>在 block 变量结构体内部有这样一句代码，它表示了该 block 的类型：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">impl.isa = <span class=\"meta\">&amp;_NSConcreteStackBlock;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>_NSConcreteStackBlock：(栈区)<br>  只用到外部局部变量、成员属性变量，且没有强指针引用的block都是StackBlock。<br>  StackBlock的生命周期由系统控制的，一旦返回之后，就被系统销毁了。</p>\n</li>\n<li><p>_NSConcreteMallocBlock：(堆区)<br>  有强指针引用或copy修饰的成员属性引用的block会被复制一份到堆中成为MallocBlock，没有强指针引用即销毁，生命周期由程序员控制</p>\n</li>\n<li><p>_NSConcreteGlobalBlock：(全局)<br> 没有用到外界变量或只用到全局变量、静态变量的block为_NSConcreteGlobalBlock，生命周期从创建到应用程序结束。</p>\n</li>\n</ul>\n<h2 id=\"NSSecure​Coding\"><a href=\"#NSSecure​Coding\" class=\"headerlink\" title=\"NSSecure​Coding\"></a>NSSecure​Coding</h2><p><a href=\"http://nshipster.cn/nssecurecoding/\" target=\"_blank\" rel=\"external\">NSSecureCoding</a> 是在 iOS 6 / OS X Mountain Lion SDKs 里推出的协议。如果一个类符合 NSSecureCoding 协议并在 supportsSecureCoding 返回 YES，就声明了它可以处理本身实例的编码解码方式，以防止替换攻击。  </p>\n<p>NSSecureCoding 和 NSCoding 的区别在于解数据时要指定 Class，用 decodeObjectOfClass:forKey: 方法代替了 decodeObjectForKey:。这样做更安全，因为序列化后的数据有可能被篡改，若不指定 Class，decode 出来的对象可能不是原来的对象，有潜在风险。</p>\n<h2 id=\"NSParameterAssert\"><a href=\"#NSParameterAssert\" class=\"headerlink\" title=\"NSParameterAssert\"></a>NSParameterAssert</h2><p>基础类库中定义了两套断言宏：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSAssert / NSCAssert</a></li>\n<li><a href=\"http://nshipster.cn/nsassertionhandler/\" target=\"_blank\" rel=\"external\">NSParameterAssert / NSCParameterAssert</a></li>\n</ul>\n<p>基础类库从语义学上和功能性上使断言处理器的 API 在两个方面区别开来。<br>第一个区别在于一般断言（NSAssert）和参数化断言（NSParameterAssert）。<br>第二个区别在于 C 和 Objective-C 的断言：NSAssert 应当只用于 Objective-C 环境中（即方法实现中），而 NSCAssert 应当只用于 C 环境中（即函数中）。  </p>\n<p>NSAssertionHandler:自定义处理方法,程序不会直接崩溃。  </p>\n<ul>\n<li>当 NSAssert 或 NSParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInMethod:object:file:lineNumber:description: 方法。  </li>\n<li>当 NSCAssert 或 NSCParameterAssert 的条件不满足时，断言处理器会调用<br>-handleFailureInFunction:file:lineNumber:description: 方法。</li>\n</ul>\n<p>NSAssert/NSParameterAssert 两者的区别是前者是所有断言, 后者只是针对参数是否存在的断言。<br>PS : Xcode 已经默认将 release 环境下的断言取消了, 避免了忘记关闭断言造成的程序不稳定。</p>"},{"title":"多线程 — GCD","date":"2016-06-13T16:00:00.000Z","_content":"# 简介\nGCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。\n\n<!-- more -->\n![gcd_oc](http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg)\n\n* [官方文档](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/)\n* [WWDC](https://developer.apple.com/videos/play/wwdc2015/718/)\n***\n# 创建队列\n## dispatch_queue_create\n主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。\n\n```\ndispatch_queue_t queue = dispatch_get_main_queue(); //OC\nlet queue = dispatch_get_main_queue()               //Swift\n```\n\n手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。\n\n```\n//OC\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", NULL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT);\n\n//Swift\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", nil);\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL)\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT)\n```\n\n***\n# 创建任务\n## dispatch\\_async / dispatch\\_sync\n同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；\n异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。\n\n* dispatch_sync 同步任务：会阻塞当前线程；\n* dispatch_async 异步任务：不会阻塞当前线程\n\n```\n//OC\ndispatch_sync(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\ndispatch_async(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\n\n//Swift\ndispatch_sync(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\ndispatch_async(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\n```\n***\n## dispatch_after\ndispatch_after只是延时提交block，不是延时立刻执行。\n\n```\ndouble delayInSeconds = 2.0;\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    [self bar];\n});\n```\n\n## dispatch_set_target_queue\ndispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。\n\n（如果将多个串行的queue使用dispatch\\_set\\_target\\_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。\n例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch\\_set\\_target\\_queue了。）\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t firstQueue = dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t secondQueue = dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", DISPATCH_QUEUE_CONCURRENT);\n\ndispatch_set_target_queue(firstQueue, serialQueue);\ndispatch_set_target_queue(secondQueue, serialQueue);\n\ndispatch_async(firstQueue, ^{\n    NSLog(@\"1\");\n    [NSThread sleepForTimeInterval:3.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"2\");\n    [NSThread sleepForTimeInterval:2.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"3\");\n    [NSThread sleepForTimeInterval:1.f];\n});\n```\n\n打印结果1、2、3。\n***\n## dispatch_barrier_async / dispatch_barrier_sync\ndispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。\n\ndispatch_barrier_sync 同上，除了它是同步返回函数。\n```\n//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。\ndispatch_queue_t dataQueue = dispatch_queue_create(\"com.starming.gcddemo.dataqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"read 1\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 2\");\n});\n//等待前面的都完成，在执行barrier后面的\ndispatch_barrier_async(dataQueue, ^{\n    NSLog(@\"write 1\");\n    [NSThread sleepForTimeInterval:1];\n});\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"read 3\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 4\");\n});\n```\n\n打印结果：read 1、read 2、write 1、read 3、read 4。\n\n***\n\n## dispatch_apply\ndispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。\n\n需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_apply(10, concurrentQueue, ^(size_t i) {\n    NSLog(@\"%zu\",i);\n});\ndispatch_async(dispatch_get_main_queue(), ^{\n    dispatch_apply(10, concurrentQueue, ^(size_t i) {\n        NSLog(@\"%zu\",i);\n    });\n});\nNSLog(@\"The end\");\n//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。\n```\n\n对比：\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\nif (explode) {\n    //有问题的情况，可能会死锁\n    for (int i = 0; i < 999 ; i++) {\n        dispatch_async(concurrentQueue, ^{\n            NSLog(@\"wrong %d\",i);\n            //do something hard\n        });\n    }\n} else {\n    //会优化很多，能够利用GCD管理\n    dispatch_apply(999, concurrentQueue, ^(size_t i){\n        NSLog(@\"correct %zu\",i);\n        //do something hard\n    });\n    NSLog(@\"----\");\n}\n```\n\n***\n\n# Dispatch Block\n## dispatch\\_block_create\n自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch\\_block\\_create\\_with\\_qos\\_class中指定QoS类别即可。\n\n```\n//normal way\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"run block\");\n});\ndispatch_async(concurrentQueue, block);\n\n//QOS way\ndispatch_block_t qosBlock = dispatch_block_create_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1, ^{\n    NSLog(@\"run qos block\");\n});\ndispatch_async(concurrentQueue, qosBlock);\n```\n\n***\n\n## dispatch\\_block_wait\n可以根据dispatch block来设置等待时间，参数DISPATCH\\_TIME_FOREVER会一直等待block结束。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"star\");   \n    [NSThread sleepForTimeInterval:5.f];\n    NSLog(@\"end\");\n});\ndispatch_async(serialQueue, block);\n//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成\ndispatch_block_wait(block, DISPATCH_TIME_FOREVER);\nNSLog(@\"ok, now can go on\");//打印结果：star、end、ok, now can go on。\n```\n\n***\n\n## dispatch\\_block_notify\ndispatch\\_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\n//first block执行完才在serial queue中执行second block\ndispatch_block_notify(firstBlock, serialQueue, secondBlock);\n\n//打印结果：first block start、first block end、second block run。\n```\n\n***\n## dispatch\\_block_cancel\niOS8后GCD支持对dispatch block的取消\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_async(serialQueue, secondBlock);\n//取消secondBlock\ndispatch_block_cancel(secondBlock);\n//打印结果：first block start、first block end。\n```\n\n***\n\n# Dispatch_groups\n当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch\\_group 来实现了，dispatch\\_group 能很方便的解决同步的问题。dispatch\\_group_create可以创建一个group对象，然后可以添加block到该组里面。\n\n***\n## dispatch\\_group_create\n创建dispatch\\_group_t\n\n```\ndispatch_group_t group = dispatch_group_create();\n```\n***\n## dispatch\\_group_async\n自己创建队列时，当然就用dispatch\\_group_async函数，简单有效。\n\n```\ndispatch_group_async(group, queue, ^{\n    //Do you work...\n});\n```\n\n***\n\n## dispatch\\_group_wait\ndispatch\\_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n//在group中添加队列的block\ndispatch_group_async(group, concurrentQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_wait(group, DISPATCH_TIME_FOREVER);\nNSLog(@\"can continue\");//打印结果：2、1、can continue。\n```\n\n***\n\n## dispatch\\_group_notify\n功能与dispatch\\_group\\_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch\\_group\\_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, concurrentQueue, ^{\n   [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    NSLog(@\"end\");\n});\n[NSThread sleepForTimeInterval:2.f];\nNSLog(@\"can continue\");//打印结果：2、can continue、1、end。\n```\n\n***\n## dispatch\\_group\\_enter / dispatch\\_group\\_leave\n\n```\nAFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n//Enter group\ndispatch_group_enter(group);\n[manager GET:@\"http://www.baidu.com\" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    //Leave group\n    dispatch_group_leave(group);\n}    failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    //Leave group\n    dispatch_group_leave(group);\n}];\n```\n\n***\n\n## dispatch\\_semaphore_create\ndispatch semaphore用来做解决一些同步的问题，dispatch\\_semaphore\\_create会创建一个信号量，该函数需要传递一个信号值，dispatch\\_semaphore\\_signal会使信号值加1，如果信号值的大小等于1，dispatch\\_semaphore\\_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。\n\n```\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    NSLog(@\"start\");\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"semaphore +1\");\n    dispatch_semaphore_signal(semaphore); //+1 semaphore\n});\ndispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\nNSLog(@\"continue\");//打印结果：start、semaphore +1、continue。\n```\n\n***\n# Dispatch Source\ndispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。\n\nDispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：\n\n| Methods                              | explain     |\n| ------------------------------------ |:-----------:|\n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_ADD        | 变量增加      | \n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_OR         | 变量OR       | \n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_SEND       | Mach端口发送  |\n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_RECV       | MACH端口接收  |\n| DISPATCH_SOURCE\\_TYPE\\_MEMORYPRESSURE  | 内存压力  |\n| DISPATCH_SOURCE\\_TYPE\\_PROC            | 进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号  |\n| DISPATCH_SOURCE\\_TYPE\\_READ            | IO操作，如对文件的操作、socket操作的读响应  |\n| DISPATCH_SOURCE\\_TYPE\\_SIGNAL          | 接收到UNIX信号时响应 |\n| DISPATCH_SOURCE\\_TYPE\\_TIMER           | 定时器  |\n| DISPATCH_SOURCE\\_TYPE\\_VNODE           | 文件状态监听，文件被删除、移动、重命名  |\n| DISPATCH_SOURCE\\_TYPE\\_WRITE           | IO操作，如对文件的操作、socket操作的写响应  |\n\n####方法：\n*  dispatch\\_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。\n*  dispatch_source\\_set\\_event\\_handler：设置事件处理handler\n*  dispatch\\_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。\n\n```\n//监视文件夹内文件变化\nNSURL *directoryURL; //指定需要监听的文件夹路径\nint const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);\nif (fd < 0) {\n    char buffer[80];\n    strerror_r(errno, buffer, sizeof(buffer));\n    NSLog(@\"Unable to open \\\"%@\\\": %s (%d)\", [directoryURL path], buffer, errno);\n    return;\n}\n\n//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,\n                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置响应dispatch源事件的block，在dispatch源指定的队列上运行\ndispatch_source_set_event_handler(source, ^(){\n    \n    //可以通过dispatch_source_get_data(source)来得到dispatch源数据\n    unsigned long const data = dispatch_source_get_data(source);\n    if (data & DISPATCH_VNODE_WRITE) {\n        NSLog(@\"The directory changed.\");\n    }\n    if (data & DISPATCH_VNODE_DELETE) {\n        NSLog(@\"The directory has been deleted.\");\n    }\n});\ndispatch_source_set_cancel_handler(source, ^(){\n    close(fd);\n});\n//dispatch源创建后处于suspend状态，所以需要启动dispatch源\ndispatch_resume(source);\n//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听\n```\n\n***\n\n## dispatch\\_time_t\n\n```\ndispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0/*延迟执行时间*/ * NSEC_PER_SEC));\n\ndispatch_after(delayTime, dispatch_get_main_queue(), ^{\n    [weakSelf delayMethod];\n});\n```\n\n***\n\n## dispatch_source\\_set\\_timer\n\n```\ndispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway);\n```\n\n第一个参数:定时器对象；第二个参数:DISPATCH\\_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  \n\nNSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。\n\n   \nNSEC\\_PER_SEC 1000000000ull  \nUSEC\\_PER_SEC 1000000ull  \nNSEC\\_PER_USEC 1000ull  \n\nNSEC：纳秒；USEC：微妙；SEC：秒；PER：每。\n\n```\n//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置事件的处理handler\ndispatch_source_set_event_handler(source, ^(){\n    NSLog(@\"Time flies.\");\n});\n\n//5秒触发一次，误差100毫秒\ndispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC,100ull * NSEC_PER_MSEC);\n\n//开始处理定时器事件，dispatch_suspend暂停处理事件\ndispatch_resume(source);\n\n```\n\n***\n\n## dispatch_suspend和dispatch\\_resume\n*  dispatch_suspend 挂起队列\n*  dispatch_resume  恢复队列\n\ndispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。\n\n```\ndispatch_queue_t queue = dispatch_queue_create(\"me.kevin.gcd\", DISPATCH_QUEUE_SERIAL);\n\n//提交第一个block，延时5秒打印。\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds...\");\n});\n\n//提交第二个block，也是延时5秒打印\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds again...\");\n});\n\n//延时一秒\nNSLog(@\"sleep 1 second...\");\n[NSThread sleepForTimeInterval:1];\n\n//挂起队列\nNSLog(@\"suspend...\");\ndispatch_suspend(queue);\n\n//延时10秒\nNSLog(@\"sleep 10 second...\");\n[NSThread sleepForTimeInterval:10];\n\n//恢复队列\nNSLog(@\"resume...\");\ndispatch_resume(queue);\n```\n\n可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。\n结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。\n\n***\n\n# 死锁！\n## dispatch_sync导致的死锁\n在main线程使用“同步”方法提交Block，必定会死锁：\n\n```\ndispatch_sync(dispatch_get_main_queue(), ^{\n    NSLog(@\"I am block...\");\n});\n```\n\n嵌套调用可能就会造成死锁：\n\n```\n- (void)updateUI1 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 1\");\n\n        //死锁！\n        [self updateUI2];\n    });\n}\n- (void)updateUI2 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 2\");\n    });\n}\n```\n\n其它情况：\n\n```\n- (void)deadLockCase1 {\n    NSLog(@\"1\");\n    //主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase2 {\n    NSLog(@\"1\");\n    //3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行\n    dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase3 {\n    dispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\n    NSLog(@\"1\");\n    dispatch_async(serialQueue, ^{\n        NSLog(@\"2\");\n        //串行队列里面同步一个串行队列就会死锁\n        dispatch_sync(serialQueue, ^{\n            NSLog(@\"3\");\n        });\n        NSLog(@\"4\");\n    });\n    NSLog(@\"5\");\n}\n```\n\n***\n\n## dispatch_apply导致的死锁:\n\n```\n//在串行队列里嵌套使用dispatch_apply\ndispatch_queue_t queue = dispatch_queue_create(\"me.tutuge.test.gcd\", DISPATCH_QUEUE_SERIAL);\n\ndispatch_apply(3, queue, ^(size_t i) {\n\tNSLog(@\"apply loop: %zu\", i);\n\n    //再来一个dispatch_apply！死锁！\n\tdispatch_apply(3, queue, ^(size_t j) {\n\t\tNSLog(@\"apply loop inside %zu\", j);\n\t});\n});\n```\n","source":"_posts/OC/GCD.md","raw":"---\ntitle: 多线程 — GCD\ndate: 2016-06-14 \ntags: OC\n---\n# 简介\nGCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。\n\n<!-- more -->\n![gcd_oc](http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg)\n\n* [官方文档](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/)\n* [WWDC](https://developer.apple.com/videos/play/wwdc2015/718/)\n***\n# 创建队列\n## dispatch_queue_create\n主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。\n\n```\ndispatch_queue_t queue = dispatch_get_main_queue(); //OC\nlet queue = dispatch_get_main_queue()               //Swift\n```\n\n手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。\n\n```\n//OC\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", NULL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT);\n\n//Swift\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", nil);\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_SERIAL)\nlet queue = dispatch_queue_create(\"tk.bourne.testQueue\", DISPATCH_QUEUE_CONCURRENT)\n```\n\n***\n# 创建任务\n## dispatch\\_async / dispatch\\_sync\n同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；\n异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。\n\n* dispatch_sync 同步任务：会阻塞当前线程；\n* dispatch_async 异步任务：不会阻塞当前线程\n\n```\n//OC\ndispatch_sync(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\ndispatch_async(<#queue#>, ^{\n    NSLog(@\"%@\", [NSThread currentThread]);\n});\n\n//Swift\ndispatch_sync(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\ndispatch_async(<#queue#>, { () -> Void in\n    println(NSThread.currentThread())\n})\n```\n***\n## dispatch_after\ndispatch_after只是延时提交block，不是延时立刻执行。\n\n```\ndouble delayInSeconds = 2.0;\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    [self bar];\n});\n```\n\n## dispatch_set_target_queue\ndispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。\n\n（如果将多个串行的queue使用dispatch\\_set\\_target\\_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。\n例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch\\_set\\_target\\_queue了。）\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t firstQueue = dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_queue_t secondQueue = dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", DISPATCH_QUEUE_CONCURRENT);\n\ndispatch_set_target_queue(firstQueue, serialQueue);\ndispatch_set_target_queue(secondQueue, serialQueue);\n\ndispatch_async(firstQueue, ^{\n    NSLog(@\"1\");\n    [NSThread sleepForTimeInterval:3.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"2\");\n    [NSThread sleepForTimeInterval:2.f];\n});\ndispatch_async(secondQueue, ^{\n    NSLog(@\"3\");\n    [NSThread sleepForTimeInterval:1.f];\n});\n```\n\n打印结果1、2、3。\n***\n## dispatch_barrier_async / dispatch_barrier_sync\ndispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。\n\ndispatch_barrier_sync 同上，除了它是同步返回函数。\n```\n//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。\ndispatch_queue_t dataQueue = dispatch_queue_create(\"com.starming.gcddemo.dataqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"read 1\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 2\");\n});\n//等待前面的都完成，在执行barrier后面的\ndispatch_barrier_async(dataQueue, ^{\n    NSLog(@\"write 1\");\n    [NSThread sleepForTimeInterval:1];\n});\ndispatch_async(dataQueue, ^{\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"read 3\");\n});\ndispatch_async(dataQueue, ^{\n    NSLog(@\"read 4\");\n});\n```\n\n打印结果：read 1、read 2、write 1、read 3、read 4。\n\n***\n\n## dispatch_apply\ndispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。\n\n需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_apply(10, concurrentQueue, ^(size_t i) {\n    NSLog(@\"%zu\",i);\n});\ndispatch_async(dispatch_get_main_queue(), ^{\n    dispatch_apply(10, concurrentQueue, ^(size_t i) {\n        NSLog(@\"%zu\",i);\n    });\n});\nNSLog(@\"The end\");\n//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。\n```\n\n对比：\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\nif (explode) {\n    //有问题的情况，可能会死锁\n    for (int i = 0; i < 999 ; i++) {\n        dispatch_async(concurrentQueue, ^{\n            NSLog(@\"wrong %d\",i);\n            //do something hard\n        });\n    }\n} else {\n    //会优化很多，能够利用GCD管理\n    dispatch_apply(999, concurrentQueue, ^(size_t i){\n        NSLog(@\"correct %zu\",i);\n        //do something hard\n    });\n    NSLog(@\"----\");\n}\n```\n\n***\n\n# Dispatch Block\n## dispatch\\_block_create\n自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch\\_block\\_create\\_with\\_qos\\_class中指定QoS类别即可。\n\n```\n//normal way\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.starming.gcddemo.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"run block\");\n});\ndispatch_async(concurrentQueue, block);\n\n//QOS way\ndispatch_block_t qosBlock = dispatch_block_create_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1, ^{\n    NSLog(@\"run qos block\");\n});\ndispatch_async(concurrentQueue, qosBlock);\n```\n\n***\n\n## dispatch\\_block_wait\n可以根据dispatch block来设置等待时间，参数DISPATCH\\_TIME_FOREVER会一直等待block结束。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t block = dispatch_block_create(0, ^{\n    NSLog(@\"star\");   \n    [NSThread sleepForTimeInterval:5.f];\n    NSLog(@\"end\");\n});\ndispatch_async(serialQueue, block);\n//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成\ndispatch_block_wait(block, DISPATCH_TIME_FOREVER);\nNSLog(@\"ok, now can go on\");//打印结果：star、end、ok, now can go on。\n```\n\n***\n\n## dispatch\\_block_notify\ndispatch\\_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\n//first block执行完才在serial queue中执行second block\ndispatch_block_notify(firstBlock, serialQueue, secondBlock);\n\n//打印结果：first block start、first block end、second block run。\n```\n\n***\n## dispatch\\_block_cancel\niOS8后GCD支持对dispatch block的取消\n\n```\ndispatch_queue_t serialQueue = dispatch_queue_create(\"com.Kevin.serialqueue\", DISPATCH_QUEUE_SERIAL);\ndispatch_block_t firstBlock = dispatch_block_create(0, ^{\n    NSLog(@\"first block start\");\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"first block end\");\n});\ndispatch_block_t secondBlock = dispatch_block_create(0, ^{\n    NSLog(@\"second block run\");\n});\ndispatch_async(serialQueue, firstBlock);\ndispatch_async(serialQueue, secondBlock);\n//取消secondBlock\ndispatch_block_cancel(secondBlock);\n//打印结果：first block start、first block end。\n```\n\n***\n\n# Dispatch_groups\n当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch\\_group 来实现了，dispatch\\_group 能很方便的解决同步的问题。dispatch\\_group_create可以创建一个group对象，然后可以添加block到该组里面。\n\n***\n## dispatch\\_group_create\n创建dispatch\\_group_t\n\n```\ndispatch_group_t group = dispatch_group_create();\n```\n***\n## dispatch\\_group_async\n自己创建队列时，当然就用dispatch\\_group_async函数，简单有效。\n\n```\ndispatch_group_async(group, queue, ^{\n    //Do you work...\n});\n```\n\n***\n\n## dispatch\\_group_wait\ndispatch\\_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n//在group中添加队列的block\ndispatch_group_async(group, concurrentQueue, ^{\n    [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_wait(group, DISPATCH_TIME_FOREVER);\nNSLog(@\"can continue\");//打印结果：2、1、can continue。\n```\n\n***\n\n## dispatch\\_group_notify\n功能与dispatch\\_group\\_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch\\_group\\_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。\n\n```\ndispatch_queue_t concurrentQueue = dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\ndispatch_group_async(group, concurrentQueue, ^{\n   [NSThread sleepForTimeInterval:2.f];\n    NSLog(@\"1\");\n});\ndispatch_group_async(group, concurrentQueue, ^{\n    NSLog(@\"2\");\n});\ndispatch_group_notify(group, dispatch_get_main_queue(), ^{\n    NSLog(@\"end\");\n});\n[NSThread sleepForTimeInterval:2.f];\nNSLog(@\"can continue\");//打印结果：2、can continue、1、end。\n```\n\n***\n## dispatch\\_group\\_enter / dispatch\\_group\\_leave\n\n```\nAFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n\n//Enter group\ndispatch_group_enter(group);\n[manager GET:@\"http://www.baidu.com\" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    //Leave group\n    dispatch_group_leave(group);\n}    failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n\n    //Leave group\n    dispatch_group_leave(group);\n}];\n```\n\n***\n\n## dispatch\\_semaphore_create\ndispatch semaphore用来做解决一些同步的问题，dispatch\\_semaphore\\_create会创建一个信号量，该函数需要传递一个信号值，dispatch\\_semaphore\\_signal会使信号值加1，如果信号值的大小等于1，dispatch\\_semaphore\\_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。\n\n```\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(0);\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    NSLog(@\"start\");\n    [NSThread sleepForTimeInterval:1.f];\n    NSLog(@\"semaphore +1\");\n    dispatch_semaphore_signal(semaphore); //+1 semaphore\n});\ndispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\nNSLog(@\"continue\");//打印结果：start、semaphore +1、continue。\n```\n\n***\n# Dispatch Source\ndispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。\n\nDispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：\n\n| Methods                              | explain     |\n| ------------------------------------ |:-----------:|\n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_ADD        | 变量增加      | \n| DISPATCH_SOURCE\\_TYPE\\_DATA\\_OR         | 变量OR       | \n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_SEND       | Mach端口发送  |\n| DISPATCH_SOURCE\\_TYPE\\_MACH\\_RECV       | MACH端口接收  |\n| DISPATCH_SOURCE\\_TYPE\\_MEMORYPRESSURE  | 内存压力  |\n| DISPATCH_SOURCE\\_TYPE\\_PROC            | 进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号  |\n| DISPATCH_SOURCE\\_TYPE\\_READ            | IO操作，如对文件的操作、socket操作的读响应  |\n| DISPATCH_SOURCE\\_TYPE\\_SIGNAL          | 接收到UNIX信号时响应 |\n| DISPATCH_SOURCE\\_TYPE\\_TIMER           | 定时器  |\n| DISPATCH_SOURCE\\_TYPE\\_VNODE           | 文件状态监听，文件被删除、移动、重命名  |\n| DISPATCH_SOURCE\\_TYPE\\_WRITE           | IO操作，如对文件的操作、socket操作的写响应  |\n\n####方法：\n*  dispatch\\_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。\n*  dispatch_source\\_set\\_event\\_handler：设置事件处理handler\n*  dispatch\\_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。\n\n```\n//监视文件夹内文件变化\nNSURL *directoryURL; //指定需要监听的文件夹路径\nint const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);\nif (fd < 0) {\n    char buffer[80];\n    strerror_r(errno, buffer, sizeof(buffer));\n    NSLog(@\"Unable to open \\\"%@\\\": %s (%d)\", [directoryURL path], buffer, errno);\n    return;\n}\n\n//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,\n                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置响应dispatch源事件的block，在dispatch源指定的队列上运行\ndispatch_source_set_event_handler(source, ^(){\n    \n    //可以通过dispatch_source_get_data(source)来得到dispatch源数据\n    unsigned long const data = dispatch_source_get_data(source);\n    if (data & DISPATCH_VNODE_WRITE) {\n        NSLog(@\"The directory changed.\");\n    }\n    if (data & DISPATCH_VNODE_DELETE) {\n        NSLog(@\"The directory has been deleted.\");\n    }\n});\ndispatch_source_set_cancel_handler(source, ^(){\n    close(fd);\n});\n//dispatch源创建后处于suspend状态，所以需要启动dispatch源\ndispatch_resume(source);\n//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听\n```\n\n***\n\n## dispatch\\_time_t\n\n```\ndispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0/*延迟执行时间*/ * NSEC_PER_SEC));\n\ndispatch_after(delayTime, dispatch_get_main_queue(), ^{\n    [weakSelf delayMethod];\n});\n```\n\n***\n\n## dispatch_source\\_set\\_timer\n\n```\ndispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway);\n```\n\n第一个参数:定时器对象；第二个参数:DISPATCH\\_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  \n\nNSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。\n\n   \nNSEC\\_PER_SEC 1000000000ull  \nUSEC\\_PER_SEC 1000000ull  \nNSEC\\_PER_USEC 1000ull  \n\nNSEC：纳秒；USEC：微妙；SEC：秒；PER：每。\n\n```\n//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。\ndispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);\n\n//设置事件的处理handler\ndispatch_source_set_event_handler(source, ^(){\n    NSLog(@\"Time flies.\");\n});\n\n//5秒触发一次，误差100毫秒\ndispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC,100ull * NSEC_PER_MSEC);\n\n//开始处理定时器事件，dispatch_suspend暂停处理事件\ndispatch_resume(source);\n\n```\n\n***\n\n## dispatch_suspend和dispatch\\_resume\n*  dispatch_suspend 挂起队列\n*  dispatch_resume  恢复队列\n\ndispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。\n\n```\ndispatch_queue_t queue = dispatch_queue_create(\"me.kevin.gcd\", DISPATCH_QUEUE_SERIAL);\n\n//提交第一个block，延时5秒打印。\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds...\");\n});\n\n//提交第二个block，也是延时5秒打印\ndispatch_async(queue, ^{\n    [NSThread sleepForTimeInterval:5];\n    NSLog(@\"After 5 seconds again...\");\n});\n\n//延时一秒\nNSLog(@\"sleep 1 second...\");\n[NSThread sleepForTimeInterval:1];\n\n//挂起队列\nNSLog(@\"suspend...\");\ndispatch_suspend(queue);\n\n//延时10秒\nNSLog(@\"sleep 10 second...\");\n[NSThread sleepForTimeInterval:10];\n\n//恢复队列\nNSLog(@\"resume...\");\ndispatch_resume(queue);\n```\n\n可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。\n结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。\n\n***\n\n# 死锁！\n## dispatch_sync导致的死锁\n在main线程使用“同步”方法提交Block，必定会死锁：\n\n```\ndispatch_sync(dispatch_get_main_queue(), ^{\n    NSLog(@\"I am block...\");\n});\n```\n\n嵌套调用可能就会造成死锁：\n\n```\n- (void)updateUI1 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 1\");\n\n        //死锁！\n        [self updateUI2];\n    });\n}\n- (void)updateUI2 {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"Update ui 2\");\n    });\n}\n```\n\n其它情况：\n\n```\n- (void)deadLockCase1 {\n    NSLog(@\"1\");\n    //主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase2 {\n    NSLog(@\"1\");\n    //3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行\n    dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n- (void)deadLockCase3 {\n    dispatch_queue_t serialQueue = dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", DISPATCH_QUEUE_SERIAL);\n    NSLog(@\"1\");\n    dispatch_async(serialQueue, ^{\n        NSLog(@\"2\");\n        //串行队列里面同步一个串行队列就会死锁\n        dispatch_sync(serialQueue, ^{\n            NSLog(@\"3\");\n        });\n        NSLog(@\"4\");\n    });\n    NSLog(@\"5\");\n}\n```\n\n***\n\n## dispatch_apply导致的死锁:\n\n```\n//在串行队列里嵌套使用dispatch_apply\ndispatch_queue_t queue = dispatch_queue_create(\"me.tutuge.test.gcd\", DISPATCH_QUEUE_SERIAL);\n\ndispatch_apply(3, queue, ^(size_t i) {\n\tNSLog(@\"apply loop: %zu\", i);\n\n    //再来一个dispatch_apply！死锁！\n\tdispatch_apply(3, queue, ^(size_t j) {\n\t\tNSLog(@\"apply loop inside %zu\", j);\n\t});\n});\n```\n","slug":"OC/GCD","published":1,"updated":"2020-05-06T05:56:21.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aoi0003te038uj5btv4","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>GCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg\" alt=\"gcd_oc\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2015/718/\" target=\"_blank\" rel=\"external\">WWDC</a></li>\n</ul>\n<hr>\n<h1 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h1><h2 id=\"dispatch-queue-create\"><a href=\"#dispatch-queue-create\" class=\"headerlink\" title=\"dispatch_queue_create\"></a>dispatch_queue_create</h2><p>主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_main_queue(); <span class=\"comment\">//OC</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_get_main_queue()               <span class=\"comment\">//Swift</span></div></pre></td></tr></table></figure>\n<p>手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//OC</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Swift</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, nil);</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL)</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建任务\"><a href=\"#创建任务\" class=\"headerlink\" title=\"创建任务\"></a>创建任务</h1><h2 id=\"dispatch-async-dispatch-sync\"><a href=\"#dispatch-async-dispatch-sync\" class=\"headerlink\" title=\"dispatch_async / dispatch_sync\"></a>dispatch_async / dispatch_sync</h2><p>同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；<br>异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。</p>\n<ul>\n<li>dispatch_sync 同步任务：会阻塞当前线程；</li>\n<li>dispatch_async 异步任务：不会阻塞当前线程</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//OC</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//Swift</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h2><p>dispatch_after只是延时提交block，不是延时立刻执行。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">double delayInSeconds = <span class=\"number\">2</span>.<span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t) (delayInSeconds * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^(void)&#123;</div><div class=\"line\">    [self <span class=\"keyword\">bar];</span></div><div class=\"line\"><span class=\"keyword\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"dispatch-set-target-queue\"><a href=\"#dispatch-set-target-queue\" class=\"headerlink\" title=\"dispatch_set_target_queue\"></a>dispatch_set_target_queue</h2><p>dispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。</p>\n<p>（如果将多个串行的queue使用dispatch_set_target_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。<br>例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch_set_target_queue了。）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>serialQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>firstQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>secondQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\"></span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(firstQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(secondQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dispatch_async(firstQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">3</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"3\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>打印结果1、2、3。</p>\n<hr>\n<h2 id=\"dispatch-barrier-async-dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async / dispatch_barrier_sync\"></a>dispatch_barrier_async / dispatch_barrier_sync</h2><p>dispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。</p>\n<p>dispatch_barrier_sync 同上，除了它是同步返回函数。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.dataqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//等待前面的都完成，在执行barrier后面的</span></div><div class=\"line\">dispatch_barrier_async(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"write 1\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 3\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 4\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>打印结果：read 1、read 2、write 1、read 3、read 4。</p>\n<hr>\n<h2 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h2><p>dispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。</p>\n<p>需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The end\"</span>);</div><div class=\"line\"><span class=\"comment\">//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。</span></div></pre></td></tr></table></figure>\n<p>对比：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"><span class=\"keyword\">if</span> (explode) &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的情况，可能会死锁</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">999</span> ; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"wrong %d\"</span>,i);</div><div class=\"line\">            <span class=\"comment\">//do something hard</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//会优化很多，能够利用GCD管理</span></div><div class=\"line\">    dispatch_apply(<span class=\"number\">999</span>, concurrentQueue, ^(size_t i)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"correct %zu\"</span>,i);</div><div class=\"line\">        <span class=\"comment\">//do something hard</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"----\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Block\"><a href=\"#Dispatch-Block\" class=\"headerlink\" title=\"Dispatch Block\"></a>Dispatch Block</h1><h2 id=\"dispatch-block-create\"><a href=\"#dispatch-block-create\" class=\"headerlink\" title=\"dispatch_block_create\"></a>dispatch_block_create</h2><p>自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch_block_create_with_qos_class中指定QoS类别即可。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//normal way</div><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, block)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//QOS way</div><div class=\"line\">dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class=\"number\">0</span>, QOS_CLASS_USER_INITIATED, <span class=\"number\">-1</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run qos block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, qosBlock)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-wait\"><a href=\"#dispatch-block-wait\" class=\"headerlink\" title=\"dispatch_block_wait\"></a>dispatch_block_wait</h2><p>可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"star\"</span>);   </div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, block);</div><div class=\"line\"><span class=\"comment\">//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成</span></div><div class=\"line\">dispatch_block_wait(block, DISPATCH_TIME_FOREVER);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"ok, now can go on\"</span>);<span class=\"comment\">//打印结果：star、end、ok, now can go on。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-notify\"><a href=\"#dispatch-block-notify\" class=\"headerlink\" title=\"dispatch_block_notify\"></a>dispatch_block_notify</h2><p>dispatch_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//first block执行完才在serial queue中执行second block</span></div><div class=\"line\">dispatch_block_notify(firstBlock, serialQueue, secondBlock);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end、second block run。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-cancel\"><a href=\"#dispatch-block-cancel\" class=\"headerlink\" title=\"dispatch_block_cancel\"></a>dispatch_block_cancel</h2><p>iOS8后GCD支持对dispatch block的取消</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, secondBlock);</div><div class=\"line\"><span class=\"comment\">//取消secondBlock</span></div><div class=\"line\">dispatch_block_cancel(secondBlock);</div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-groups\"><a href=\"#Dispatch-groups\" class=\"headerlink\" title=\"Dispatch_groups\"></a>Dispatch_groups</h1><p>当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch_group 来实现了，dispatch_group 能很方便的解决同步的问题。dispatch_group_create可以创建一个group对象，然后可以添加block到该组里面。</p>\n<hr>\n<h2 id=\"dispatch-group-create\"><a href=\"#dispatch-group-create\" class=\"headerlink\" title=\"dispatch_group_create\"></a>dispatch_group_create</h2><p>创建dispatch_group_t</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_t<span class=\"built_in\"> group </span>= dispatch_group_create();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-async\"><a href=\"#dispatch-group-async\" class=\"headerlink\" title=\"dispatch_group_async\"></a>dispatch_group_async</h2><p>自己创建队列时，当然就用dispatch_group_async函数，简单有效。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, <span class=\"built_in\">queue</span>, ^&#123;</div><div class=\"line\">    <span class=\"comment\">//Do you work...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-wait\"><a href=\"#dispatch-group-wait\" class=\"headerlink\" title=\"dispatch_group_wait\"></a>dispatch_group_wait</h2><p>dispatch_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_group_t <span class=\"keyword\">group</span> = dispatch_group_create();</div><div class=\"line\"><span class=\"comment\">//在group中添加队列的block</span></div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    [<span class=\"meta\">NSThread sleepForTimeInterval:2.f</span>];</div><div class=\"line\">    NSLog(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_wait(<span class=\"keyword\">group</span>, DISPATCH_TIME_FOREVER);</div><div class=\"line\">NSLog(<span class=\"string\">@\"can continue\"</span>);<span class=\"comment\">//打印结果：2、1、can continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-notify\"><a href=\"#dispatch-group-notify\" class=\"headerlink\" title=\"dispatch_group_notify\"></a>dispatch_group_notify</h2><p>功能与dispatch_group_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch_group_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>concurrentQueue = <span class=\"keyword\">dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">   [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_notify(group, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">[NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"can continue\"</span>)<span class=\"comment\">;//打印结果：2、can continue、1、end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-enter-dispatch-group-leave\"><a href=\"#dispatch-group-enter-dispatch-group-leave\" class=\"headerlink\" title=\"dispatch_group_enter / dispatch_group_leave\"></a>dispatch_group_enter / dispatch_group_leave</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class=\"line\"></div><div class=\"line\">//Enter group</div><div class=\"line\">dispatch_group_enter(group);</div><div class=\"line\">[manager GET:@<span class=\"string\">\"http://www.baidu.com\"</span> parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class=\"line\"></div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-semaphore-create\"><a href=\"#dispatch-semaphore-create\" class=\"headerlink\" title=\"dispatch_semaphore_create\"></a>dispatch_semaphore_create</h2><p>dispatch semaphore用来做解决一些同步的问题，dispatch_semaphore_create会创建一个信号量，该函数需要传递一个信号值，dispatch_semaphore_signal会使信号值加1，如果信号值的大小等于1，dispatch_semaphore_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">dispatch_get_global_queue</span>(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"start\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"semaphore +1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_semaphore_signal(<span class=\"name\">semaphore</span>)<span class=\"comment\">; //+1 semaphore</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_semaphore_wait(<span class=\"name\">semaphore</span>, DISPATCH_TIME_FOREVER)<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"continue\"</span>)<span class=\"comment\">;//打印结果：start、semaphore +1、continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Source\"><a href=\"#Dispatch-Source\" class=\"headerlink\" title=\"Dispatch Source\"></a>Dispatch Source</h1><p>dispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。</p>\n<p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th style=\"text-align:center\">explain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>\n<td style=\"text-align:center\">变量增加</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_OR</td>\n<td style=\"text-align:center\">变量OR</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_SEND</td>\n<td style=\"text-align:center\">Mach端口发送</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_RECV</td>\n<td style=\"text-align:center\">MACH端口接收</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>\n<td style=\"text-align:center\">内存压力</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_PROC</td>\n<td style=\"text-align:center\">进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_READ</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的读响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_SIGNAL</td>\n<td style=\"text-align:center\">接收到UNIX信号时响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_TIMER</td>\n<td style=\"text-align:center\">定时器</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_VNODE</td>\n<td style=\"text-align:center\">文件状态监听，文件被删除、移动、重命名</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_WRITE</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的写响应</td>\n</tr>\n</tbody>\n</table>\n<p>####方法：</p>\n<ul>\n<li>dispatch_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。</li>\n<li>dispatch_source_set_event_handler：设置事件处理handler</li>\n<li>dispatch_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//监视文件夹内文件变化</span></div><div class=\"line\">NSURL *directoryURL; <span class=\"comment\">//指定需要监听的文件夹路径</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> fd = <span class=\"built_in\">open</span>([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class=\"line\"><span class=\"built_in\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">80</span>];</div><div class=\"line\">    strerror_r(errno, <span class=\"built_in\">buffer</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Unable to open \\\"%@\\\": %s (%d)\"</span>, [directoryURL path], <span class=\"built_in\">buffer</span>, errno);</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列</span></div><div class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class=\"line\">                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置响应dispatch源事件的block，在dispatch源指定的队列上运行</span></div><div class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以通过dispatch_source_get_data(source)来得到dispatch源数据</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">const</span> data = dispatch_source_get_data(source);</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory changed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory has been deleted.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class=\"line\">    <span class=\"built_in\">close</span>(fd);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//dispatch源创建后处于suspend状态，所以需要启动dispatch源</span></div><div class=\"line\">dispatch_resume(source);</div><div class=\"line\"><span class=\"comment\">//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-time-t\"><a href=\"#dispatch-time-t\" class=\"headerlink\" title=\"dispatch_time_t\"></a>dispatch_time_t</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_time_t delayTime = dispatch_time(<span class=\"name\">DISPATCH_TIME_NOW</span>, (<span class=\"name\">int64_t</span>)(<span class=\"number\">2.0</span>/*延迟执行时间*/ * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_after(<span class=\"name\">delayTime</span>, dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    [weakSelf delayMethod]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-source-set-timer\"><a href=\"#dispatch-source-set-timer\" class=\"headerlink\" title=\"dispatch_source_set_timer\"></a>dispatch_source_set_timer</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">dispatch_source_t</span> source, <span class=\"keyword\">dispatch_time_t</span> start, <span class=\"keyword\">uint64_t</span> interval, <span class=\"keyword\">uint64_t</span> leeway);</div></pre></td></tr></table></figure>\n<p>第一个参数:定时器对象；第二个参数:DISPATCH_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  </p>\n<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。</p>\n<p>NSEC_PER_SEC 1000000000ull<br>USEC_PER_SEC 1000000ull<br>NSEC_PER_USEC 1000ull  </p>\n<p>NSEC：纳秒；USEC：微妙；SEC：秒；PER：每。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。</span></div><div class=\"line\">dispatch_source_t <span class=\"keyword\">source</span> = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,<span class=\"number\">0</span>, <span class=\"number\">0</span>, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置事件的处理handler</span></div><div class=\"line\">dispatch_source_set_event_handler(<span class=\"keyword\">source</span>, ^()&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Time flies.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//5秒触发一次，误差100毫秒</span></div><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">source</span>, DISPATCH_TIME_NOW, <span class=\"number\">5</span>ull * NSEC_PER_SEC,<span class=\"number\">100</span>ull * NSEC_PER_MSEC);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始处理定时器事件，dispatch_suspend暂停处理事件</span></div><div class=\"line\">dispatch_resume(<span class=\"keyword\">source</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-suspend和dispatch-resume\"><a href=\"#dispatch-suspend和dispatch-resume\" class=\"headerlink\" title=\"dispatch_suspend和dispatch_resume\"></a>dispatch_suspend和dispatch_resume</h2><ul>\n<li>dispatch_suspend 挂起队列</li>\n<li>dispatch_resume  恢复队列</li>\n</ul>\n<p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"string\">\"me.kevin.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第一个block，延时5秒打印。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第二个block，也是延时5秒打印</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds again...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时一秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 1 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//挂起队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"suspend...\"</span>);</div><div class=\"line\">dispatch_suspend(queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时10秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 10 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//恢复队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"resume...\"</span>);</div><div class=\"line\">dispatch_resume(queue);</div></pre></td></tr></table></figure>\n<p>可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。<br>结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。</p>\n<hr>\n<h1 id=\"死锁！\"><a href=\"#死锁！\" class=\"headerlink\" title=\"死锁！\"></a>死锁！</h1><h2 id=\"dispatch-sync导致的死锁\"><a href=\"#dispatch-sync导致的死锁\" class=\"headerlink\" title=\"dispatch_sync导致的死锁\"></a>dispatch_sync导致的死锁</h2><p>在main线程使用“同步”方法提交Block，必定会死锁：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"I am block...\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>嵌套调用可能就会造成死锁：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI1 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 1\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//死锁！</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> updateUI2];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI2 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其它情况：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase1 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase2 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase3 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(serialQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">        <span class=\"comment\">//串行队列里面同步一个串行队列就会死锁</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(serialQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"5\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-apply导致的死锁\"><a href=\"#dispatch-apply导致的死锁\" class=\"headerlink\" title=\"dispatch_apply导致的死锁:\"></a>dispatch_apply导致的死锁:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在串行队列里嵌套使用dispatch_apply</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"me.tutuge.test.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">dispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> i) &#123;</div><div class=\"line\">\tNSLog(@<span class=\"string\">\"apply loop: %zu\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再来一个dispatch_apply！死锁！</span></div><div class=\"line\">\tdispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> j) &#123;</div><div class=\"line\">\t\tNSLog(@<span class=\"string\">\"apply loop inside %zu\"</span>, j);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>GCD 全称为 Grand Central Dispatch，是 libdispatch 的市场名称，而 libdispatch 是 Apple 的一个库，其为并发代码在 iOS 和 macOS 的多核硬件上执行提供支持。确切地说 GCD 是一套低层级的C API，通过 GCD，开发者只需要向队列中添加一段代码块(block或C函数指针)，而不需要直接和线程打交道。GCD在后端管理着一个线程池，它不仅决定着你的代码块将在哪个线程被执行，还根据可用的系统资源对这些线程进行管理。这样通过 GCD 来管理线程，从而解决线程被创建的问题。</p>","more":"<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/jiaotong.jpg\" alt=\"gcd_oc\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2015/718/\" target=\"_blank\" rel=\"external\">WWDC</a></li>\n</ul>\n<hr>\n<h1 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h1><h2 id=\"dispatch-queue-create\"><a href=\"#dispatch-queue-create\" class=\"headerlink\" title=\"dispatch_queue_create\"></a>dispatch_queue_create</h2><p>主队列：一个特殊的串行队列，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_main_queue(); <span class=\"comment\">//OC</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_get_main_queue()               <span class=\"comment\">//Swift</span></div></pre></td></tr></table></figure>\n<p>手动创建队列：可以创建 串行队列, 也可以创建 并行队列。第一个参数是标识符，第二个参数用来表示创建的队列是串行的还是并行的。DISPATCH_QUEUE_SERIAL / NULL 串行队列；DISPATCH_QUEUE_CONCURRENT 并行队列。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//OC</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Swift</span></div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, nil);</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_SERIAL)</div><div class=\"line\">let <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"tk.bourne.testQueue\"</span>, DISPATCH_QUEUE_CONCURRENT)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建任务\"><a href=\"#创建任务\" class=\"headerlink\" title=\"创建任务\"></a>创建任务</h1><h2 id=\"dispatch-async-dispatch-sync\"><a href=\"#dispatch-async-dispatch-sync\" class=\"headerlink\" title=\"dispatch_async / dispatch_sync\"></a>dispatch_async / dispatch_sync</h2><p>同步派发(sync)会尽可能地在当前线程派发任务。但如果在其他队列往主队列同步派发，任务会在主线程执行；<br>异步派发(async)也不绝对会另开线程，例如在主线程异步派发到主线程，派发依旧是异步的，任务也会在主线程执行。</p>\n<ul>\n<li>dispatch_sync 同步任务：会阻塞当前线程；</li>\n<li>dispatch_async 异步任务：不会阻塞当前线程</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//OC</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"%@\"</span>, [NSThread currentThread])<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//Swift</div><div class=\"line\">dispatch_sync(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div><div class=\"line\">dispatch_async(<span class=\"name\">&lt;#queue#&gt;</span>, &#123; () -&gt; Void in</div><div class=\"line\">    println(<span class=\"name\">NSThread</span>.currentThread())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h2><p>dispatch_after只是延时提交block，不是延时立刻执行。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">double delayInSeconds = <span class=\"number\">2</span>.<span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t) (delayInSeconds * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^(void)&#123;</div><div class=\"line\">    [self <span class=\"keyword\">bar];</span></div><div class=\"line\"><span class=\"keyword\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"dispatch-set-target-queue\"><a href=\"#dispatch-set-target-queue\" class=\"headerlink\" title=\"dispatch_set_target_queue\"></a>dispatch_set_target_queue</h2><p>dispatch_set_target_queue可以设置queue的优先级，也可以使多个serial queue在目标queue上一次只有一个执行。</p>\n<p>（如果将多个串行的queue使用dispatch_set_target_queue指定到了同一目标，那么多个串行queue在目标queue上就是同步执行的，不再是并行执行。<br>例如，把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，那么就会有问题，因为多个串行queue之间是并行的。这就可以使用dispatch_set_target_queue了。）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>serialQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.serialqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>firstQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.firstqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_SERIAL);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>secondQueue = <span class=\"keyword\">dispatch_queue_create(\"com.starming.gcddemo.secondqueue\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\"></span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(firstQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_set_target_queue(secondQueue, </span>serialQueue)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dispatch_async(firstQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">3</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_async(secondQueue, </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"3\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>打印结果1、2、3。</p>\n<hr>\n<h2 id=\"dispatch-barrier-async-dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async / dispatch_barrier_sync\"></a>dispatch_barrier_async / dispatch_barrier_sync</h2><p>dispatch_barrier_async 这个函数可以设置同步执行的block，它会等到在它加入队列之前的block执行完毕后，才开始执行。在它之后加入队列的block，则等到这个block执行完毕后才开始执行。</p>\n<p>dispatch_barrier_sync 同上，除了它是同步返回函数。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.dataqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//等待前面的都完成，在执行barrier后面的</span></div><div class=\"line\">dispatch_barrier_async(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"write 1\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 3\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dataQueue, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"read 4\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>打印结果：read 1、read 2、write 1、read 3、read 4。</p>\n<hr>\n<h2 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h2><p>dispatch_apply类似一个for循环，会在指定的dispatch queue中运行block任务n次，如果队列是并发队列，则会并发执行block任务，dispatch_apply是一个同步调用，block任务执行n次后才返回。</p>\n<p>需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回，所以这里会阻塞主线程，如需异步返回，使用dispatch_async包一下就不会阻塞了。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    dispatch_apply(<span class=\"number\">10</span>, concurrentQueue, ^(size_t i) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zu\"</span>,i);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The end\"</span>);</div><div class=\"line\"><span class=\"comment\">//打印结果：0、2、4、1、3、6、5、7、9、8、The end、0、4、1、3、5、2、8、6、7、9。</span></div></pre></td></tr></table></figure>\n<p>对比：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"><span class=\"keyword\">if</span> (explode) &#123;</div><div class=\"line\">    <span class=\"comment\">//有问题的情况，可能会死锁</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">999</span> ; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"wrong %d\"</span>,i);</div><div class=\"line\">            <span class=\"comment\">//do something hard</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//会优化很多，能够利用GCD管理</span></div><div class=\"line\">    dispatch_apply(<span class=\"number\">999</span>, concurrentQueue, ^(size_t i)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"correct %zu\"</span>,i);</div><div class=\"line\">        <span class=\"comment\">//do something hard</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"----\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Block\"><a href=\"#Dispatch-Block\" class=\"headerlink\" title=\"Dispatch Block\"></a>Dispatch Block</h1><h2 id=\"dispatch-block-create\"><a href=\"#dispatch-block-create\" class=\"headerlink\" title=\"dispatch_block_create\"></a>dispatch_block_create</h2><p>自己创建block并添加到queue中去执行。并且，在创建block时可以通过设置QoS，指定block对应的优先级，在dispatch_block_create_with_qos_class中指定QoS类别即可。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//normal way</div><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, block)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">//QOS way</div><div class=\"line\">dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class=\"number\">0</span>, QOS_CLASS_USER_INITIATED, <span class=\"number\">-1</span>, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"run qos block\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">concurrentQueue</span>, qosBlock)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-wait\"><a href=\"#dispatch-block-wait\" class=\"headerlink\" title=\"dispatch_block_wait\"></a>dispatch_block_wait</h2><p>可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t block = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"star\"</span>);   </div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, block);</div><div class=\"line\"><span class=\"comment\">//设置DISPATCH_TIME_FOREVER后，会一直等到前面任务都完成</span></div><div class=\"line\">dispatch_block_wait(block, DISPATCH_TIME_FOREVER);</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"ok, now can go on\"</span>);<span class=\"comment\">//打印结果：star、end、ok, now can go on。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-notify\"><a href=\"#dispatch-block-notify\" class=\"headerlink\" title=\"dispatch_block_notify\"></a>dispatch_block_notify</h2><p>dispatch_block_notify当观察的某个block执行结束之后立刻通知提交另一特定的block到指定的queue中执行，该函数有三个参数，第一参数是需要观察的block，第二个参数是被通知block提交执行的queue，第三参数是当需要被通知执行的block，函数的原型。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//first block执行完才在serial queue中执行second block</span></div><div class=\"line\">dispatch_block_notify(firstBlock, serialQueue, secondBlock);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end、second block run。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-block-cancel\"><a href=\"#dispatch-block-cancel\" class=\"headerlink\" title=\"dispatch_block_cancel\"></a>dispatch_block_cancel</h2><p>iOS8后GCD支持对dispatch block的取消</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">dispatch_block_t firstBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block start\"</span>);</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.</span>f];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"first block end\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_block_t secondBlock = dispatch_block_create(<span class=\"number\">0</span>, ^&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"second block run\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, firstBlock);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(serialQueue, secondBlock);</div><div class=\"line\"><span class=\"comment\">//取消secondBlock</span></div><div class=\"line\">dispatch_block_cancel(secondBlock);</div><div class=\"line\"><span class=\"comment\">//打印结果：first block start、first block end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-groups\"><a href=\"#Dispatch-groups\" class=\"headerlink\" title=\"Dispatch_groups\"></a>Dispatch_groups</h1><p>当我们想在gcd queue中所有的任务执行完毕之后做些特定事情的时候，也就是队列的同步问题，如果队列是串行的话，那将该操作最后添加到队列中即可，但如果队列是并行队列的话，这时候就可以利用 dispatch_group 来实现了，dispatch_group 能很方便的解决同步的问题。dispatch_group_create可以创建一个group对象，然后可以添加block到该组里面。</p>\n<hr>\n<h2 id=\"dispatch-group-create\"><a href=\"#dispatch-group-create\" class=\"headerlink\" title=\"dispatch_group_create\"></a>dispatch_group_create</h2><p>创建dispatch_group_t</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_t<span class=\"built_in\"> group </span>= dispatch_group_create();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-async\"><a href=\"#dispatch-group-async\" class=\"headerlink\" title=\"dispatch_group_async\"></a>dispatch_group_async</h2><p>自己创建队列时，当然就用dispatch_group_async函数，简单有效。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, <span class=\"built_in\">queue</span>, ^&#123;</div><div class=\"line\">    <span class=\"comment\">//Do you work...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-wait\"><a href=\"#dispatch-group-wait\" class=\"headerlink\" title=\"dispatch_group_wait\"></a>dispatch_group_wait</h2><p>dispatch_group_wait会同步地等待group中所有的block执行完毕后才继续执行,类似于dispatch barrier</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class=\"string\">\"com.Kevin.concurrentqueue\"</span>,DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">dispatch_group_t <span class=\"keyword\">group</span> = dispatch_group_create();</div><div class=\"line\"><span class=\"comment\">//在group中添加队列的block</span></div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    [<span class=\"meta\">NSThread sleepForTimeInterval:2.f</span>];</div><div class=\"line\">    NSLog(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_async(<span class=\"keyword\">group</span>, concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_group_wait(<span class=\"keyword\">group</span>, DISPATCH_TIME_FOREVER);</div><div class=\"line\">NSLog(<span class=\"string\">@\"can continue\"</span>);<span class=\"comment\">//打印结果：2、1、can continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-notify\"><a href=\"#dispatch-group-notify\" class=\"headerlink\" title=\"dispatch_group_notify\"></a>dispatch_group_notify</h2><p>功能与dispatch_group_wait类似，不过该过程是异步的，不会阻塞该线程，dispatch_group_notify有三个参数,第一个参数指定要观察的group，第二个参数指定block待执行的队列，第三个参数指定group中所有任务执行完毕之后要执行的block。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dispatch_queue_t </span>concurrentQueue = <span class=\"keyword\">dispatch_queue_create(\"com.Kevin.concurrentqueue\",DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">   [NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_async(group, </span>concurrentQueue, ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"2\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\"><span class=\"keyword\">dispatch_group_notify(group, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">[NSThread sleepForTimeInterval:<span class=\"number\">2</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"can continue\"</span>)<span class=\"comment\">;//打印结果：2、can continue、1、end。</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-group-enter-dispatch-group-leave\"><a href=\"#dispatch-group-enter-dispatch-group-leave\" class=\"headerlink\" title=\"dispatch_group_enter / dispatch_group_leave\"></a>dispatch_group_enter / dispatch_group_leave</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class=\"line\"></div><div class=\"line\">//Enter group</div><div class=\"line\">dispatch_group_enter(group);</div><div class=\"line\">[manager GET:@<span class=\"string\">\"http://www.baidu.com\"</span> parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;    failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class=\"line\"></div><div class=\"line\">    //Leave group</div><div class=\"line\">    dispatch_group_leave(group);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-semaphore-create\"><a href=\"#dispatch-semaphore-create\" class=\"headerlink\" title=\"dispatch_semaphore_create\"></a>dispatch_semaphore_create</h2><p>dispatch semaphore用来做解决一些同步的问题，dispatch_semaphore_create会创建一个信号量，该函数需要传递一个信号值，dispatch_semaphore_signal会使信号值加1，如果信号值的大小等于1，dispatch_semaphore_wait会使信号值减1，并继续往下走，如果信号值为0，则等待。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_async(<span class=\"name\">dispatch_get_global_queue</span>(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"start\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    [NSThread sleepForTimeInterval:<span class=\"number\">1</span>.f]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"semaphore +1\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_semaphore_signal(<span class=\"name\">semaphore</span>)<span class=\"comment\">; //+1 semaphore</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div><div class=\"line\">dispatch_semaphore_wait(<span class=\"name\">semaphore</span>, DISPATCH_TIME_FOREVER)<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"continue\"</span>)<span class=\"comment\">;//打印结果：start、semaphore +1、continue。</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dispatch-Source\"><a href=\"#Dispatch-Source\" class=\"headerlink\" title=\"Dispatch Source\"></a>Dispatch Source</h1><p>dispatch源（dispatch source）和RunLoop源概念上有些类似的地方，而且使用起来更简单。要很好地理解dispatch源，其实把它看成一种特别的生产消费模式。dispatch源好比生产的数据，当有新数据时，会自动在dispatch指定的队列（即消费队列）上运行相应地block，生产和消费同步是dispatch源会自动管理的。</p>\n<p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th style=\"text-align:center\">explain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>\n<td style=\"text-align:center\">变量增加</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_DATA_OR</td>\n<td style=\"text-align:center\">变量OR</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_SEND</td>\n<td style=\"text-align:center\">Mach端口发送</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MACH_RECV</td>\n<td style=\"text-align:center\">MACH端口接收</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>\n<td style=\"text-align:center\">内存压力</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_PROC</td>\n<td style=\"text-align:center\">进程监听,如进程的退出、创建一个或更多的子线程、进程收到UNIX信号</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_READ</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的读响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_SIGNAL</td>\n<td style=\"text-align:center\">接收到UNIX信号时响应</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_TIMER</td>\n<td style=\"text-align:center\">定时器</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_VNODE</td>\n<td style=\"text-align:center\">文件状态监听，文件被删除、移动、重命名</td>\n</tr>\n<tr>\n<td>DISPATCH_SOURCE_TYPE_WRITE</td>\n<td style=\"text-align:center\">IO操作，如对文件的操作、socket操作的写响应</td>\n</tr>\n</tbody>\n</table>\n<p>####方法：</p>\n<ul>\n<li>dispatch_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。</li>\n<li>dispatch_source_set_event_handler：设置事件处理handler</li>\n<li>dispatch_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//监视文件夹内文件变化</span></div><div class=\"line\">NSURL *directoryURL; <span class=\"comment\">//指定需要监听的文件夹路径</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> fd = <span class=\"built_in\">open</span>([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class=\"line\"><span class=\"built_in\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">80</span>];</div><div class=\"line\">    strerror_r(errno, <span class=\"built_in\">buffer</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Unable to open \\\"%@\\\": %s (%d)\"</span>, [directoryURL path], <span class=\"built_in\">buffer</span>, errno);</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建dispatch源，这里使用加法来合并dispatch源数据，最后一个参数是指定dispatch队列</span></div><div class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class=\"line\">                                                  DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置响应dispatch源事件的block，在dispatch源指定的队列上运行</span></div><div class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以通过dispatch_source_get_data(source)来得到dispatch源数据</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">const</span> data = dispatch_source_get_data(source);</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory changed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"The directory has been deleted.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class=\"line\">    <span class=\"built_in\">close</span>(fd);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//dispatch源创建后处于suspend状态，所以需要启动dispatch源</span></div><div class=\"line\">dispatch_resume(source);</div><div class=\"line\"><span class=\"comment\">//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-time-t\"><a href=\"#dispatch-time-t\" class=\"headerlink\" title=\"dispatch_time_t\"></a>dispatch_time_t</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_time_t delayTime = dispatch_time(<span class=\"name\">DISPATCH_TIME_NOW</span>, (<span class=\"name\">int64_t</span>)(<span class=\"number\">2.0</span>/*延迟执行时间*/ * NSEC_PER_SEC))<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_after(<span class=\"name\">delayTime</span>, dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">    [weakSelf delayMethod]<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-source-set-timer\"><a href=\"#dispatch-source-set-timer\" class=\"headerlink\" title=\"dispatch_source_set_timer\"></a>dispatch_source_set_timer</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">dispatch_source_t</span> source, <span class=\"keyword\">dispatch_time_t</span> start, <span class=\"keyword\">uint64_t</span> interval, <span class=\"keyword\">uint64_t</span> leeway);</div></pre></td></tr></table></figure>\n<p>第一个参数:定时器对象；第二个参数:DISPATCH_TIME_NOW 表示从现在开始计时；第三个参数:间隔时间 GCD里面的时间最小单位为 纳秒；第四个参数:精准度(表示允许的误差,0表示绝对精准)。  </p>\n<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer。</p>\n<p>NSEC_PER_SEC 1000000000ull<br>USEC_PER_SEC 1000000ull<br>NSEC_PER_USEC 1000ull  </p>\n<p>NSEC：纳秒；USEC：微妙；SEC：秒；PER：每。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个参数代表：dispatch source类型，最后一个是block会进入的queue，用来执行事件处理器和取消处理器，第二三个参数在会根据source类型设置。</span></div><div class=\"line\">dispatch_source_t <span class=\"keyword\">source</span> = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,<span class=\"number\">0</span>, <span class=\"number\">0</span>, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置事件的处理handler</span></div><div class=\"line\">dispatch_source_set_event_handler(<span class=\"keyword\">source</span>, ^()&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"Time flies.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//5秒触发一次，误差100毫秒</span></div><div class=\"line\">dispatch_source_set_timer(<span class=\"keyword\">source</span>, DISPATCH_TIME_NOW, <span class=\"number\">5</span>ull * NSEC_PER_SEC,<span class=\"number\">100</span>ull * NSEC_PER_MSEC);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始处理定时器事件，dispatch_suspend暂停处理事件</span></div><div class=\"line\">dispatch_resume(<span class=\"keyword\">source</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-suspend和dispatch-resume\"><a href=\"#dispatch-suspend和dispatch-resume\" class=\"headerlink\" title=\"dispatch_suspend和dispatch_resume\"></a>dispatch_suspend和dispatch_resume</h2><ul>\n<li>dispatch_suspend 挂起队列</li>\n<li>dispatch_resume  恢复队列</li>\n</ul>\n<p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"string\">\"me.kevin.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第一个block，延时5秒打印。</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//提交第二个block，也是延时5秒打印</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"After 5 seconds again...\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时一秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 1 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//挂起队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"suspend...\"</span>);</div><div class=\"line\">dispatch_suspend(queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//延时10秒</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sleep 10 second...\"</span>);</div><div class=\"line\">[<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//恢复队列</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"resume...\"</span>);</div><div class=\"line\">dispatch_resume(queue);</div></pre></td></tr></table></figure>\n<p>可知，在dispatch_suspend挂起队列后，第一个block还是在运行，并且正常输出。<br>结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。</p>\n<hr>\n<h1 id=\"死锁！\"><a href=\"#死锁！\" class=\"headerlink\" title=\"死锁！\"></a>死锁！</h1><h2 id=\"dispatch-sync导致的死锁\"><a href=\"#dispatch-sync导致的死锁\" class=\"headerlink\" title=\"dispatch_sync导致的死锁\"></a>dispatch_sync导致的死锁</h2><p>在main线程使用“同步”方法提交Block，必定会死锁：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"I am block...\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>嵌套调用可能就会造成死锁：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI1 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 1\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//死锁！</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> updateUI2];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateUI2 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Update ui 2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其它情况：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase1 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase2 &#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"comment\">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)deadLockCase3 &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"com.starming.gcddemo.serialqueue\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(serialQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">        <span class=\"comment\">//串行队列里面同步一个串行队列就会死锁</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(serialQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"5\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"dispatch-apply导致的死锁\"><a href=\"#dispatch-apply导致的死锁\" class=\"headerlink\" title=\"dispatch_apply导致的死锁:\"></a>dispatch_apply导致的死锁:</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在串行队列里嵌套使用dispatch_apply</span></div><div class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_queue_create(<span class=\"string\">\"me.tutuge.test.gcd\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\"></div><div class=\"line\">dispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> i) &#123;</div><div class=\"line\">\tNSLog(@<span class=\"string\">\"apply loop: %zu\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再来一个dispatch_apply！死锁！</span></div><div class=\"line\">\tdispatch_apply(<span class=\"number\">3</span>, <span class=\"built_in\">queue</span>, ^(<span class=\"keyword\">size_t</span> j) &#123;</div><div class=\"line\">\t\tNSLog(@<span class=\"string\">\"apply loop inside %zu\"</span>, j);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"时间魔法-NSDate回忆录","date":"2016-05-24T16:00:00.000Z","_content":"# 简介   \n总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。\n\n* 日期时间的比较\n* NSDate 简单实用\n* NSDateFormatter 对日期时间对象做格式化操作的类\n* NSDateComponents 的简单使用\n***\n<!-- more -->\n![time_oc](http://o7ttfnm00.bkt.clouddn.com/1.jpg)\n\n# 日期时间的比较\n```\n// 当前时间\nNSDate *currentDate = [NSDate date];\n// 比当前时间晚一个小时的时间\nNSDate *laterDate = [[NSDate alloc] initWithTimeInterval:60*60 sinceDate:[NSDate date]];\n// 比当前时间早一个小时的时间\nNSDate *earlierDate = [[NSDate alloc] initWithTimeInterval:-60*60 sinceDate:[NSDate date]];\n// 比较哪个时间晚\nif ([currentDate laterDate:laterDate]) {\n    // current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚\n    NSLog(@\"current-%@比later-%@晚\",currentDate,laterDate);\n}\n// 比较哪个时间早\nif ([currentDate earlierDate:earlierDate]) {\n    // current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早\n    NSLog(@\"current-%@ 比 earlier-%@ 早\",currentDate,earlierDate);\n}\n\n*\n- (NSComparisonResult)compare:(NSDate *)other;\n该方法用于排序时调用:\n. 当实例保存的日期值与anotherDate相同时返回NSOrderedSame\n. 当实例保存的日期值晚于anotherDate时返回NSOrderedDescending\n. 当实例保存的日期值早于anotherDate时返回NSOrderedAscending\n*/\n\nif ([currentDate compare:earlierDate]==NSOrderedDescending) {\n    // 打印结果\n    NSLog(@\"current 晚\");\n}\nif ([currentDate compare:currentDate]==NSOrderedSame) {\n    // 打印结果\n    NSLog(@\"时间相等\");\n}\nif ([currentDate compare:laterDate]==NSOrderedAscending) {\n    // 打印结果\n    NSLog(@\"current 早\");\n}\n\n```\n***\n# NSDate 简单实用\n```\n//-获取当前日期时间的方法\n//实例方法\nNSDate *date1=[[NSDate alloc]init];\nNSLog(@\"date1:%@\",date1);  //2016-05-25 13:06:12 +0000\n//类方法\nNSDate *date2=[NSDate date];\nNSLog(@\"date2:%@\",date2);  //2016-05-25 13:06:12 +0000\n\n//获取从1970年1月1日00:00到date2的秒数\nNSTimeInterval interval= [date2 timeIntervalSince1970];\nNSLog(@\"%f\",interval);     //1464182226.511477\n\n//*********可以加一个延时操作\n//[NSThread sleepForTimeInterval:2.f];\nfor(int i=0;i<10000;i++){}\n//********* \n//计算两个时间差（秒数）\ninterval=[date2 timeIntervalSinceDate:date1];\nNSLog(@\"%f\",interval);     //0.001625\n\n//date1距现在的时间差\ninterval=[date1 timeIntervalSinceNow];\nNSLog(@\"%f\",interval);     //-0.001935\n\n//-得到date2的后一天(单位-秒)的时间对象\n//实例方法：\nNSDate *date3=[date2 dateByAddingTimeInterval:24*3600];\nNSLog(@\"date3:%@\",date3);  //2016-05-26 13:18:21 +0000\n//类方法：\nNSDate *date4=[NSDate dateWithTimeInterval:24*3600 sinceDate:date2];\nNSLog(@\"date4:%@\",date4);  //2016-05-26 13:18:21 +0000\n\n//得到距现在多少秒后的一个日期时间对象\nNSDate *date5=[NSDate dateWithTimeIntervalSinceNow:3*24*3600];\nNSLog(@\"date5:%@\",date5);  //2016-05-28 13:18:21 +0000\n\n//获取将来的一个日期时间对象\nNSDate *date6=[NSDate distantFuture];\nNSLog(@\"date6:%@\",date6);  //4001-01-01 00:00:00 +0000\n    \n//获取过去的一个日期时间对象\nNSDate *date7=[NSDate distantPast];\nNSLog(@\"date7:%@\",date7);  //0000-12-30 00:00:00 +0000\n```\n***\n# NSDateFormatter 对日期时间对象做格式化操作的类\n```\nNSDateFormatter *format=[[NSDateFormatter alloc]init];\n[format setDateStyle:NSDateFormatterMediumStyle]; //设置日期的样式\n[format setTimeStyle:NSDateFormatterMediumStyle]; //设置时间的样式\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSString *styledate= [format stringFromDate:date1];\nNSLog(@\"styledate:%@\",styledate);                 //May 25, 2016, 9:18:21 PM\n\n[format setDateFormat:@\"yyyy-MM-dd hh:mm:ss\"];    //自定义格式字符串\nNSString *sdate=[format stringFromDate:date1];    //将NSDate对象转换为字符串\nNSLog(@\"sdate:%@\",sdate);                         //2016-05-25 09:18:21\n\n//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)\nNSString *str=@\"2016-05-25 09:15:30\";\nNSDate *date8=[format dateFromString:str];\nNSLog(@\"date8:%@\",date8); //2015-07-09 16:10:30 +0000\n\n//时间格式化字符串\nNSDate *newdate=[NSDate date];\nNSDateFormatter *formatter = [[NSDateFormatter alloc]init];\n[formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss MMM eee a\"];\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSString *strdate = [formatter stringFromDate:newdate];\nNSLog(@\"%@\",strdate); //2016-05-25 21:18:21 May Wed PM\n\n//时间字符串转换为时间类型\nNSDateFormatter * formatter2 = [[NSDateFormatter alloc]init];\nNSString * nstr =@\"2016年05月25日 9点14分18秒\";\n[formatter2 setDateFormat:@\"yyyy年MM月dd日  hh点mm分ss秒\"];\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSDate * date9 = [formatter2 dateFromString:nstr];\n\nps：NSDateFormatter 是时间的一些配置项：对应的时区、展示的格式等等。如果服务器没有返回时间戳，而是返回了默认 “Asia/Shanghai” 时区的字符串时间（XXXX年X月X日），这时候在转NSDate时就必须要设置清楚这个时间所属的时区，否则会被当做是零时区的时间。 \n\n```\n***\n# NSDateComponents 的简单使用\n\n```\n//获取系统时间的年月日时分秒部分\nNSCalendar *cal = [NSCalendar currentCalendar];\n//Mac 10.10以前的系统使用 NSYearCalendarUnit\nunsigned int unitFlags = NSCalendarUnitYear |NSCalendarUnitMonth|NSCalendarUnitDay|NSCalendarUnitHour|NSCalendarUnitMinute|NSCalendarUnitSecond;\nNSDateComponents *d = [cal components:unitFlags fromDate:newdate];\nNSLog(@\"年=%ld\",[d year]);   //年=2016\nNSLog(@\"月=%ld\",[d month]);  //月=5\nNSLog(@\"日=%ld\",[d day]);    //日=25\nNSLog(@\"时=%ld\",[d hour]);   //时=21\nNSLog(@\"分=%ld\",[d minute]); //分=18\nNSLog(@\"秒=%ld\",[d second]); //秒=21\n   \n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n     \n//解决时分秒转换不准确问题--相差了8小时，是时区的问题\nNSTimeZone *fzone = [NSTimeZone systemTimeZone];\nNSInteger finterval = [fzone secondsFromGMTForDate:date9];\nNSDate *fDate = [date9  dateByAddingTimeInterval:finterval];\nNSLog(@\"%@\",fDate); //2014-05-01 10:23:18 +0000\n\n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n\n//解决时分秒转换不准确问题\nNSTimeZone *fromzone = [NSTimeZone systemTimeZone];\nNSInteger frominterval = [fromzone secondsFromGMTForDate: fromdate];\nNSDate *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];\nNSLog(@\"fromdate=%@\",fromDate);\n    \nNSDate *currentDate = [NSDate date];\nNSString *timeSp = [NSString stringWithFormat:@\"%ld\", (long)[currentDate timeIntervalSince1970]];\nNSLog(@\"currentDate == %@\", timeSp); //1464182301\nNSTimeInterval time = [timeSp doubleValue];\nNSTimeInterval addTime = 60 * 60 * 24 * 7;\ntime = time + addTime;\n    \nNSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n[dateFormatter setDateFormat:@\"YYYY/MM/dd hh:mm:ss SS\"];\nNSString *dateString = [dateFormatter stringFromDate:currentDate];\nNSString *year = [dateString substringToIndex:4];\nNSString *month = [dateString substringWithRange:NSMakeRange(5, 2)];\nNSString *day = [dateString substringWithRange:NSMakeRange(8, 2)];\nNSLog(@\"%@-%@-%@\", year, month, day); //2016-05-25\n```\n\n","source":"_posts/OC/时间魔法.md","raw":"---\ntitle: 时间魔法-NSDate回忆录\ndate: 2016-05-25 \ntags: OC\n---\n# 简介   \n总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。\n\n* 日期时间的比较\n* NSDate 简单实用\n* NSDateFormatter 对日期时间对象做格式化操作的类\n* NSDateComponents 的简单使用\n***\n<!-- more -->\n![time_oc](http://o7ttfnm00.bkt.clouddn.com/1.jpg)\n\n# 日期时间的比较\n```\n// 当前时间\nNSDate *currentDate = [NSDate date];\n// 比当前时间晚一个小时的时间\nNSDate *laterDate = [[NSDate alloc] initWithTimeInterval:60*60 sinceDate:[NSDate date]];\n// 比当前时间早一个小时的时间\nNSDate *earlierDate = [[NSDate alloc] initWithTimeInterval:-60*60 sinceDate:[NSDate date]];\n// 比较哪个时间晚\nif ([currentDate laterDate:laterDate]) {\n    // current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚\n    NSLog(@\"current-%@比later-%@晚\",currentDate,laterDate);\n}\n// 比较哪个时间早\nif ([currentDate earlierDate:earlierDate]) {\n    // current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早\n    NSLog(@\"current-%@ 比 earlier-%@ 早\",currentDate,earlierDate);\n}\n\n*\n- (NSComparisonResult)compare:(NSDate *)other;\n该方法用于排序时调用:\n. 当实例保存的日期值与anotherDate相同时返回NSOrderedSame\n. 当实例保存的日期值晚于anotherDate时返回NSOrderedDescending\n. 当实例保存的日期值早于anotherDate时返回NSOrderedAscending\n*/\n\nif ([currentDate compare:earlierDate]==NSOrderedDescending) {\n    // 打印结果\n    NSLog(@\"current 晚\");\n}\nif ([currentDate compare:currentDate]==NSOrderedSame) {\n    // 打印结果\n    NSLog(@\"时间相等\");\n}\nif ([currentDate compare:laterDate]==NSOrderedAscending) {\n    // 打印结果\n    NSLog(@\"current 早\");\n}\n\n```\n***\n# NSDate 简单实用\n```\n//-获取当前日期时间的方法\n//实例方法\nNSDate *date1=[[NSDate alloc]init];\nNSLog(@\"date1:%@\",date1);  //2016-05-25 13:06:12 +0000\n//类方法\nNSDate *date2=[NSDate date];\nNSLog(@\"date2:%@\",date2);  //2016-05-25 13:06:12 +0000\n\n//获取从1970年1月1日00:00到date2的秒数\nNSTimeInterval interval= [date2 timeIntervalSince1970];\nNSLog(@\"%f\",interval);     //1464182226.511477\n\n//*********可以加一个延时操作\n//[NSThread sleepForTimeInterval:2.f];\nfor(int i=0;i<10000;i++){}\n//********* \n//计算两个时间差（秒数）\ninterval=[date2 timeIntervalSinceDate:date1];\nNSLog(@\"%f\",interval);     //0.001625\n\n//date1距现在的时间差\ninterval=[date1 timeIntervalSinceNow];\nNSLog(@\"%f\",interval);     //-0.001935\n\n//-得到date2的后一天(单位-秒)的时间对象\n//实例方法：\nNSDate *date3=[date2 dateByAddingTimeInterval:24*3600];\nNSLog(@\"date3:%@\",date3);  //2016-05-26 13:18:21 +0000\n//类方法：\nNSDate *date4=[NSDate dateWithTimeInterval:24*3600 sinceDate:date2];\nNSLog(@\"date4:%@\",date4);  //2016-05-26 13:18:21 +0000\n\n//得到距现在多少秒后的一个日期时间对象\nNSDate *date5=[NSDate dateWithTimeIntervalSinceNow:3*24*3600];\nNSLog(@\"date5:%@\",date5);  //2016-05-28 13:18:21 +0000\n\n//获取将来的一个日期时间对象\nNSDate *date6=[NSDate distantFuture];\nNSLog(@\"date6:%@\",date6);  //4001-01-01 00:00:00 +0000\n    \n//获取过去的一个日期时间对象\nNSDate *date7=[NSDate distantPast];\nNSLog(@\"date7:%@\",date7);  //0000-12-30 00:00:00 +0000\n```\n***\n# NSDateFormatter 对日期时间对象做格式化操作的类\n```\nNSDateFormatter *format=[[NSDateFormatter alloc]init];\n[format setDateStyle:NSDateFormatterMediumStyle]; //设置日期的样式\n[format setTimeStyle:NSDateFormatterMediumStyle]; //设置时间的样式\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSString *styledate= [format stringFromDate:date1];\nNSLog(@\"styledate:%@\",styledate);                 //May 25, 2016, 9:18:21 PM\n\n[format setDateFormat:@\"yyyy-MM-dd hh:mm:ss\"];    //自定义格式字符串\nNSString *sdate=[format stringFromDate:date1];    //将NSDate对象转换为字符串\nNSLog(@\"sdate:%@\",sdate);                         //2016-05-25 09:18:21\n\n//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)\nNSString *str=@\"2016-05-25 09:15:30\";\nNSDate *date8=[format dateFromString:str];\nNSLog(@\"date8:%@\",date8); //2015-07-09 16:10:30 +0000\n\n//时间格式化字符串\nNSDate *newdate=[NSDate date];\nNSDateFormatter *formatter = [[NSDateFormatter alloc]init];\n[formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss MMM eee a\"];\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSString *strdate = [formatter stringFromDate:newdate];\nNSLog(@\"%@\",strdate); //2016-05-25 21:18:21 May Wed PM\n\n//时间字符串转换为时间类型\nNSDateFormatter * formatter2 = [[NSDateFormatter alloc]init];\nNSString * nstr =@\"2016年05月25日 9点14分18秒\";\n[formatter2 setDateFormat:@\"yyyy年MM月dd日  hh点mm分ss秒\"];\n[dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"]]; //设置时区\nNSDate * date9 = [formatter2 dateFromString:nstr];\n\nps：NSDateFormatter 是时间的一些配置项：对应的时区、展示的格式等等。如果服务器没有返回时间戳，而是返回了默认 “Asia/Shanghai” 时区的字符串时间（XXXX年X月X日），这时候在转NSDate时就必须要设置清楚这个时间所属的时区，否则会被当做是零时区的时间。 \n\n```\n***\n# NSDateComponents 的简单使用\n\n```\n//获取系统时间的年月日时分秒部分\nNSCalendar *cal = [NSCalendar currentCalendar];\n//Mac 10.10以前的系统使用 NSYearCalendarUnit\nunsigned int unitFlags = NSCalendarUnitYear |NSCalendarUnitMonth|NSCalendarUnitDay|NSCalendarUnitHour|NSCalendarUnitMinute|NSCalendarUnitSecond;\nNSDateComponents *d = [cal components:unitFlags fromDate:newdate];\nNSLog(@\"年=%ld\",[d year]);   //年=2016\nNSLog(@\"月=%ld\",[d month]);  //月=5\nNSLog(@\"日=%ld\",[d day]);    //日=25\nNSLog(@\"时=%ld\",[d hour]);   //时=21\nNSLog(@\"分=%ld\",[d minute]); //分=18\nNSLog(@\"秒=%ld\",[d second]); //秒=21\n   \n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n     \n//解决时分秒转换不准确问题--相差了8小时，是时区的问题\nNSTimeZone *fzone = [NSTimeZone systemTimeZone];\nNSInteger finterval = [fzone secondsFromGMTForDate:date9];\nNSDate *fDate = [date9  dateByAddingTimeInterval:finterval];\nNSLog(@\"%@\",fDate); //2014-05-01 10:23:18 +0000\n\n//将传入时间字符串转换成需要的时间格式\nNSString *dateStr=@\"2013-08-13 20:28:40\";\nNSDateFormatter *format1=[[NSDateFormatter alloc] init];\n[format1 setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\nNSDate *fromdate=[format1 dateFromString:dateStr];\n\n//解决时分秒转换不准确问题\nNSTimeZone *fromzone = [NSTimeZone systemTimeZone];\nNSInteger frominterval = [fromzone secondsFromGMTForDate: fromdate];\nNSDate *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];\nNSLog(@\"fromdate=%@\",fromDate);\n    \nNSDate *currentDate = [NSDate date];\nNSString *timeSp = [NSString stringWithFormat:@\"%ld\", (long)[currentDate timeIntervalSince1970]];\nNSLog(@\"currentDate == %@\", timeSp); //1464182301\nNSTimeInterval time = [timeSp doubleValue];\nNSTimeInterval addTime = 60 * 60 * 24 * 7;\ntime = time + addTime;\n    \nNSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n[dateFormatter setDateFormat:@\"YYYY/MM/dd hh:mm:ss SS\"];\nNSString *dateString = [dateFormatter stringFromDate:currentDate];\nNSString *year = [dateString substringToIndex:4];\nNSString *month = [dateString substringWithRange:NSMakeRange(5, 2)];\nNSString *day = [dateString substringWithRange:NSMakeRange(8, 2)];\nNSLog(@\"%@-%@-%@\", year, month, day); //2016-05-25\n```\n\n","slug":"OC/时间魔法","published":1,"updated":"2020-05-07T03:15:27.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aok0005te03q4bxmsn7","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。</p>\n<ul>\n<li>日期时间的比较</li>\n<li>NSDate 简单实用</li>\n<li>NSDateFormatter 对日期时间对象做格式化操作的类</li>\n<li>NSDateComponents 的简单使用</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/1.jpg\" alt=\"time_oc\"></p>\n<h1 id=\"日期时间的比较\"><a href=\"#日期时间的比较\" class=\"headerlink\" title=\"日期时间的比较\"></a>日期时间的比较</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">// 比当前时间晚一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *laterDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比当前时间早一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *earlierDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">-60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间晚</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate laterDate:laterDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@比later-%@晚\"</span>,currentDate,laterDate);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间早</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate earlierDate:earlierDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@ 比 earlier-%@ 早\"</span>,currentDate,earlierDate);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*</div><div class=\"line\">- (<span class=\"built_in\">NSComparisonResult</span>)compare:(<span class=\"built_in\">NSDate</span> *)other;</div><div class=\"line\">该方法用于排序时调用:</div><div class=\"line\">. 当实例保存的日期值与anotherDate相同时返回<span class=\"built_in\">NSOrderedSame</span></div><div class=\"line\">. 当实例保存的日期值晚于anotherDate时返回<span class=\"built_in\">NSOrderedDescending</span></div><div class=\"line\">. 当实例保存的日期值早于anotherDate时返回<span class=\"built_in\">NSOrderedAscending</span></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:earlierDate]==<span class=\"built_in\">NSOrderedDescending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 晚\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:currentDate]==<span class=\"built_in\">NSOrderedSame</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时间相等\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:laterDate]==<span class=\"built_in\">NSOrderedAscending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 早\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDate-简单实用\"><a href=\"#NSDate-简单实用\" class=\"headerlink\" title=\"NSDate 简单实用\"></a>NSDate 简单实用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//-获取当前日期时间的方法</span></div><div class=\"line\"><span class=\"comment\">//实例方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date1=[[<span class=\"built_in\">NSDate</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date1:%@\"</span>,date1);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date2=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date2:%@\"</span>,date2);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到date2的秒数</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> interval= [date2 timeIntervalSince1970];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//1464182226.511477</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//*********可以加一个延时操作</span></div><div class=\"line\"><span class=\"comment\">//[NSThread sleepForTimeInterval:2.f];</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//********* </span></div><div class=\"line\"><span class=\"comment\">//计算两个时间差（秒数）</span></div><div class=\"line\">interval=[date2 timeIntervalSinceDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//0.001625</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//date1距现在的时间差</span></div><div class=\"line\">interval=[date1 timeIntervalSinceNow];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//-0.001935</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//-得到date2的后一天(单位-秒)的时间对象</span></div><div class=\"line\"><span class=\"comment\">//实例方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date3=[date2 dateByAddingTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date3:%@\"</span>,date3);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date4=[<span class=\"built_in\">NSDate</span> dateWithTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span> sinceDate:date2];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date4:%@\"</span>,date4);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date5=[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date5:%@\"</span>,date5);  <span class=\"comment\">//2016-05-28 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取将来的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date6=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date6:%@\"</span>,date6);  <span class=\"comment\">//4001-01-01 00:00:00 +0000</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获取过去的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date7=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date7:%@\"</span>,date7);  <span class=\"comment\">//0000-12-30 00:00:00 +0000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter-对日期时间对象做格式化操作的类\"><a href=\"#NSDateFormatter-对日期时间对象做格式化操作的类\" class=\"headerlink\" title=\"NSDateFormatter 对日期时间对象做格式化操作的类\"></a>NSDateFormatter 对日期时间对象做格式化操作的类</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format=[[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[format setDateStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置日期的样式</span></div><div class=\"line\">[format setTimeStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置时间的样式</span></div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *styledate= [format stringFromDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"styledate:%@\"</span>,styledate);                 <span class=\"comment\">//May 25, 2016, 9:18:21 PM</span></div><div class=\"line\"></div><div class=\"line\">[format setDateFormat:<span class=\"string\">@\"yyyy-MM-dd hh:mm:ss\"</span>];    <span class=\"comment\">//自定义格式字符串</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *sdate=[format stringFromDate:date1];    <span class=\"comment\">//将NSDate对象转换为字符串</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sdate:%@\"</span>,sdate);                         <span class=\"comment\">//2016-05-25 09:18:21</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *str=<span class=\"string\">@\"2016-05-25 09:15:30\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date8=[format dateFromString:str];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date8:%@\"</span>,date8); <span class=\"comment\">//2015-07-09 16:10:30 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间格式化字符串</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *newdate=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *formatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[formatter setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss MMM eee a\"</span>];</div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *strdate = [formatter stringFromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,strdate); <span class=\"comment\">//2016-05-25 21:18:21 May Wed PM</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间字符串转换为时间类型</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> * formatter2 = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSString</span> * nstr =<span class=\"string\">@\"2016年05月25日 9点14分18秒\"</span>;</div><div class=\"line\">[formatter2 setDateFormat:<span class=\"string\">@\"yyyy年MM月dd日  hh点mm分ss秒\"</span>];</div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> * date9 = [formatter2 dateFromString:nstr];</div><div class=\"line\"></div><div class=\"line\">ps：<span class=\"built_in\">NSDateFormatter</span> 是时间的一些配置项：对应的时区、展示的格式等等。如果服务器没有返回时间戳，而是返回了默认 “Asia/Shanghai” 时区的字符串时间（XXXX年X月X日），这时候在转<span class=\"built_in\">NSDate</span>时就必须要设置清楚这个时间所属的时区，否则会被当做是零时区的时间。</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents-的简单使用\"><a href=\"#NSDateComponents-的简单使用\" class=\"headerlink\" title=\"NSDateComponents 的简单使用\"></a>NSDateComponents 的简单使用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取系统时间的年月日时分秒部分</span></div><div class=\"line\"><span class=\"built_in\">NSCalendar</span> *cal = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\"><span class=\"comment\">//Mac 10.10以前的系统使用 NSYearCalendarUnit</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> unitFlags = <span class=\"built_in\">NSCalendarUnitYear</span> |<span class=\"built_in\">NSCalendarUnitMonth</span>|<span class=\"built_in\">NSCalendarUnitDay</span>|<span class=\"built_in\">NSCalendarUnitHour</span>|<span class=\"built_in\">NSCalendarUnitMinute</span>|<span class=\"built_in\">NSCalendarUnitSecond</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateComponents</span> *d = [cal components:unitFlags fromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"年=%ld\"</span>,[d year]);   <span class=\"comment\">//年=2016</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"月=%ld\"</span>,[d month]);  <span class=\"comment\">//月=5</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"日=%ld\"</span>,[d day]);    <span class=\"comment\">//日=25</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时=%ld\"</span>,[d hour]);   <span class=\"comment\">//时=21</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"分=%ld\"</span>,[d minute]); <span class=\"comment\">//分=18</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"秒=%ld\"</span>,[d second]); <span class=\"comment\">//秒=21</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题--相差了8小时，是时区的问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> finterval = [fzone secondsFromGMTForDate:date9];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fDate = [date9  dateByAddingTimeInterval:finterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,fDate); <span class=\"comment\">//2014-05-01 10:23:18 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fromzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> frominterval = [fromzone secondsFromGMTForDate: fromdate];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"fromdate=%@\"</span>,fromDate);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *timeSp = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, (<span class=\"keyword\">long</span>)[currentDate timeIntervalSince1970]];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"currentDate == %@\"</span>, timeSp); <span class=\"comment\">//1464182301</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> time = [timeSp doubleValue];</div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> addTime = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span>;</div><div class=\"line\">time = time + addTime;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[dateFormatter setDateFormat:<span class=\"string\">@\"YYYY/MM/dd hh:mm:ss SS\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [dateFormatter stringFromDate:currentDate];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *year = [dateString substringToIndex:<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *month = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *day = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@-%@-%@\"</span>, year, month, day); <span class=\"comment\">//2016-05-25</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>总结了下Swift中关于时间的一些简单操作，顺便也把OC的有关NSDate的一些常用方法回顾了一遍，记录成这篇NSDate回忆录。</p>\n<ul>\n<li>日期时间的比较</li>\n<li>NSDate 简单实用</li>\n<li>NSDateFormatter 对日期时间对象做格式化操作的类</li>\n<li>NSDateComponents 的简单使用</li>\n</ul>\n<hr>","more":"<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/1.jpg\" alt=\"time_oc\"></p>\n<h1 id=\"日期时间的比较\"><a href=\"#日期时间的比较\" class=\"headerlink\" title=\"日期时间的比较\"></a>日期时间的比较</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">// 比当前时间晚一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *laterDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比当前时间早一个小时的时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *earlierDate = [[<span class=\"built_in\">NSDate</span> alloc] initWithTimeInterval:<span class=\"number\">-60</span>*<span class=\"number\">60</span> sinceDate:[<span class=\"built_in\">NSDate</span> date]];</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间晚</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate laterDate:laterDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000比later-2016-05-25 14:50:27 +0000晚</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@比later-%@晚\"</span>,currentDate,laterDate);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 比较哪个时间早</span></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate earlierDate:earlierDate]) &#123;</div><div class=\"line\">    <span class=\"comment\">// current-2016-05-25 13:50:27 +0000 比 earlier-2016-05-25 12:50:27 +0000 早</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current-%@ 比 earlier-%@ 早\"</span>,currentDate,earlierDate);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*</div><div class=\"line\">- (<span class=\"built_in\">NSComparisonResult</span>)compare:(<span class=\"built_in\">NSDate</span> *)other;</div><div class=\"line\">该方法用于排序时调用:</div><div class=\"line\">. 当实例保存的日期值与anotherDate相同时返回<span class=\"built_in\">NSOrderedSame</span></div><div class=\"line\">. 当实例保存的日期值晚于anotherDate时返回<span class=\"built_in\">NSOrderedDescending</span></div><div class=\"line\">. 当实例保存的日期值早于anotherDate时返回<span class=\"built_in\">NSOrderedAscending</span></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:earlierDate]==<span class=\"built_in\">NSOrderedDescending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 晚\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:currentDate]==<span class=\"built_in\">NSOrderedSame</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时间相等\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> ([currentDate compare:laterDate]==<span class=\"built_in\">NSOrderedAscending</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 打印结果</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"current 早\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDate-简单实用\"><a href=\"#NSDate-简单实用\" class=\"headerlink\" title=\"NSDate 简单实用\"></a>NSDate 简单实用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//-获取当前日期时间的方法</span></div><div class=\"line\"><span class=\"comment\">//实例方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date1=[[<span class=\"built_in\">NSDate</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date1:%@\"</span>,date1);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date2=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date2:%@\"</span>,date2);  <span class=\"comment\">//2016-05-25 13:06:12 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到date2的秒数</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> interval= [date2 timeIntervalSince1970];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//1464182226.511477</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//*********可以加一个延时操作</span></div><div class=\"line\"><span class=\"comment\">//[NSThread sleepForTimeInterval:2.f];</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//********* </span></div><div class=\"line\"><span class=\"comment\">//计算两个时间差（秒数）</span></div><div class=\"line\">interval=[date2 timeIntervalSinceDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//0.001625</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//date1距现在的时间差</span></div><div class=\"line\">interval=[date1 timeIntervalSinceNow];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%f\"</span>,interval);     <span class=\"comment\">//-0.001935</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//-得到date2的后一天(单位-秒)的时间对象</span></div><div class=\"line\"><span class=\"comment\">//实例方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date3=[date2 dateByAddingTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date3:%@\"</span>,date3);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"><span class=\"comment\">//类方法：</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date4=[<span class=\"built_in\">NSDate</span> dateWithTimeInterval:<span class=\"number\">24</span>*<span class=\"number\">3600</span> sinceDate:date2];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date4:%@\"</span>,date4);  <span class=\"comment\">//2016-05-26 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date5=[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date5:%@\"</span>,date5);  <span class=\"comment\">//2016-05-28 13:18:21 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取将来的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date6=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date6:%@\"</span>,date6);  <span class=\"comment\">//4001-01-01 00:00:00 +0000</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//获取过去的一个日期时间对象</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date7=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date7:%@\"</span>,date7);  <span class=\"comment\">//0000-12-30 00:00:00 +0000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter-对日期时间对象做格式化操作的类\"><a href=\"#NSDateFormatter-对日期时间对象做格式化操作的类\" class=\"headerlink\" title=\"NSDateFormatter 对日期时间对象做格式化操作的类\"></a>NSDateFormatter 对日期时间对象做格式化操作的类</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format=[[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[format setDateStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置日期的样式</span></div><div class=\"line\">[format setTimeStyle:<span class=\"built_in\">NSDateFormatterMediumStyle</span>]; <span class=\"comment\">//设置时间的样式</span></div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *styledate= [format stringFromDate:date1];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"styledate:%@\"</span>,styledate);                 <span class=\"comment\">//May 25, 2016, 9:18:21 PM</span></div><div class=\"line\"></div><div class=\"line\">[format setDateFormat:<span class=\"string\">@\"yyyy-MM-dd hh:mm:ss\"</span>];    <span class=\"comment\">//自定义格式字符串</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *sdate=[format stringFromDate:date1];    <span class=\"comment\">//将NSDate对象转换为字符串</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sdate:%@\"</span>,sdate);                         <span class=\"comment\">//2016-05-25 09:18:21</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将字符串形式的日期时间转换为NSDate对象(保证字符串的形式与format中的形式一致)</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *str=<span class=\"string\">@\"2016-05-25 09:15:30\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date8=[format dateFromString:str];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date8:%@\"</span>,date8); <span class=\"comment\">//2015-07-09 16:10:30 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间格式化字符串</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *newdate=[<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *formatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">[formatter setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss MMM eee a\"</span>];</div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *strdate = [formatter stringFromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,strdate); <span class=\"comment\">//2016-05-25 21:18:21 May Wed PM</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//时间字符串转换为时间类型</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> * formatter2 = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\"><span class=\"built_in\">NSString</span> * nstr =<span class=\"string\">@\"2016年05月25日 9点14分18秒\"</span>;</div><div class=\"line\">[formatter2 setDateFormat:<span class=\"string\">@\"yyyy年MM月dd日  hh点mm分ss秒\"</span>];</div><div class=\"line\">[dateFormatter setTimeZone:[<span class=\"built_in\">NSTimeZone</span> timeZoneWithName:<span class=\"string\">@\"Asia/Shanghai\"</span>]]; <span class=\"comment\">//设置时区</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> * date9 = [formatter2 dateFromString:nstr];</div><div class=\"line\"></div><div class=\"line\">ps：<span class=\"built_in\">NSDateFormatter</span> 是时间的一些配置项：对应的时区、展示的格式等等。如果服务器没有返回时间戳，而是返回了默认 “Asia/Shanghai” 时区的字符串时间（XXXX年X月X日），这时候在转<span class=\"built_in\">NSDate</span>时就必须要设置清楚这个时间所属的时区，否则会被当做是零时区的时间。</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents-的简单使用\"><a href=\"#NSDateComponents-的简单使用\" class=\"headerlink\" title=\"NSDateComponents 的简单使用\"></a>NSDateComponents 的简单使用</h1><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取系统时间的年月日时分秒部分</span></div><div class=\"line\"><span class=\"built_in\">NSCalendar</span> *cal = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\"><span class=\"comment\">//Mac 10.10以前的系统使用 NSYearCalendarUnit</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> unitFlags = <span class=\"built_in\">NSCalendarUnitYear</span> |<span class=\"built_in\">NSCalendarUnitMonth</span>|<span class=\"built_in\">NSCalendarUnitDay</span>|<span class=\"built_in\">NSCalendarUnitHour</span>|<span class=\"built_in\">NSCalendarUnitMinute</span>|<span class=\"built_in\">NSCalendarUnitSecond</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateComponents</span> *d = [cal components:unitFlags fromDate:newdate];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"年=%ld\"</span>,[d year]);   <span class=\"comment\">//年=2016</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"月=%ld\"</span>,[d month]);  <span class=\"comment\">//月=5</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"日=%ld\"</span>,[d day]);    <span class=\"comment\">//日=25</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"时=%ld\"</span>,[d hour]);   <span class=\"comment\">//时=21</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"分=%ld\"</span>,[d minute]); <span class=\"comment\">//分=18</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"秒=%ld\"</span>,[d second]); <span class=\"comment\">//秒=21</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\">     </div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题--相差了8小时，是时区的问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> finterval = [fzone secondsFromGMTForDate:date9];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fDate = [date9  dateByAddingTimeInterval:finterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,fDate); <span class=\"comment\">//2014-05-01 10:23:18 +0000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将传入时间字符串转换成需要的时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateStr=<span class=\"string\">@\"2013-08-13 20:28:40\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *format1=[[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[format1 setDateFormat:<span class=\"string\">@\"yyyy-MM-dd HH:mm:ss\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromdate=[format1 dateFromString:dateStr];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解决时分秒转换不准确问题</span></div><div class=\"line\"><span class=\"built_in\">NSTimeZone</span> *fromzone = [<span class=\"built_in\">NSTimeZone</span> systemTimeZone];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> frominterval = [fromzone secondsFromGMTForDate: fromdate];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *fromDate = [fromdate  dateByAddingTimeInterval: frominterval];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"fromdate=%@\"</span>,fromDate);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDate</span> *currentDate = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *timeSp = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, (<span class=\"keyword\">long</span>)[currentDate timeIntervalSince1970]];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"currentDate == %@\"</span>, timeSp); <span class=\"comment\">//1464182301</span></div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> time = [timeSp doubleValue];</div><div class=\"line\"><span class=\"built_in\">NSTimeInterval</span> addTime = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span>;</div><div class=\"line\">time = time + addTime;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</div><div class=\"line\">[dateFormatter setDateFormat:<span class=\"string\">@\"YYYY/MM/dd hh:mm:ss SS\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [dateFormatter stringFromDate:currentDate];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *year = [dateString substringToIndex:<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *month = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSString</span> *day = [dateString substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@-%@-%@\"</span>, year, month, day); <span class=\"comment\">//2016-05-25</span></div></pre></td></tr></table></figure>"},{"title":"时间魔法 Swift篇","date":"2016-05-26T16:00:00.000Z","_content":"# 简介\n* NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。\n* NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。\n<!-- more -->\n 除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n* NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。\n*  NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。\n NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。\n* NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。\n\n***\n<!-- more -->\n![time](http://o7ttfnm00.bkt.clouddn.com/5.jpg)\n\n* [NSDate](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/)\n* [NSDateFormatter](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html)\n* [NSDateComponentFormatter](https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html)\n* [NSCalendar](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)\n***\n\n# NSDate\n```\n//获取当前时间\nlet date1 = NSDate()     //\"May 27, 2016, 2:36 PM\"\nlet str1 = String(date1) //\"2016-05-27 06:36:17 +0000\"\n\n//获取从1970年1月1日00:00到当前时间的秒数\nvar interval : NSTimeInterval = date1.timeIntervalSince1970 //1464330977.49057 \n\nlet date2 = NSDate()\n//计算时间差\ninterval = date2.timeIntervalSinceDate(date1) //0.2234339714050293\n//date1 距现在的时间差\ninterval = date1.timeIntervalSinceNow         //-0.2241280078887939\n\n//得到date2后一天的时间对象\nlet date3 = date2 .dateByAddingTimeInterval(24*3600)             // 实例方法\nlet date4 = NSDate.init(timeInterval: 24*3600, sinceDate: date2) // 类方法\nprint(\"date3 == \\(date3) ; date4 == \\(date4)\")                   \n//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"\n\n//得到距现在多少秒后一个日期时间对象\nlet date5 = NSDate.init(timeIntervalSinceNow: 3*24*3600) //\"May 30, 2016, 2:36 PM\"\nprint(date5)                                             //\"2016-05-30 06:36:17 +0000\\n\"\n\n//未来\nlet date6 = NSDate.distantFuture() //\"Jan 1, 4001, 8:00 AM\"\n//亘古\nlet date7 = NSDate.distantPast()   //\"4001-01-01 00:00:00 +0000\\n\"\nprint(\"future == \\(date6); past == \\(date7)\")\n//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"\n```\n***\n# NSDateFormatter\n\n## 初始化\n```\nlet dateFormatter = NSDateFormatter()\n```\n有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle   //完整样式（FullStyle）\nvar convertedDate = dateFormatter.stringFromDate(date1)    //\"Friday, May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.LongStyle   //长样式（Long Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.MediumStyle //中等样式(Medium Style)\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.ShortStyle  //短样式（Short Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"5/27/16\"\n```\n## 改变时区\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle\n// 希腊\ndateFormatter.locale = NSLocale(localeIdentifier: \"el_GR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Παρασκευή, 27 Μαΐου 2016\"\n// 法国\ndateFormatter.locale = NSLocale(localeIdentifier: \"fr_FR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"vendredi 27 mai 2016\"\n// 本地\ndateFormatter.locale = NSLocale.currentLocale()\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n```\n## 自定义的日期格式\n\n[设置自定义日期格式](http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns)在两种场景中很有用：          \n1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。\n```\n EEEE：“星期”的全名（比如Monday）。如需缩写，指定1-3个字符（如E，EE，EEE代表Mon）。\n MMMM：“月份”的全名（比如October）。如需缩写，指定1-3个字符（如M，MM，MMM代表Oct）。\n dd：某月的第几天（例如，09或15）\n yyyy：四位字符串表示“年”（例如2015）\n HH：两位字符串表示“小时”（例如08或19）\n mm：两位字符串表示“分钟”（例如05或54）\n ss：两位字符串表示“秒”\n zzz：三位字符串表示“时区”（例如GMT）\n GGG：公元前BC或公元后AD\n ```\n \n```\ndateFormatter.dateFormat = \"EEEE, MMMM dd, yyyy\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n\ndateFormatter.dateFormat = \"HH:mm:ss\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"14:36:17\"\n\nvar dateAsString = \"27-05-2016 23:59\"\ndateFormatter.dateFormat = \"dd-MM-yyyy HH:mm\"\nvar newDate = dateFormatter.dateFromString(dateAsString)   //\"May 27, 2016, 11:59 PM\"\n\n// 包含时区信息的复杂字符串：\ndateAsString = \"Thu, 27 May 2016 09:22:33 GMT\"\ndateFormatter.dateFormat = \"EEE, dd MMM yyyy HH:mm:ss zzz\"\nnewDate = dateFormatter.dateFromString(dateAsString)       //\"May 27, 2016, 5:22 PM\"\n```\n***\n# NSDateComponents\n\n## NSDate到NSDateComponents\n\nNSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个[文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit) 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。\n\n```\nlet calendar = NSCalendar.currentCalendar()\nlet dateComponents = calendar.components([NSCalendarUnit.Day, NSCalendarUnit.Month, NSCalendarUnit.Year, NSCalendarUnit.WeekOfYear, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second, NSCalendarUnit.Nanosecond], fromDate: date1)\n\nprint(\"day = \\(dateComponents.day)\", \"month = \\(dateComponents.month)\", \"year = \\(dateComponents.year)\", \"week of year = \\(dateComponents.weekOfYear)\", \"hour = \\(dateComponents.hour)\", \"minute = \\(dateComponents.minute)\", \"second = \\(dateComponents.second)\", \"nanosecond = \\(dateComponents.nanosecond)\" , separator: \", \", terminator: \"\")\n\n//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"\n\nlet year = dateComponents.year             //年\nlet mondth = dateComponents.month          //月\nlet day = dateComponents.day               //日\nlet weekOfYear = dateComponents.weekOfYear //第几周\nlet hour = dateComponents.hour             //时\nlet minute = dateComponents.minute         //分\nlet second = dateComponents.second         //秒\nlet nanosecond = dateComponents.nanosecond //毫微秒\n```\n## NSDateComponents到NSDate\n\n### 初始化\n\n这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可\n```\nlet components = NSDateComponents()\ncomponents.day = 5\ncomponents.month = 01\ncomponents.year = 2016\ncomponents.hour = 19\ncomponents.minute = 30\nnewDate = calendar.dateFromComponents(components)\n```\n### 改动时区对转换日期对象的影响\n```\nGMT = Greenwich Mean Time（格林尼治标准时间）\nCST = China Standard Time（中国标准时间）\nCET = Central European Time(欧洲中部时间）\n时区缩写的列表（http://www.timeanddate.com/time/zones/）\n```\n```\ncomponents.timeZone = NSTimeZone(abbreviation: \"GMT\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 3:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CST\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 9:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CET\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 2:30 AM\"\n```\n***\n# 比较日期和时间\nearlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:\n```\nearlierDate:\n如果 date1 早于 date2，该方法返回date1\n如过 date2 早于 date1，该方法返回date2\n如果 date1 和 date2 相同，返回date1\n\ndateFormatter.dateFormat = \"MMM dd, yyyy zzz\"\ndateAsString = \"May 27, 2016 GMT\"\nvar date8 = dateFormatter.dateFromString(dateAsString)! //\"May 27, 2016, 8:00 AM\"\n\nvar date10 = date1.earlierDate(date8)                   //\"May 27, 2016, 8:00 AM\"\ndate10 = date1.laterDate(date8)                         //\"May 27, 2016, 3:12 PM\"\n```\nNSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。\n```\nif date1.compare(date2) == NSComparisonResult.OrderedDescending{\n    print(\"Date1 is later than date2\")\n}else if date1.compare(date2) == NSComparisonResult.OrderedAscending{\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else if date1.compare(date2) == NSComparisonResult.OrderedSame {\n    print(\"Same date\")\n}\n```\n时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。\n```\nif date1.timeIntervalSinceReferenceDate > date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Later than Date2\")\n}else if date1.timeIntervalSinceReferenceDate <  date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else {\n    print(\"Same dates\")\n}\n```\n在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。\n```\ndateFormatter.dateFormat = \"HH:mm:ss zzz\"\ndateAsString = \"14:28:16 GMT\"\nlet date11 = dateFormatter.dateFromString(dateAsString)!\ndateAsString = \"19:53:12 GMT\"\nlet date12 = dateFormatter.dateFromString(dateAsString)!\n\nif date1.earlierDate(date2) == date1 {\n    if date1.isEqualToDate(date2) {\n        print(\"Same time\")\n    }else {\n        print(\"\\(date1) is earlier than \\(date2)\")\n        //2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000\n    }\n}else {\n    print(\"\\(date2) is earlier than \\(date1)\")\n}\n```\n***\n# 计算未来和过去的日期\n两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。\n\n假定我们需要为这个日期往后推两个月又5天。\n```\nlet monthsToAdd = 2\nlet daysToAdd = 5\n\n```\n这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。\n```\nvar calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, value: monthsToAdd, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, value: daysToAdd, toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n```\n当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。\n```\nlet newDateComponents = NSDateComponents()\nnewDateComponents.month = monthsToAdd\nnewDateComponents.day = daysToAdd\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(newDateComponents, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\n\n```\n// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 [官方文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)。\n\n***\n# 计算日期间隔\n通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。\n```\nvar diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: 0))\n\nprint(\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\")\n//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n\nlet diffYear = diffFateComponents.year\nlet diffMonth = diffFateComponents.month\nlet diffDay = diffFateComponents.day\nlet diffHour = diffFateComponents.hour\nlet diffMinute = diffFateComponents.minute\nlet diffSecond = diffFateComponents.second\n```\nNSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。\n```\nlet dateComponentsFormatter = NSDateComponentsFormatter()\ndateComponentsFormatter.unitsStyle = NSDateComponentsFormatterUnitsStyle.Full\n\nlet interval2 = date14.timeIntervalSinceDate(date1)\ndateComponentsFormatter.stringFromTimeInterval(interval2)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：\n```\ndateComponentsFormatter.allowedUnits = [NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second]\nlet autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n","source":"_posts/Swift/时间魔法Swift篇.md","raw":"---\ntitle: 时间魔法 Swift篇\ndate: 2016-05-27\ntags: Swift\n---\n# 简介\n* NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。\n* NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。\n<!-- more -->\n 除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n* NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。\n*  NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。\n NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。\n* NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。\n\n***\n<!-- more -->\n![time](http://o7ttfnm00.bkt.clouddn.com/5.jpg)\n\n* [NSDate](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/)\n* [NSDateFormatter](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html)\n* [NSDateComponentFormatter](https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html)\n* [NSCalendar](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)\n***\n\n# NSDate\n```\n//获取当前时间\nlet date1 = NSDate()     //\"May 27, 2016, 2:36 PM\"\nlet str1 = String(date1) //\"2016-05-27 06:36:17 +0000\"\n\n//获取从1970年1月1日00:00到当前时间的秒数\nvar interval : NSTimeInterval = date1.timeIntervalSince1970 //1464330977.49057 \n\nlet date2 = NSDate()\n//计算时间差\ninterval = date2.timeIntervalSinceDate(date1) //0.2234339714050293\n//date1 距现在的时间差\ninterval = date1.timeIntervalSinceNow         //-0.2241280078887939\n\n//得到date2后一天的时间对象\nlet date3 = date2 .dateByAddingTimeInterval(24*3600)             // 实例方法\nlet date4 = NSDate.init(timeInterval: 24*3600, sinceDate: date2) // 类方法\nprint(\"date3 == \\(date3) ; date4 == \\(date4)\")                   \n//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"\n\n//得到距现在多少秒后一个日期时间对象\nlet date5 = NSDate.init(timeIntervalSinceNow: 3*24*3600) //\"May 30, 2016, 2:36 PM\"\nprint(date5)                                             //\"2016-05-30 06:36:17 +0000\\n\"\n\n//未来\nlet date6 = NSDate.distantFuture() //\"Jan 1, 4001, 8:00 AM\"\n//亘古\nlet date7 = NSDate.distantPast()   //\"4001-01-01 00:00:00 +0000\\n\"\nprint(\"future == \\(date6); past == \\(date7)\")\n//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"\n```\n***\n# NSDateFormatter\n\n## 初始化\n```\nlet dateFormatter = NSDateFormatter()\n```\n有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle   //完整样式（FullStyle）\nvar convertedDate = dateFormatter.stringFromDate(date1)    //\"Friday, May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.LongStyle   //长样式（Long Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.MediumStyle //中等样式(Medium Style)\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"May 27, 2016\"\n\ndateFormatter.dateStyle = NSDateFormatterStyle.ShortStyle  //短样式（Short Style）\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"5/27/16\"\n```\n## 改变时区\n```\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle\n// 希腊\ndateFormatter.locale = NSLocale(localeIdentifier: \"el_GR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Παρασκευή, 27 Μαΐου 2016\"\n// 法国\ndateFormatter.locale = NSLocale(localeIdentifier: \"fr_FR\")\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"vendredi 27 mai 2016\"\n// 本地\ndateFormatter.locale = NSLocale.currentLocale()\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n```\n## 自定义的日期格式\n\n[设置自定义日期格式](http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns)在两种场景中很有用：          \n1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。\n```\n EEEE：“星期”的全名（比如Monday）。如需缩写，指定1-3个字符（如E，EE，EEE代表Mon）。\n MMMM：“月份”的全名（比如October）。如需缩写，指定1-3个字符（如M，MM，MMM代表Oct）。\n dd：某月的第几天（例如，09或15）\n yyyy：四位字符串表示“年”（例如2015）\n HH：两位字符串表示“小时”（例如08或19）\n mm：两位字符串表示“分钟”（例如05或54）\n ss：两位字符串表示“秒”\n zzz：三位字符串表示“时区”（例如GMT）\n GGG：公元前BC或公元后AD\n ```\n \n```\ndateFormatter.dateFormat = \"EEEE, MMMM dd, yyyy\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"Friday, May 27, 2016\"\n\ndateFormatter.dateFormat = \"HH:mm:ss\"\nconvertedDate = dateFormatter.stringFromDate(date1)        //\"14:36:17\"\n\nvar dateAsString = \"27-05-2016 23:59\"\ndateFormatter.dateFormat = \"dd-MM-yyyy HH:mm\"\nvar newDate = dateFormatter.dateFromString(dateAsString)   //\"May 27, 2016, 11:59 PM\"\n\n// 包含时区信息的复杂字符串：\ndateAsString = \"Thu, 27 May 2016 09:22:33 GMT\"\ndateFormatter.dateFormat = \"EEE, dd MMM yyyy HH:mm:ss zzz\"\nnewDate = dateFormatter.dateFromString(dateAsString)       //\"May 27, 2016, 5:22 PM\"\n```\n***\n# NSDateComponents\n\n## NSDate到NSDateComponents\n\nNSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个[文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit) 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。\n\n```\nlet calendar = NSCalendar.currentCalendar()\nlet dateComponents = calendar.components([NSCalendarUnit.Day, NSCalendarUnit.Month, NSCalendarUnit.Year, NSCalendarUnit.WeekOfYear, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second, NSCalendarUnit.Nanosecond], fromDate: date1)\n\nprint(\"day = \\(dateComponents.day)\", \"month = \\(dateComponents.month)\", \"year = \\(dateComponents.year)\", \"week of year = \\(dateComponents.weekOfYear)\", \"hour = \\(dateComponents.hour)\", \"minute = \\(dateComponents.minute)\", \"second = \\(dateComponents.second)\", \"nanosecond = \\(dateComponents.nanosecond)\" , separator: \", \", terminator: \"\")\n\n//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"\n\nlet year = dateComponents.year             //年\nlet mondth = dateComponents.month          //月\nlet day = dateComponents.day               //日\nlet weekOfYear = dateComponents.weekOfYear //第几周\nlet hour = dateComponents.hour             //时\nlet minute = dateComponents.minute         //分\nlet second = dateComponents.second         //秒\nlet nanosecond = dateComponents.nanosecond //毫微秒\n```\n## NSDateComponents到NSDate\n\n### 初始化\n\n这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可\n```\nlet components = NSDateComponents()\ncomponents.day = 5\ncomponents.month = 01\ncomponents.year = 2016\ncomponents.hour = 19\ncomponents.minute = 30\nnewDate = calendar.dateFromComponents(components)\n```\n### 改动时区对转换日期对象的影响\n```\nGMT = Greenwich Mean Time（格林尼治标准时间）\nCST = China Standard Time（中国标准时间）\nCET = Central European Time(欧洲中部时间）\n时区缩写的列表（http://www.timeanddate.com/time/zones/）\n```\n```\ncomponents.timeZone = NSTimeZone(abbreviation: \"GMT\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 3:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CST\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 9:30 AM\"\n\ncomponents.timeZone = NSTimeZone(abbreviation: \"CET\")\nnewDate = calendar.dateFromComponents(components)     //\"Jan 6, 2016, 2:30 AM\"\n```\n***\n# 比较日期和时间\nearlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:\n```\nearlierDate:\n如果 date1 早于 date2，该方法返回date1\n如过 date2 早于 date1，该方法返回date2\n如果 date1 和 date2 相同，返回date1\n\ndateFormatter.dateFormat = \"MMM dd, yyyy zzz\"\ndateAsString = \"May 27, 2016 GMT\"\nvar date8 = dateFormatter.dateFromString(dateAsString)! //\"May 27, 2016, 8:00 AM\"\n\nvar date10 = date1.earlierDate(date8)                   //\"May 27, 2016, 8:00 AM\"\ndate10 = date1.laterDate(date8)                         //\"May 27, 2016, 3:12 PM\"\n```\nNSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。\n```\nif date1.compare(date2) == NSComparisonResult.OrderedDescending{\n    print(\"Date1 is later than date2\")\n}else if date1.compare(date2) == NSComparisonResult.OrderedAscending{\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else if date1.compare(date2) == NSComparisonResult.OrderedSame {\n    print(\"Same date\")\n}\n```\n时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。\n```\nif date1.timeIntervalSinceReferenceDate > date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Later than Date2\")\n}else if date1.timeIntervalSinceReferenceDate <  date2.timeIntervalSinceReferenceDate {\n    print(\"Date1 is Earlier than Date2\") //\"Date1 is Earlier than Date2\\n\"\n}else {\n    print(\"Same dates\")\n}\n```\n在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。\n```\ndateFormatter.dateFormat = \"HH:mm:ss zzz\"\ndateAsString = \"14:28:16 GMT\"\nlet date11 = dateFormatter.dateFromString(dateAsString)!\ndateAsString = \"19:53:12 GMT\"\nlet date12 = dateFormatter.dateFromString(dateAsString)!\n\nif date1.earlierDate(date2) == date1 {\n    if date1.isEqualToDate(date2) {\n        print(\"Same time\")\n    }else {\n        print(\"\\(date1) is earlier than \\(date2)\")\n        //2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000\n    }\n}else {\n    print(\"\\(date2) is earlier than \\(date1)\")\n}\n```\n***\n# 计算未来和过去的日期\n两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。\n\n假定我们需要为这个日期往后推两个月又5天。\n```\nlet monthsToAdd = 2\nlet daysToAdd = 5\n\n```\n这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。\n```\nvar calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, value: monthsToAdd, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, value: daysToAdd, toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n```\n当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。\n```\nlet newDateComponents = NSDateComponents()\nnewDateComponents.month = monthsToAdd\nnewDateComponents.day = daysToAdd\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(newDateComponents, toDate: date1, options: NSCalendarOptions.init(rawValue: 0))\n\n```\n// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 [官方文档](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/)。\n\n***\n# 计算日期间隔\n通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。\n```\nvar diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: 0))\n\nprint(\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\")\n//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n\nlet diffYear = diffFateComponents.year\nlet diffMonth = diffFateComponents.month\nlet diffDay = diffFateComponents.day\nlet diffHour = diffFateComponents.hour\nlet diffMinute = diffFateComponents.minute\nlet diffSecond = diffFateComponents.second\n```\nNSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。\n```\nlet dateComponentsFormatter = NSDateComponentsFormatter()\ndateComponentsFormatter.unitsStyle = NSDateComponentsFormatterUnitsStyle.Full\n\nlet interval2 = date14.timeIntervalSinceDate(date1)\ndateComponentsFormatter.stringFromTimeInterval(interval2)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：\n```\ndateComponentsFormatter.allowedUnits = [NSCalendarUnit.Year, NSCalendarUnit.Month, NSCalendarUnit.Day, NSCalendarUnit.Hour, NSCalendarUnit.Minute, NSCalendarUnit.Second]\nlet autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)\n//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"\n```\n","slug":"Swift/时间魔法Swift篇","published":1,"updated":"2020-05-06T05:56:32.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aom0006te037jolrzgn","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。</li>\n<li>NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。<a id=\"more\"></a>\n除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。</li>\n<li>NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。</li>\n<li>NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。<br>NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。</li>\n<li>NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。</li>\n</ul>\n<hr>\n<!-- more -->\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/5.jpg\" alt=\"time\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/\" target=\"_blank\" rel=\"external\">NSDate</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html\" target=\"_blank\" rel=\"external\">NSDateFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html\" target=\"_blank\" rel=\"external\">NSDateComponentFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">NSCalendar</a></li>\n</ul>\n<hr>\n<h1 id=\"NSDate\"><a href=\"#NSDate\" class=\"headerlink\" title=\"NSDate\"></a>NSDate</h1><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"keyword\">let</span> date1 = <span class=\"type\">NSDate</span>()     <span class=\"comment\">//\"May 27, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"type\">String</span>(date1) <span class=\"comment\">//\"2016-05-27 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到当前时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">var</span> interval : <span class=\"type\">NSTimeInterval</span> = date1.timeIntervalSince1970 <span class=\"comment\">//1464330977.49057 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> date2 = <span class=\"type\">NSDate</span>()</div><div class=\"line\"><span class=\"comment\">//计算时间差</span></div><div class=\"line\">interval = date2.timeIntervalSinceDate(date1) <span class=\"comment\">//0.2234339714050293</span></div><div class=\"line\"><span class=\"comment\">//date1 距现在的时间差</span></div><div class=\"line\">interval = date1.timeIntervalSinceNow         <span class=\"comment\">//-0.2241280078887939</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到date2后一天的时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date3 = date2 .dateByAddingTimeInterval(<span class=\"number\">24</span>*<span class=\"number\">3600</span>)             <span class=\"comment\">// 实例方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> date4 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeInterval: <span class=\"number\">24</span>*<span class=\"number\">3600</span>, sinceDate: date2) <span class=\"comment\">// 类方法</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"date3 == <span class=\"subst\">\\(date3)</span> ; date4 == <span class=\"subst\">\\(date4)</span>\"</span>)                   </div><div class=\"line\"><span class=\"comment\">//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后一个日期时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date5 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeIntervalSinceNow: <span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>) <span class=\"comment\">//\"May 30, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(date5)                                             <span class=\"comment\">//\"2016-05-30 06:36:17 +0000\\n\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//未来</span></div><div class=\"line\"><span class=\"keyword\">let</span> date6 = <span class=\"type\">NSDate</span>.distantFuture() <span class=\"comment\">//\"Jan 1, 4001, 8:00 AM\"</span></div><div class=\"line\"><span class=\"comment\">//亘古</span></div><div class=\"line\"><span class=\"keyword\">let</span> date7 = <span class=\"type\">NSDate</span>.distantPast()   <span class=\"comment\">//\"4001-01-01 00:00:00 +0000\\n\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"future == <span class=\"subst\">\\(date6)</span>; past == <span class=\"subst\">\\(date7)</span>\"</span>)</div><div class=\"line\"><span class=\"comment\">//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter\"><a href=\"#NSDateFormatter\" class=\"headerlink\" title=\"NSDateFormatter\"></a>NSDateFormatter</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateFormatter</span> = NSDateFormatter()</div></pre></td></tr></table></figure>\n<p>有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.FullStyle</span>   <span class=\"comment\">//完整样式（FullStyle）</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> convertedDate = dateFormatter.stringFromDate(date1)    <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.LongStyle</span>   <span class=\"comment\">//长样式（Long Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.MediumStyle</span> <span class=\"comment\">//中等样式(Medium Style)</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.ShortStyle</span>  <span class=\"comment\">//短样式（Short Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"5/27/16\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改变时区\"><a href=\"#改变时区\" class=\"headerlink\" title=\"改变时区\"></a>改变时区</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle.FullStyle</div><div class=\"line\"><span class=\"comment\">// 希腊</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"el_GR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Παρασκευή, 27 Μαΐου 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 法国</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"fr_FR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"vendredi 27 mai 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 本地</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale.currentLocale()</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"自定义的日期格式\"><a href=\"#自定义的日期格式\" class=\"headerlink\" title=\"自定义的日期格式\"></a>自定义的日期格式</h2><p><a href=\"http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns\" target=\"_blank\" rel=\"external\">设置自定义日期格式</a>在两种场景中很有用：<br>1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">EEEE：“星期”的全名（比如Monday）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如E，EE，EEE代表Mon）。</div><div class=\"line\">MMMM：“月份”的全名（比如October）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如M，MM，MMM代表Oct）。</div><div class=\"line\">dd：某月的第几天（例如，<span class=\"number\">09</span>或<span class=\"number\">15</span>）</div><div class=\"line\">yyyy：四位字符串表示“年”（例如<span class=\"number\">2015</span>）</div><div class=\"line\">HH：两位字符串表示“小时”（例如<span class=\"number\">08</span>或<span class=\"number\">19</span>）</div><div class=\"line\">mm：两位字符串表示“分钟”（例如<span class=\"number\">05</span>或<span class=\"number\">54</span>）</div><div class=\"line\">ss：两位字符串表示“秒”</div><div class=\"line\">zzz：三位字符串表示“时区”（例如GMT）</div><div class=\"line\">GGG：公元前BC或公元后AD</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEEE, MMMM dd, yyyy\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"HH:mm:ss\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"14:36:17\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> dateAsString = <span class=\"string\">\"27-05-2016 23:59\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"dd-MM-yyyy HH:mm\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> newDate = dateFormatter.dateFromString(dateAsString)   <span class=\"comment\">//\"May 27, 2016, 11:59 PM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含时区信息的复杂字符串：</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"Thu, 27 May 2016 09:22:33 GMT\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEE, dd MMM yyyy HH:mm:ss zzz\"</span></div><div class=\"line\">newDate = dateFormatter.dateFromString(dateAsString)       <span class=\"comment\">//\"May 27, 2016, 5:22 PM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents\"><a href=\"#NSDateComponents\" class=\"headerlink\" title=\"NSDateComponents\"></a>NSDateComponents</h1><h2 id=\"NSDate到NSDateComponents\"><a href=\"#NSDate到NSDateComponents\" class=\"headerlink\" title=\"NSDate到NSDateComponents\"></a>NSDate到NSDateComponents</h2><p>NSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit\" target=\"_blank\" rel=\"external\">文档</a> 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let calendar = NSCalendar.currentCalendar()</div><div class=\"line\">let dateComponents = calendar.components([NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.WeekOfYear</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit<span class=\"selector-class\">.Second</span>, NSCalendarUnit.Nanosecond], fromDate: date1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"day = \\(dateComponents.day)\"</span>, <span class=\"string\">\"month = \\(dateComponents.month)\"</span>, <span class=\"string\">\"year = \\(dateComponents.year)\"</span>, <span class=\"string\">\"week of year = \\(dateComponents.weekOfYear)\"</span>, <span class=\"string\">\"hour = \\(dateComponents.hour)\"</span>, <span class=\"string\">\"minute = \\(dateComponents.minute)\"</span>, <span class=\"string\">\"second = \\(dateComponents.second)\"</span>, <span class=\"string\">\"nanosecond = \\(dateComponents.nanosecond)\"</span> , separator: <span class=\"string\">\", \"</span>, terminator: <span class=\"string\">\"\"</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"</span></div><div class=\"line\"></div><div class=\"line\">let year = dateComponents<span class=\"selector-class\">.year</span>             <span class=\"comment\">//年</span></div><div class=\"line\">let mondth = dateComponents<span class=\"selector-class\">.month</span>          <span class=\"comment\">//月</span></div><div class=\"line\">let day = dateComponents<span class=\"selector-class\">.day</span>               <span class=\"comment\">//日</span></div><div class=\"line\">let weekOfYear = dateComponents<span class=\"selector-class\">.weekOfYear</span> <span class=\"comment\">//第几周</span></div><div class=\"line\">let hour = dateComponents<span class=\"selector-class\">.hour</span>             <span class=\"comment\">//时</span></div><div class=\"line\">let minute = dateComponents<span class=\"selector-class\">.minute</span>         <span class=\"comment\">//分</span></div><div class=\"line\">let second = dateComponents<span class=\"selector-class\">.second</span>         <span class=\"comment\">//秒</span></div><div class=\"line\">let nanosecond = dateComponents<span class=\"selector-class\">.nanosecond</span> <span class=\"comment\">//毫微秒</span></div></pre></td></tr></table></figure>\n<h2 id=\"NSDateComponents到NSDate\"><a href=\"#NSDateComponents到NSDate\" class=\"headerlink\" title=\"NSDateComponents到NSDate\"></a>NSDateComponents到NSDate</h2><h3 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let components = NSDateComponents()</div><div class=\"line\">components<span class=\"selector-class\">.day</span> = <span class=\"number\">5</span></div><div class=\"line\">components<span class=\"selector-class\">.month</span> = <span class=\"number\">01</span></div><div class=\"line\">components<span class=\"selector-class\">.year</span> = <span class=\"number\">2016</span></div><div class=\"line\">components<span class=\"selector-class\">.hour</span> = <span class=\"number\">19</span></div><div class=\"line\">components<span class=\"selector-class\">.minute</span> = <span class=\"number\">30</span></div><div class=\"line\">newDate = calendar.dateFromComponents(components)</div></pre></td></tr></table></figure></p>\n<h3 id=\"改动时区对转换日期对象的影响\"><a href=\"#改动时区对转换日期对象的影响\" class=\"headerlink\" title=\"改动时区对转换日期对象的影响\"></a>改动时区对转换日期对象的影响</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GMT = Greenwich Mean Time（格林尼治标准时间）</div><div class=\"line\">CST = China Standard Time（中国标准时间）</div><div class=\"line\">CET = Central European Time(欧洲中部时间）</div><div class=\"line\"><span class=\"section\">时区缩写的列表（http://www.timeanddate.com/time/zones/）</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"GMT\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 3:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CST\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 9:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CET\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 2:30 AM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"比较日期和时间\"><a href=\"#比较日期和时间\" class=\"headerlink\" title=\"比较日期和时间\"></a>比较日期和时间</h1><p>earlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">earlierDate:</div><div class=\"line\">如果 date1 早于 date2，该方法返回date1</div><div class=\"line\">如过 date2 早于 date1，该方法返回date2</div><div class=\"line\">如果 date1 和 date2 相同，返回date1</div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"MMM dd, yyyy zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"May 27, 2016 GMT\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> date8 = dateFormatter.dateFromString(dateAsString)! <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> date10 = date1.earlierDate(date8)                   <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\">date10 = date1.laterDate(date8)                         <span class=\"comment\">//\"May 27, 2016, 3:12 PM\"</span></div></pre></td></tr></table></figure></p>\n<p>NSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedDescending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is later than date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedAscending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) //<span class=\"string\">\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedSame &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Same date\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &gt; date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Later than Date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &lt;  date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) <span class=\"comment\">//\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Same dates\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">\"HH:mm:ss zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"14:28:16 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date11 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\">dateAsString = <span class=\"string\">\"19:53:12 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date12 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> date1.earlierDate(date2) == date1 &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> date1.isEqualToDate(date2) &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Same time\"</span>)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date1)</span> is earlier than <span class=\"subst\">\\(date2)</span>\"</span>)</div><div class=\"line\">        <span class=\"comment\">//2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date2)</span> is earlier than <span class=\"subst\">\\(date1)</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"计算未来和过去的日期\"><a href=\"#计算未来和过去的日期\" class=\"headerlink\" title=\"计算未来和过去的日期\"></a>计算未来和过去的日期</h1><p>两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。</p>\n<p>假定我们需要为这个日期往后推两个月又5天。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">monthsToAdd</span> = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">daysToAdd</span> = <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, <span class=\"string\">value:</span> monthsToAdd, <span class=\"string\">toDate:</span> date1, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, <span class=\"string\">value:</span> daysToAdd, <span class=\"string\">toDate:</span> calculatedDate!, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">new</span><span class=\"type\">DateComponents</span> = NSDateComponents()</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.month = monthsToAdd</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.day = daysToAdd</div><div class=\"line\"></div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(<span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>, toDate: <span class=\"type\">date1</span>, options: <span class=\"type\">NSCalendarOptions</span>.init(rawValue: <span class=\"type\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<hr>\n<h1 id=\"计算日期间隔\"><a href=\"#计算日期间隔\" class=\"headerlink\" title=\"计算日期间隔\"></a>计算日期间隔</h1><p>通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">var</span> diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: <span class=\"number\">0</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\"</span>)</span></span></div><div class=\"line\"><span class=\"comment\">//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div><div class=\"line\"></div><div class=\"line\">let diffYear = diffFateComponents.year</div><div class=\"line\">let diffMonth = diffFateComponents.month</div><div class=\"line\">let diffDay = diffFateComponents.day</div><div class=\"line\">let diffHour = diffFateComponents.hour</div><div class=\"line\">let diffMinute = diffFateComponents.minute</div><div class=\"line\">let diffSecond = diffFateComponents.second</div></pre></td></tr></table></figure></p>\n<p>NSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateComponentsFormatter</span> = NSDateComponentsFormatter()</div><div class=\"line\">dateComponentsFormatter.<span class=\"attr\">unitsStyle</span> = NSDateComponentsFormatterUnitsStyle.Full</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">interval2</span> = date14.timeIntervalSinceDate(date1)</div><div class=\"line\">dateComponentsFormatter.stringFromTimeInterval(interval2)</div><div class=\"line\">//<span class=\"string\">\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n<p>最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateComponentsFormatter<span class=\"selector-class\">.allowedUnits</span> = [NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second]</div><div class=\"line\">let autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)</div><div class=\"line\"><span class=\"comment\">//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>NSDate 。在日期编程中，这个对象描述了日期和时间信息。可以把日期和时间看做是类中的普通属性，它不但用于日期，也用于时间处理。格式化，这个概念在直接处理 NSDate 对象时还用不到，只有在将日期对象转换为字符串对象时，才能用到格式化。</li>\n<li>NSDateComponents 。这个类可以简单的看做是 NSDate 的“姐妹”类，因为它为开发者带来了许多关于日期的便捷操作。其中一项重要内容是：它可以将日期和时间分割成独立的属性，这样就可以直接访问每项属性，这在诸如日期计算之类的任务中非常有用。</li></ul>","more":"除了上面这些功能外， NSDateComponents 类在计算过去或未来的时间上也很有用。只需要简单的对某个子属性（年，月年等）执行加减操作，就可以算出未来或过去的一个时间。另外，NSDateComponents 类还适合查找两个日期之间的间隔。\n<li>NSCalendar 。这个类的功能并不在本文的讨论范围，但是，NSDate 和 NSDateComponents 之间的互相转换，却是由 NSCalendar 类来控制的，因为需要制定某个 NSCalendar 对象，才能完成转换。事实上，系统在进行转换时，需要知道使用的日历（历法）是哪个，然后才能获得正确的转换结果。要知道，世界上有许多不同的日历，其年月日的值是各不相同的。</li>\n<li>NSDateFormatter 。这个类会帮助我们将 NSDate 对象转换为字符串对象，也可以将字符串对象转换为 NSDate 对象。通过它，可以将 NSDate 对象按照预定义的日期样式直接转换成字符串，也可以按自定义的日期格式进行转换。<br>NSDateFormatter 对象也支持本地化功能，只需要提供一个有效的 NSLocale 对象，就可以按照给定的locale设置转换成合适的字符串内容。</li>\n<li>NSDateComponentsFormatter 。它有一个重要目的：输入日期和时间，输出格式化好的可读字符串。它包含了许多方法来完成这个任务。</li>\n\n<hr>\n<!-- more -->\n<p><img src=\"http://o7ttfnm00.bkt.clouddn.com/5.jpg\" alt=\"time\"></p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/\" target=\"_blank\" rel=\"external\">NSDate</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html\" target=\"_blank\" rel=\"external\">NSDateFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html\" target=\"_blank\" rel=\"external\">NSDateComponentFormatter</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">NSCalendar</a></li>\n</ul>\n<hr>\n<h1 id=\"NSDate\"><a href=\"#NSDate\" class=\"headerlink\" title=\"NSDate\"></a>NSDate</h1><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"keyword\">let</span> date1 = <span class=\"type\">NSDate</span>()     <span class=\"comment\">//\"May 27, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"type\">String</span>(date1) <span class=\"comment\">//\"2016-05-27 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取从1970年1月1日00:00到当前时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">var</span> interval : <span class=\"type\">NSTimeInterval</span> = date1.timeIntervalSince1970 <span class=\"comment\">//1464330977.49057 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> date2 = <span class=\"type\">NSDate</span>()</div><div class=\"line\"><span class=\"comment\">//计算时间差</span></div><div class=\"line\">interval = date2.timeIntervalSinceDate(date1) <span class=\"comment\">//0.2234339714050293</span></div><div class=\"line\"><span class=\"comment\">//date1 距现在的时间差</span></div><div class=\"line\">interval = date1.timeIntervalSinceNow         <span class=\"comment\">//-0.2241280078887939</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到date2后一天的时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date3 = date2 .dateByAddingTimeInterval(<span class=\"number\">24</span>*<span class=\"number\">3600</span>)             <span class=\"comment\">// 实例方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> date4 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeInterval: <span class=\"number\">24</span>*<span class=\"number\">3600</span>, sinceDate: date2) <span class=\"comment\">// 类方法</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"date3 == <span class=\"subst\">\\(date3)</span> ; date4 == <span class=\"subst\">\\(date4)</span>\"</span>)                   </div><div class=\"line\"><span class=\"comment\">//\"date3 == 2016-05-28 06:36:17 +0000 ; date4 == 2016-05-28 06:36:17 +0000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//得到距现在多少秒后一个日期时间对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> date5 = <span class=\"type\">NSDate</span>.<span class=\"keyword\">init</span>(timeIntervalSinceNow: <span class=\"number\">3</span>*<span class=\"number\">24</span>*<span class=\"number\">3600</span>) <span class=\"comment\">//\"May 30, 2016, 2:36 PM\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(date5)                                             <span class=\"comment\">//\"2016-05-30 06:36:17 +0000\\n\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//未来</span></div><div class=\"line\"><span class=\"keyword\">let</span> date6 = <span class=\"type\">NSDate</span>.distantFuture() <span class=\"comment\">//\"Jan 1, 4001, 8:00 AM\"</span></div><div class=\"line\"><span class=\"comment\">//亘古</span></div><div class=\"line\"><span class=\"keyword\">let</span> date7 = <span class=\"type\">NSDate</span>.distantPast()   <span class=\"comment\">//\"4001-01-01 00:00:00 +0000\\n\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"future == <span class=\"subst\">\\(date6)</span>; past == <span class=\"subst\">\\(date7)</span>\"</span>)</div><div class=\"line\"><span class=\"comment\">//\"future == 4001-01-01 00:00:00 +0000; past == 0000-12-30 00:00:00 +0000\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateFormatter\"><a href=\"#NSDateFormatter\" class=\"headerlink\" title=\"NSDateFormatter\"></a>NSDateFormatter</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateFormatter</span> = NSDateFormatter()</div></pre></td></tr></table></figure>\n<p>有两种方式可以设置格式:一种是通过一些预定义的日期格式化样式（dateStyle）；另外一种是通过某些说明符来手动设置日期格式。stringFromDate 方法的使用也很重要，它是真正执行转换的代码。当谈到日期、字符串转换时，就指的是这个方法，而其他步骤只是起到定制结果的辅助作用。如果你在项目里要用到日期转换，这个方法会非常方便。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.FullStyle</span>   <span class=\"comment\">//完整样式（FullStyle）</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> convertedDate = dateFormatter.stringFromDate(date1)    <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.LongStyle</span>   <span class=\"comment\">//长样式（Long Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.MediumStyle</span> <span class=\"comment\">//中等样式(Medium Style)</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle<span class=\"selector-class\">.ShortStyle</span>  <span class=\"comment\">//短样式（Short Style）</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"5/27/16\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改变时区\"><a href=\"#改变时区\" class=\"headerlink\" title=\"改变时区\"></a>改变时区</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateStyle</span> = NSDateFormatterStyle.FullStyle</div><div class=\"line\"><span class=\"comment\">// 希腊</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"el_GR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Παρασκευή, 27 Μαΐου 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 法国</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale(localeIdentifier: <span class=\"string\">\"fr_FR\"</span>)</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"vendredi 27 mai 2016\"</span></div><div class=\"line\"><span class=\"comment\">// 本地</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.locale</span> = NSLocale.currentLocale()</div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"自定义的日期格式\"><a href=\"#自定义的日期格式\" class=\"headerlink\" title=\"自定义的日期格式\"></a>自定义的日期格式</h2><p><a href=\"http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns\" target=\"_blank\" rel=\"external\">设置自定义日期格式</a>在两种场景中很有用：<br>1.当预定义的日期样式不能满足我们的需求；2.当我们需要把一个复杂的日期字符串（比如Thu, 08 Oct 2015 09:22:33 GMT）转换成日期对象。要想设置合适的日期格式（对象），必须搭配使用一系列说明符。说明符也是简单的字符，但是对于date formatter来说有特定的含义。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">EEEE：“星期”的全名（比如Monday）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如E，EE，EEE代表Mon）。</div><div class=\"line\">MMMM：“月份”的全名（比如October）。如需缩写，指定<span class=\"number\">1</span><span class=\"number\">-3</span>个字符（如M，MM，MMM代表Oct）。</div><div class=\"line\">dd：某月的第几天（例如，<span class=\"number\">09</span>或<span class=\"number\">15</span>）</div><div class=\"line\">yyyy：四位字符串表示“年”（例如<span class=\"number\">2015</span>）</div><div class=\"line\">HH：两位字符串表示“小时”（例如<span class=\"number\">08</span>或<span class=\"number\">19</span>）</div><div class=\"line\">mm：两位字符串表示“分钟”（例如<span class=\"number\">05</span>或<span class=\"number\">54</span>）</div><div class=\"line\">ss：两位字符串表示“秒”</div><div class=\"line\">zzz：三位字符串表示“时区”（例如GMT）</div><div class=\"line\">GGG：公元前BC或公元后AD</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEEE, MMMM dd, yyyy\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"Friday, May 27, 2016\"</span></div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"HH:mm:ss\"</span></div><div class=\"line\">convertedDate = dateFormatter.stringFromDate(date1)        <span class=\"comment\">//\"14:36:17\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> dateAsString = <span class=\"string\">\"27-05-2016 23:59\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"dd-MM-yyyy HH:mm\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> newDate = dateFormatter.dateFromString(dateAsString)   <span class=\"comment\">//\"May 27, 2016, 11:59 PM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含时区信息的复杂字符串：</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"Thu, 27 May 2016 09:22:33 GMT\"</span></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"EEE, dd MMM yyyy HH:mm:ss zzz\"</span></div><div class=\"line\">newDate = dateFormatter.dateFromString(dateAsString)       <span class=\"comment\">//\"May 27, 2016, 5:22 PM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"NSDateComponents\"><a href=\"#NSDateComponents\" class=\"headerlink\" title=\"NSDateComponents\"></a>NSDateComponents</h1><h2 id=\"NSDate到NSDateComponents\"><a href=\"#NSDate到NSDateComponents\" class=\"headerlink\" title=\"NSDate到NSDateComponents\"></a>NSDate到NSDateComponents</h2><p>NSCalendar 的 components(_:fromDate:)，这个方法接受两个参数：第二个是日期对象；第一个参数比较有意思，它接收若干个 NSCalendarUnit 类型值，NSCAlendarUnit 用来说明需要的日期部分。NSCalendarUnit 是一个结构体，你可以在 这个<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit\" target=\"_blank\" rel=\"external\">文档</a> 中看到所有属性。这里需要注意：若某个组件没有在第一个参数中指定，就无法访问它。如：在这个例子中，我们没有指定 NSCalendarUnit.TimeZone，这样就无法访问时区的组件，比如print(dateComponents.timezone)调用会造成一个运行时错误。如果你需要额外的日期组件，只能重新调用一次calendar.Components方法，把你需要的Calendar Unit添加进去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let calendar = NSCalendar.currentCalendar()</div><div class=\"line\">let dateComponents = calendar.components([NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.WeekOfYear</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit<span class=\"selector-class\">.Second</span>, NSCalendarUnit.Nanosecond], fromDate: date1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"day = \\(dateComponents.day)\"</span>, <span class=\"string\">\"month = \\(dateComponents.month)\"</span>, <span class=\"string\">\"year = \\(dateComponents.year)\"</span>, <span class=\"string\">\"week of year = \\(dateComponents.weekOfYear)\"</span>, <span class=\"string\">\"hour = \\(dateComponents.hour)\"</span>, <span class=\"string\">\"minute = \\(dateComponents.minute)\"</span>, <span class=\"string\">\"second = \\(dateComponents.second)\"</span>, <span class=\"string\">\"nanosecond = \\(dateComponents.nanosecond)\"</span> , separator: <span class=\"string\">\", \"</span>, terminator: <span class=\"string\">\"\"</span>)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"day = 27, month = 5, year = 2016, week of year = 22, hour = 14, minute = 36, second = 17, nanosecond = 490570008\"</span></div><div class=\"line\"></div><div class=\"line\">let year = dateComponents<span class=\"selector-class\">.year</span>             <span class=\"comment\">//年</span></div><div class=\"line\">let mondth = dateComponents<span class=\"selector-class\">.month</span>          <span class=\"comment\">//月</span></div><div class=\"line\">let day = dateComponents<span class=\"selector-class\">.day</span>               <span class=\"comment\">//日</span></div><div class=\"line\">let weekOfYear = dateComponents<span class=\"selector-class\">.weekOfYear</span> <span class=\"comment\">//第几周</span></div><div class=\"line\">let hour = dateComponents<span class=\"selector-class\">.hour</span>             <span class=\"comment\">//时</span></div><div class=\"line\">let minute = dateComponents<span class=\"selector-class\">.minute</span>         <span class=\"comment\">//分</span></div><div class=\"line\">let second = dateComponents<span class=\"selector-class\">.second</span>         <span class=\"comment\">//秒</span></div><div class=\"line\">let nanosecond = dateComponents<span class=\"selector-class\">.nanosecond</span> <span class=\"comment\">//毫微秒</span></div></pre></td></tr></table></figure>\n<h2 id=\"NSDateComponents到NSDate\"><a href=\"#NSDateComponents到NSDate\" class=\"headerlink\" title=\"NSDateComponents到NSDate\"></a>NSDateComponents到NSDate</h2><h3 id=\"初始化-1\"><a href=\"#初始化-1\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>这个过程中不需要使用calendar unit。只用初始化一个新的 NSDateComponents 对象，然后显式的设置你需要的组件的值，然后调用 NSCalendar 的 dateFromComponents 方法即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">let components = NSDateComponents()</div><div class=\"line\">components<span class=\"selector-class\">.day</span> = <span class=\"number\">5</span></div><div class=\"line\">components<span class=\"selector-class\">.month</span> = <span class=\"number\">01</span></div><div class=\"line\">components<span class=\"selector-class\">.year</span> = <span class=\"number\">2016</span></div><div class=\"line\">components<span class=\"selector-class\">.hour</span> = <span class=\"number\">19</span></div><div class=\"line\">components<span class=\"selector-class\">.minute</span> = <span class=\"number\">30</span></div><div class=\"line\">newDate = calendar.dateFromComponents(components)</div></pre></td></tr></table></figure></p>\n<h3 id=\"改动时区对转换日期对象的影响\"><a href=\"#改动时区对转换日期对象的影响\" class=\"headerlink\" title=\"改动时区对转换日期对象的影响\"></a>改动时区对转换日期对象的影响</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GMT = Greenwich Mean Time（格林尼治标准时间）</div><div class=\"line\">CST = China Standard Time（中国标准时间）</div><div class=\"line\">CET = Central European Time(欧洲中部时间）</div><div class=\"line\"><span class=\"section\">时区缩写的列表（http://www.timeanddate.com/time/zones/）</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"GMT\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 3:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CST\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 9:30 AM\"</span></div><div class=\"line\"></div><div class=\"line\">components.timeZone = NSTimeZone(abbreviation: <span class=\"string\">\"CET\"</span>)</div><div class=\"line\">newDate = calendar.dateFromComponents(components)     //<span class=\"string\">\"Jan 6, 2016, 2:30 AM\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"比较日期和时间\"><a href=\"#比较日期和时间\" class=\"headerlink\" title=\"比较日期和时间\"></a>比较日期和时间</h1><p>earlierDate:, 它用于判断一个日期是否早于另外一个日期。对应的还有一个是 laterDate:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">earlierDate:</div><div class=\"line\">如果 date1 早于 date2，该方法返回date1</div><div class=\"line\">如过 date2 早于 date1，该方法返回date2</div><div class=\"line\">如果 date1 和 date2 相同，返回date1</div><div class=\"line\"></div><div class=\"line\">dateFormatter<span class=\"selector-class\">.dateFormat</span> = <span class=\"string\">\"MMM dd, yyyy zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"May 27, 2016 GMT\"</span></div><div class=\"line\"><span class=\"selector-tag\">var</span> date8 = dateFormatter.dateFromString(dateAsString)! <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">var</span> date10 = date1.earlierDate(date8)                   <span class=\"comment\">//\"May 27, 2016, 8:00 AM\"</span></div><div class=\"line\">date10 = date1.laterDate(date8)                         <span class=\"comment\">//\"May 27, 2016, 3:12 PM\"</span></div></pre></td></tr></table></figure></p>\n<p>NSDate 的 compare: 方法，它需要搭配使用 NSComparisonResult 枚举体。<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedDescending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is later than date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedAscending&#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) //<span class=\"string\">\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1.<span class=\"built_in\">compare</span>(date2) == NSComparisonResult.OrderedSame &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Same date\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时间间隔（time interval)，查找到每个日期（到现在）的时间间隔，进行比对。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &gt; date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Later than Date2\"</span>)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> date1<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &lt;  date2<span class=\"selector-class\">.timeIntervalSinceReferenceDate</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Date1 is Earlier than Date2\"</span>) <span class=\"comment\">//\"Date1 is Earlier than Date2\\n\"</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Same dates\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在下面的方法里，会看到“2000-01-01”的日期，这是因为若 NSDate 对象没有指定日期，只指定时间的话，会自动添加默认的日期属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">\"HH:mm:ss zzz\"</span></div><div class=\"line\">dateAsString = <span class=\"string\">\"14:28:16 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date11 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\">dateAsString = <span class=\"string\">\"19:53:12 GMT\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> date12 = dateFormatter.dateFromString(dateAsString)!</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> date1.earlierDate(date2) == date1 &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> date1.isEqualToDate(date2) &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Same time\"</span>)</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date1)</span> is earlier than <span class=\"subst\">\\(date2)</span>\"</span>)</div><div class=\"line\">        <span class=\"comment\">//2016-05-27 07:12:44 +0000 is earlier than 2016-05-27 07:12:44 +0000</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(date2)</span> is earlier than <span class=\"subst\">\\(date1)</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"计算未来和过去的日期\"><a href=\"#计算未来和过去的日期\" class=\"headerlink\" title=\"计算未来和过去的日期\"></a>计算未来和过去的日期</h1><p>两种不同的方法：第一种使用 NSCalendar 类和 NSCalendarUnit 结构体；第二种使用 NSDateComponents 类。</p>\n<p>假定我们需要为这个日期往后推两个月又5天。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">monthsToAdd</span> = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">daysToAdd</span> = <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里用到的方法是 NSCAlendar 类的 dateByAddingUnit:value:toDate:options: 方法。它的作用是添加某个日历单元值（如年月日时分秒等）到现有的日期对象上，然后返回新的日期对象。我们需要添加两个日历单元到当前日期，直接用这个方法是不可能的（它每次只能设置一个calendar unit）。关键是调用两次这个方法，设置不同的日历单元，就能得到最终结果。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Month, <span class=\"string\">value:</span> monthsToAdd, <span class=\"string\">toDate:</span> date1, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(NSCalendarUnit.Day, <span class=\"string\">value:</span> daysToAdd, <span class=\"string\">toDate:</span> calculatedDate!, <span class=\"string\">options:</span> NSCalendarOptions.init(<span class=\"string\">rawValue:</span> <span class=\"number\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>当日历单元多的时候，你就需要多次调用这个方法。在日历单元比较多的时候，更好的方法是使用 NSDateComponents 类。初始化一个 NSDateComponents 对象，并设置月份和天的信息。然后我们调用 NSCalendar 的另一个方法dateByAddingComponents:toDate:options:，并最终获得我们需要的日期对象。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">let <span class=\"keyword\">new</span><span class=\"type\">DateComponents</span> = NSDateComponents()</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.month = monthsToAdd</div><div class=\"line\"><span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>.day = daysToAdd</div><div class=\"line\"></div><div class=\"line\">calculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(<span class=\"keyword\">new</span><span class=\"type\">DateComponents</span>, toDate: <span class=\"type\">date1</span>, options: <span class=\"type\">NSCalendarOptions</span>.init(rawValue: <span class=\"type\">0</span>))</div></pre></td></tr></table></figure></p>\n<p>// 注意：在以上调用 NSCalendar 方法的地方，最后一个参数options都没有被设置。如果你需要具体设置options的值，请参考完整的 <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<hr>\n<h1 id=\"计算日期间隔\"><a href=\"#计算日期间隔\" class=\"headerlink\" title=\"计算日期间隔\"></a>计算日期间隔</h1><p>通过date components来计算日期对象间隔。这个新方法叫 components:fromDate:toDate:options:,第一个参数是 NSCalendarUnit 值的数组。这里要注意，如果第一个日期如果晚于第二个日期，则结果会返回负值。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">var</span> diffFateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second], fromDate: date1, toDate: date14, options: NSCalendarOptions.init(rawValue: <span class=\"number\">0</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"The difference between dates is: \\(diffFateComponents.year) years, \\(diffFateComponents.month) months, \\(diffFateComponents.day) days, \\(diffFateComponents.hour) hours, \\(diffFateComponents.minute) minutes, \\(diffFateComponents.second) seconds\"</span>)</span></span></div><div class=\"line\"><span class=\"comment\">//\"The difference between dates is: 1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div><div class=\"line\"></div><div class=\"line\">let diffYear = diffFateComponents.year</div><div class=\"line\">let diffMonth = diffFateComponents.month</div><div class=\"line\">let diffDay = diffFateComponents.day</div><div class=\"line\">let diffHour = diffFateComponents.hour</div><div class=\"line\">let diffMinute = diffFateComponents.minute</div><div class=\"line\">let diffSecond = diffFateComponents.second</div></pre></td></tr></table></figure></p>\n<p>NSDateComponentsFormatter 类，它提供了多种用于自动计算日期间隔的方法，并可以返回格式化字符串结果。unitsStyle 属性指定我们使用的 dateComponentsFormatter 以何种格式打印日期的间隔。这里我们使用 完整 样式。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dateComponentsFormatter</span> = NSDateComponentsFormatter()</div><div class=\"line\">dateComponentsFormatter.<span class=\"attr\">unitsStyle</span> = NSDateComponentsFormatterUnitsStyle.Full</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">interval2</span> = date14.timeIntervalSinceDate(date1)</div><div class=\"line\">dateComponentsFormatter.stringFromTimeInterval(interval2)</div><div class=\"line\">//<span class=\"string\">\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>\n<p>最后，在第三种计算的方法中，我们将两个日期传递给 NSDateComponentsFormatter 对象的一个叫 stringFromDate:toDate: 的方法。但是这个方法需要有个前置的条件：NSDateComponentsFormatter 的 allowedUnits 属性必须被提前设置，这个属性接受数组类型的值，这里至少要设置一个日历单元的值。否则这个方法会返回nil值。所以，在这个方法的使用中，我们“告诉”它需要获取哪些日历单元，它会按照对应的日历单元返回结果：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dateComponentsFormatter<span class=\"selector-class\">.allowedUnits</span> = [NSCalendarUnit<span class=\"selector-class\">.Year</span>, NSCalendarUnit<span class=\"selector-class\">.Month</span>, NSCalendarUnit<span class=\"selector-class\">.Day</span>, NSCalendarUnit<span class=\"selector-class\">.Hour</span>, NSCalendarUnit<span class=\"selector-class\">.Minute</span>, NSCalendarUnit.Second]</div><div class=\"line\">let autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date14)</div><div class=\"line\"><span class=\"comment\">//\"1 years, 9 months, 5 days, 16 hours, 50 minutes, 42 seconds\"</span></div></pre></td></tr></table></figure></p>"},{"title":"不二医疗技术支持网址","date":"2020-03-14T06:37:34.000Z","_content":"\n提供APP技术支持，审核人员有问题可联系：  \n邮箱：565034021@qq.com  \n地址：中国河北省保定市北市区或竞秀区百花东路地勘院宿舍8-4-301。谢谢！！","source":"_posts/不二医疗/不二医疗技术支持网址.md","raw":"---\ntitle: 不二医疗技术支持网址\ndate: 2020-03-14 14:37:34\ntags: Other\n---\n\n提供APP技术支持，审核人员有问题可联系：  \n邮箱：565034021@qq.com  \n地址：中国河北省保定市北市区或竞秀区百花东路地勘院宿舍8-4-301。谢谢！！","slug":"不二医疗/不二医疗技术支持网址","published":1,"updated":"2020-05-06T06:01:34.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aon0007te03zgwvjbnv","content":"<p>提供APP技术支持，审核人员有问题可联系：<br>邮箱：565034021@qq.com<br>地址：中国河北省保定市北市区或竞秀区百花东路地勘院宿舍8-4-301。谢谢！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>提供APP技术支持，审核人员有问题可联系：<br>邮箱：565034021@qq.com<br>地址：中国河北省保定市北市区或竞秀区百花东路地勘院宿舍8-4-301。谢谢！！</p>\n"},{"title":"不二医疗隐私政策","date":"2020-03-14T06:07:21.000Z","_content":"\n一、适用范围\n1、本政策仅适用于不二医疗APP软件、以及APP运营主体，客户端的使用人在本政策中称为“用户”或“您”。  \n2、用户在使用客户端的各项服务前，仔细阅读并充分理解本隐私保护政策，您在点击“确认”按钮后，即构成对双方有约束力的法律文件，即表示您同意不二医疗按照本政策收集、使用、处理和存储您的相关信息。 如果您对本隐私政策有任何疑问、意见或建议，可通过留言反映具体情况。  \n3、不二医疗知晓个人信息对您的重要性，并会尽全力保护您的个人信息安全可靠，承诺：将按业界最成熟的安全标准，采取相应的安全保护措施来保护您的个人信息不被泄露。\n<!-- more -->\n二、隐私保护政策具体内容  \n1、当您注册、登录不二医疗客户端并使用客户端相关功能及相关服务时，需要通过手机号创建帐号，当您通过手机验证码的方式登录、注册时，您将授权我们获取您在第三方平台注册的公开信息（头像、昵称、地区、和性别信息），用于手机号的绑定，使您可以直接登录并使用本产品和相关服务。  \n2、您浏览的内容包括医院信息、科室信息、医生信息、评论、健康类文章、科普视频、养生保健类信息、上门护理类信息，为此，我们可能会收集您使用如设备型号、操作系统、运营商等软硬件信息，还可能收集您的浏览器类型，为您提供信息展示的最优方案。在您使用浏览功能的过程中，会自动收集您使用不二医疗客户端的详细情况，并作为有关的网络信息保存，包括您输入的搜索关键词信息和点击的链接，您浏览的内容及评论信息，访问日期和时间、网页记录、软件版本号、IP信息等。  \n3、您注册成为不二医疗的用户后，可以在问诊平台问诊，在问诊过程中，可能会开启手机拍摄、读取相册、录音、读取外部存储以及写入外部存储的有关权限，用于问诊过程中相关资料的传输及参考。同时在此过程中，我们可能会收集您的患者姓名、性别、年龄、症状及病史等信息，用于患者病情的诊断等。  \n4、在您使用注册会员过程中会需要进行支付。  \n5、我们会基于收集的信息，对您的偏好、习惯、位置作特征分析，以便为您提供更适合的定制化服务，例如向您展现或推荐相关程度更高的搜索结果，因此我们需要收集包括您的设备信息、浏览记录等。  \n6、我们致力于为您提供安全、可信的产品与使用环境，提供优质而可靠的服务，为实现安全保障功能所收集的信息是必要信息。  \n7、为了保障软件与服务的安全运行，我们可能会收集您的硬件型号、操作系统版本号、网络设备硬件地址、IP 地址、WLAN接入点、软件版本号、网络接入方式、类型、网络质量数据等。我们可能会使用您的账户信息、设备信息等，在获得您授权或依法可以共享的信息下，在关联公司或合作方的操作下用于判断账户安全、进行身份验证、检测及防范安全事件。\n\n三、我们不会向任何公司、组织和个人分享您的个人信息，但以下情况除外：  \n1、在获得您明确同意的情况下共享，我们会与第三方共享您的个人信息。  \n2、与授权合作伙伴共享，仅为实现本政策中声明的目的，我们可能会与合作伙伴共享或提供您的某些个人信息，以提供更好的客户服务和用户体验。我们仅会出于合法、正当、明确的目的共享您的个人信息，并且只会共享提供服务时所必要的个人信息。我们的合作伙伴无权将共享的个人信息用于任何其他用途。  \n3、我们不会将您的个人信息转让给任何公司、组织和个人， 除非在获取您明确同意的情况下转让。  \n4、我们仅会在以下情况下，公开披露您的个人信息：获得您明确同意后，在法律或政府主管部门强制性要求的情况下，我们可能会公开披露您的个人信息。\n\n四、发生个人信息泄露事件后，我们将按照法律法规的要求，及时通过推送方式、信函、电话等方式向您告知，造成的影响，我们将会采取相应的处置措施，您也可自主进行防范和降低风险的措施，对您进行补救等。难以逐个告知个人信息主体时，我们会采取合理、有效的方式发布公告，同时，我们还将按照监管部门要求，主动上报事件的处置情况。\n\n五、您的权利\\n按照相关的法律法规，我们保障您对自己的个人信息行使以下权利：  \n1：您有权访问您的个人信息  \n2：您有权更正您的个人信息  \n3：您有权删除及注销您的个人信息  \n我们会先要求您验证自己的身份，然后我们以最快的方式处理您的请求。\n\n六、 我们的产品及客户端的服务主要面向成年人，儿童不得创建自己的账户，我们只会在受到法律允许、父母或监护人明确同意或者保护儿童所必要的情况下使用或公开披露此信息，我们将不满15周岁的（含15周岁）均视为儿童。\n\n七、本政策的适用及更新\\n我们可能会不时对《不二医疗隐私政策》进行修订，隐私政策发生修订时，我们会在版本更新后以推送通知、弹窗等形式向您告知，但请您注意，只有在您确认修订后的《不二医疗客户端隐私政策》后，我们才会按照修订后的《不二医疗客户端隐私政策》收集、使用、处理和存储您的个人信息。您可以选择不同意修订后的《不二医疗客户端隐私政策》，但可能导致您无法使用不二医疗客户端的部分服务功能。  \n\n未经您同意，我们不会削减您按照本隐私政策所应享有的权利，对于重大变更，我们还会提供更为显著的通知。  \n\n如果您对本隐私政策有任何疑问、意见或建议，通过留言与我们联系。谢谢！","source":"_posts/不二医疗/不二医疗隐私政策.md","raw":"---\ntitle: 不二医疗隐私政策\ndate: 2020-03-14 14:07:21\ntags: Other\n---\n\n一、适用范围\n1、本政策仅适用于不二医疗APP软件、以及APP运营主体，客户端的使用人在本政策中称为“用户”或“您”。  \n2、用户在使用客户端的各项服务前，仔细阅读并充分理解本隐私保护政策，您在点击“确认”按钮后，即构成对双方有约束力的法律文件，即表示您同意不二医疗按照本政策收集、使用、处理和存储您的相关信息。 如果您对本隐私政策有任何疑问、意见或建议，可通过留言反映具体情况。  \n3、不二医疗知晓个人信息对您的重要性，并会尽全力保护您的个人信息安全可靠，承诺：将按业界最成熟的安全标准，采取相应的安全保护措施来保护您的个人信息不被泄露。\n<!-- more -->\n二、隐私保护政策具体内容  \n1、当您注册、登录不二医疗客户端并使用客户端相关功能及相关服务时，需要通过手机号创建帐号，当您通过手机验证码的方式登录、注册时，您将授权我们获取您在第三方平台注册的公开信息（头像、昵称、地区、和性别信息），用于手机号的绑定，使您可以直接登录并使用本产品和相关服务。  \n2、您浏览的内容包括医院信息、科室信息、医生信息、评论、健康类文章、科普视频、养生保健类信息、上门护理类信息，为此，我们可能会收集您使用如设备型号、操作系统、运营商等软硬件信息，还可能收集您的浏览器类型，为您提供信息展示的最优方案。在您使用浏览功能的过程中，会自动收集您使用不二医疗客户端的详细情况，并作为有关的网络信息保存，包括您输入的搜索关键词信息和点击的链接，您浏览的内容及评论信息，访问日期和时间、网页记录、软件版本号、IP信息等。  \n3、您注册成为不二医疗的用户后，可以在问诊平台问诊，在问诊过程中，可能会开启手机拍摄、读取相册、录音、读取外部存储以及写入外部存储的有关权限，用于问诊过程中相关资料的传输及参考。同时在此过程中，我们可能会收集您的患者姓名、性别、年龄、症状及病史等信息，用于患者病情的诊断等。  \n4、在您使用注册会员过程中会需要进行支付。  \n5、我们会基于收集的信息，对您的偏好、习惯、位置作特征分析，以便为您提供更适合的定制化服务，例如向您展现或推荐相关程度更高的搜索结果，因此我们需要收集包括您的设备信息、浏览记录等。  \n6、我们致力于为您提供安全、可信的产品与使用环境，提供优质而可靠的服务，为实现安全保障功能所收集的信息是必要信息。  \n7、为了保障软件与服务的安全运行，我们可能会收集您的硬件型号、操作系统版本号、网络设备硬件地址、IP 地址、WLAN接入点、软件版本号、网络接入方式、类型、网络质量数据等。我们可能会使用您的账户信息、设备信息等，在获得您授权或依法可以共享的信息下，在关联公司或合作方的操作下用于判断账户安全、进行身份验证、检测及防范安全事件。\n\n三、我们不会向任何公司、组织和个人分享您的个人信息，但以下情况除外：  \n1、在获得您明确同意的情况下共享，我们会与第三方共享您的个人信息。  \n2、与授权合作伙伴共享，仅为实现本政策中声明的目的，我们可能会与合作伙伴共享或提供您的某些个人信息，以提供更好的客户服务和用户体验。我们仅会出于合法、正当、明确的目的共享您的个人信息，并且只会共享提供服务时所必要的个人信息。我们的合作伙伴无权将共享的个人信息用于任何其他用途。  \n3、我们不会将您的个人信息转让给任何公司、组织和个人， 除非在获取您明确同意的情况下转让。  \n4、我们仅会在以下情况下，公开披露您的个人信息：获得您明确同意后，在法律或政府主管部门强制性要求的情况下，我们可能会公开披露您的个人信息。\n\n四、发生个人信息泄露事件后，我们将按照法律法规的要求，及时通过推送方式、信函、电话等方式向您告知，造成的影响，我们将会采取相应的处置措施，您也可自主进行防范和降低风险的措施，对您进行补救等。难以逐个告知个人信息主体时，我们会采取合理、有效的方式发布公告，同时，我们还将按照监管部门要求，主动上报事件的处置情况。\n\n五、您的权利\\n按照相关的法律法规，我们保障您对自己的个人信息行使以下权利：  \n1：您有权访问您的个人信息  \n2：您有权更正您的个人信息  \n3：您有权删除及注销您的个人信息  \n我们会先要求您验证自己的身份，然后我们以最快的方式处理您的请求。\n\n六、 我们的产品及客户端的服务主要面向成年人，儿童不得创建自己的账户，我们只会在受到法律允许、父母或监护人明确同意或者保护儿童所必要的情况下使用或公开披露此信息，我们将不满15周岁的（含15周岁）均视为儿童。\n\n七、本政策的适用及更新\\n我们可能会不时对《不二医疗隐私政策》进行修订，隐私政策发生修订时，我们会在版本更新后以推送通知、弹窗等形式向您告知，但请您注意，只有在您确认修订后的《不二医疗客户端隐私政策》后，我们才会按照修订后的《不二医疗客户端隐私政策》收集、使用、处理和存储您的个人信息。您可以选择不同意修订后的《不二医疗客户端隐私政策》，但可能导致您无法使用不二医疗客户端的部分服务功能。  \n\n未经您同意，我们不会削减您按照本隐私政策所应享有的权利，对于重大变更，我们还会提供更为显著的通知。  \n\n如果您对本隐私政策有任何疑问、意见或建议，通过留言与我们联系。谢谢！","slug":"不二医疗/不二医疗隐私政策","published":1,"updated":"2020-05-06T06:01:38.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aoq000ate036871f850","content":"<p>一、适用范围<br>1、本政策仅适用于不二医疗APP软件、以及APP运营主体，客户端的使用人在本政策中称为“用户”或“您”。<br>2、用户在使用客户端的各项服务前，仔细阅读并充分理解本隐私保护政策，您在点击“确认”按钮后，即构成对双方有约束力的法律文件，即表示您同意不二医疗按照本政策收集、使用、处理和存储您的相关信息。 如果您对本隐私政策有任何疑问、意见或建议，可通过留言反映具体情况。<br>3、不二医疗知晓个人信息对您的重要性，并会尽全力保护您的个人信息安全可靠，承诺：将按业界最成熟的安全标准，采取相应的安全保护措施来保护您的个人信息不被泄露。<br><a id=\"more\"></a><br>二、隐私保护政策具体内容<br>1、当您注册、登录不二医疗客户端并使用客户端相关功能及相关服务时，需要通过手机号创建帐号，当您通过手机验证码的方式登录、注册时，您将授权我们获取您在第三方平台注册的公开信息（头像、昵称、地区、和性别信息），用于手机号的绑定，使您可以直接登录并使用本产品和相关服务。<br>2、您浏览的内容包括医院信息、科室信息、医生信息、评论、健康类文章、科普视频、养生保健类信息、上门护理类信息，为此，我们可能会收集您使用如设备型号、操作系统、运营商等软硬件信息，还可能收集您的浏览器类型，为您提供信息展示的最优方案。在您使用浏览功能的过程中，会自动收集您使用不二医疗客户端的详细情况，并作为有关的网络信息保存，包括您输入的搜索关键词信息和点击的链接，您浏览的内容及评论信息，访问日期和时间、网页记录、软件版本号、IP信息等。<br>3、您注册成为不二医疗的用户后，可以在问诊平台问诊，在问诊过程中，可能会开启手机拍摄、读取相册、录音、读取外部存储以及写入外部存储的有关权限，用于问诊过程中相关资料的传输及参考。同时在此过程中，我们可能会收集您的患者姓名、性别、年龄、症状及病史等信息，用于患者病情的诊断等。<br>4、在您使用注册会员过程中会需要进行支付。<br>5、我们会基于收集的信息，对您的偏好、习惯、位置作特征分析，以便为您提供更适合的定制化服务，例如向您展现或推荐相关程度更高的搜索结果，因此我们需要收集包括您的设备信息、浏览记录等。<br>6、我们致力于为您提供安全、可信的产品与使用环境，提供优质而可靠的服务，为实现安全保障功能所收集的信息是必要信息。<br>7、为了保障软件与服务的安全运行，我们可能会收集您的硬件型号、操作系统版本号、网络设备硬件地址、IP 地址、WLAN接入点、软件版本号、网络接入方式、类型、网络质量数据等。我们可能会使用您的账户信息、设备信息等，在获得您授权或依法可以共享的信息下，在关联公司或合作方的操作下用于判断账户安全、进行身份验证、检测及防范安全事件。</p>\n<p>三、我们不会向任何公司、组织和个人分享您的个人信息，但以下情况除外：<br>1、在获得您明确同意的情况下共享，我们会与第三方共享您的个人信息。<br>2、与授权合作伙伴共享，仅为实现本政策中声明的目的，我们可能会与合作伙伴共享或提供您的某些个人信息，以提供更好的客户服务和用户体验。我们仅会出于合法、正当、明确的目的共享您的个人信息，并且只会共享提供服务时所必要的个人信息。我们的合作伙伴无权将共享的个人信息用于任何其他用途。<br>3、我们不会将您的个人信息转让给任何公司、组织和个人， 除非在获取您明确同意的情况下转让。<br>4、我们仅会在以下情况下，公开披露您的个人信息：获得您明确同意后，在法律或政府主管部门强制性要求的情况下，我们可能会公开披露您的个人信息。</p>\n<p>四、发生个人信息泄露事件后，我们将按照法律法规的要求，及时通过推送方式、信函、电话等方式向您告知，造成的影响，我们将会采取相应的处置措施，您也可自主进行防范和降低风险的措施，对您进行补救等。难以逐个告知个人信息主体时，我们会采取合理、有效的方式发布公告，同时，我们还将按照监管部门要求，主动上报事件的处置情况。</p>\n<p>五、您的权利\\n按照相关的法律法规，我们保障您对自己的个人信息行使以下权利：<br>1：您有权访问您的个人信息<br>2：您有权更正您的个人信息<br>3：您有权删除及注销您的个人信息<br>我们会先要求您验证自己的身份，然后我们以最快的方式处理您的请求。</p>\n<p>六、 我们的产品及客户端的服务主要面向成年人，儿童不得创建自己的账户，我们只会在受到法律允许、父母或监护人明确同意或者保护儿童所必要的情况下使用或公开披露此信息，我们将不满15周岁的（含15周岁）均视为儿童。</p>\n<p>七、本政策的适用及更新\\n我们可能会不时对《不二医疗隐私政策》进行修订，隐私政策发生修订时，我们会在版本更新后以推送通知、弹窗等形式向您告知，但请您注意，只有在您确认修订后的《不二医疗客户端隐私政策》后，我们才会按照修订后的《不二医疗客户端隐私政策》收集、使用、处理和存储您的个人信息。您可以选择不同意修订后的《不二医疗客户端隐私政策》，但可能导致您无法使用不二医疗客户端的部分服务功能。  </p>\n<p>未经您同意，我们不会削减您按照本隐私政策所应享有的权利，对于重大变更，我们还会提供更为显著的通知。  </p>\n<p>如果您对本隐私政策有任何疑问、意见或建议，通过留言与我们联系。谢谢！</p>\n","site":{"data":{}},"excerpt":"<p>一、适用范围<br>1、本政策仅适用于不二医疗APP软件、以及APP运营主体，客户端的使用人在本政策中称为“用户”或“您”。<br>2、用户在使用客户端的各项服务前，仔细阅读并充分理解本隐私保护政策，您在点击“确认”按钮后，即构成对双方有约束力的法律文件，即表示您同意不二医疗按照本政策收集、使用、处理和存储您的相关信息。 如果您对本隐私政策有任何疑问、意见或建议，可通过留言反映具体情况。<br>3、不二医疗知晓个人信息对您的重要性，并会尽全力保护您的个人信息安全可靠，承诺：将按业界最成熟的安全标准，采取相应的安全保护措施来保护您的个人信息不被泄露。<br></p>","more":"<br>二、隐私保护政策具体内容<br>1、当您注册、登录不二医疗客户端并使用客户端相关功能及相关服务时，需要通过手机号创建帐号，当您通过手机验证码的方式登录、注册时，您将授权我们获取您在第三方平台注册的公开信息（头像、昵称、地区、和性别信息），用于手机号的绑定，使您可以直接登录并使用本产品和相关服务。<br>2、您浏览的内容包括医院信息、科室信息、医生信息、评论、健康类文章、科普视频、养生保健类信息、上门护理类信息，为此，我们可能会收集您使用如设备型号、操作系统、运营商等软硬件信息，还可能收集您的浏览器类型，为您提供信息展示的最优方案。在您使用浏览功能的过程中，会自动收集您使用不二医疗客户端的详细情况，并作为有关的网络信息保存，包括您输入的搜索关键词信息和点击的链接，您浏览的内容及评论信息，访问日期和时间、网页记录、软件版本号、IP信息等。<br>3、您注册成为不二医疗的用户后，可以在问诊平台问诊，在问诊过程中，可能会开启手机拍摄、读取相册、录音、读取外部存储以及写入外部存储的有关权限，用于问诊过程中相关资料的传输及参考。同时在此过程中，我们可能会收集您的患者姓名、性别、年龄、症状及病史等信息，用于患者病情的诊断等。<br>4、在您使用注册会员过程中会需要进行支付。<br>5、我们会基于收集的信息，对您的偏好、习惯、位置作特征分析，以便为您提供更适合的定制化服务，例如向您展现或推荐相关程度更高的搜索结果，因此我们需要收集包括您的设备信息、浏览记录等。<br>6、我们致力于为您提供安全、可信的产品与使用环境，提供优质而可靠的服务，为实现安全保障功能所收集的信息是必要信息。<br>7、为了保障软件与服务的安全运行，我们可能会收集您的硬件型号、操作系统版本号、网络设备硬件地址、IP 地址、WLAN接入点、软件版本号、网络接入方式、类型、网络质量数据等。我们可能会使用您的账户信息、设备信息等，在获得您授权或依法可以共享的信息下，在关联公司或合作方的操作下用于判断账户安全、进行身份验证、检测及防范安全事件。<p></p>\n<p>三、我们不会向任何公司、组织和个人分享您的个人信息，但以下情况除外：<br>1、在获得您明确同意的情况下共享，我们会与第三方共享您的个人信息。<br>2、与授权合作伙伴共享，仅为实现本政策中声明的目的，我们可能会与合作伙伴共享或提供您的某些个人信息，以提供更好的客户服务和用户体验。我们仅会出于合法、正当、明确的目的共享您的个人信息，并且只会共享提供服务时所必要的个人信息。我们的合作伙伴无权将共享的个人信息用于任何其他用途。<br>3、我们不会将您的个人信息转让给任何公司、组织和个人， 除非在获取您明确同意的情况下转让。<br>4、我们仅会在以下情况下，公开披露您的个人信息：获得您明确同意后，在法律或政府主管部门强制性要求的情况下，我们可能会公开披露您的个人信息。</p>\n<p>四、发生个人信息泄露事件后，我们将按照法律法规的要求，及时通过推送方式、信函、电话等方式向您告知，造成的影响，我们将会采取相应的处置措施，您也可自主进行防范和降低风险的措施，对您进行补救等。难以逐个告知个人信息主体时，我们会采取合理、有效的方式发布公告，同时，我们还将按照监管部门要求，主动上报事件的处置情况。</p>\n<p>五、您的权利\\n按照相关的法律法规，我们保障您对自己的个人信息行使以下权利：<br>1：您有权访问您的个人信息<br>2：您有权更正您的个人信息<br>3：您有权删除及注销您的个人信息<br>我们会先要求您验证自己的身份，然后我们以最快的方式处理您的请求。</p>\n<p>六、 我们的产品及客户端的服务主要面向成年人，儿童不得创建自己的账户，我们只会在受到法律允许、父母或监护人明确同意或者保护儿童所必要的情况下使用或公开披露此信息，我们将不满15周岁的（含15周岁）均视为儿童。</p>\n<p>七、本政策的适用及更新\\n我们可能会不时对《不二医疗隐私政策》进行修订，隐私政策发生修订时，我们会在版本更新后以推送通知、弹窗等形式向您告知，但请您注意，只有在您确认修订后的《不二医疗客户端隐私政策》后，我们才会按照修订后的《不二医疗客户端隐私政策》收集、使用、处理和存储您的个人信息。您可以选择不同意修订后的《不二医疗客户端隐私政策》，但可能导致您无法使用不二医疗客户端的部分服务功能。  </p>\n<p>未经您同意，我们不会削减您按照本隐私政策所应享有的权利，对于重大变更，我们还会提供更为显著的通知。  </p>\n<p>如果您对本隐私政策有任何疑问、意见或建议，通过留言与我们联系。谢谢！</p>"},{"title":"Category 的实现原理","date":"2020-05-18T07:09:22.000Z","_content":"\n* Category 在编译完成后就变成了一个 _category_t 结构体，里面存储这分类的所有信息。\n* 在程序运行时通过 Runtime 加载所有 _category_t 的数据，把所有 _category_t 的数据（方法、属性、协议）合并到一个大数组中。\n* 合并时先扩充内存，然后将类对象里面的原有数据向后移动，再将分类数据（方法、属性、协议）插入到前排。\n* 靠后被编译到的 _category_t 数据（方法、属性、协议），因为在这个大数组的前排，所以会被优先调用到。  \n\n<!-- more -->\n\n\n# Category 的底层结构\n\n## 定义 Persion+Test\n```\n@interface Persion (Test)\n- (void)run;\n- (void)test;\n+ (void)test2;\n@end\n\n@implementation Persion (Test)\n- (void)run\n{\n    NSLog(@\"Person (Test) - run\");\n}\n- (void)test\n{\n    NSLog(@\"test\");\n}\n+ (void)test2\n{\n    \n}\n@end\n```\n\n## Persion+Test.cpp\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion+Test 的实现：\n```\n//_category_t 结构体\nstruct _category_t {\n\tconst char *name; //类名\n\tstruct _class_t *cls; //父类\n\tconst struct _method_list_t *instance_methods; //对象方法列表\n\tconst struct _method_list_t *class_methods; //类方法列表\n\tconst struct _protocol_list_t *protocols; //协议列表\n\tconst struct _prop_list_t *properties; //属性列表\n};\nextern \"C\" __declspec(dllimport) struct objc_cache _objc_empty_cache;\n#pragma warning(disable:4273)\n\n//Category 类对象的对象方法列表\nstatic struct /*_method_list_t*/ {\n\tunsigned int entsize;  // sizeof(struct _objc_method)\n\tunsigned int method_count;\n\tstruct _objc_method method_list[2];\n} _OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = {\n\tsizeof(_objc_method),\n\t2,\n\t{{(struct objc_selector *)\"run\", \"v16@0:8\", (void *)_I_Persion_Test_run},\n\t{(struct objc_selector *)\"test\", \"v16@0:8\", (void *)_I_Persion_Test_test}}\n};\n\n//Category 类对象的类方法列表\nstatic struct /*_method_list_t*/ {\n\tunsigned int entsize;  // sizeof(struct _objc_method)\n\tunsigned int method_count;\n\tstruct _objc_method method_list[1];\n} _OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = {\n\tsizeof(_objc_method),\n\t1,\n\t{{(struct objc_selector *)\"test2\", \"v16@0:8\", (void *)_C_Persion_Test_test2}}\n};\n\nextern \"C\" __declspec(dllimport) struct _class_t OBJC_CLASS_$_Persion;\n\n//Persion+Test 分类的结构体\nstatic struct _category_t _OBJC_$_CATEGORY_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = \n{\n\t\"Persion\", //类名\n\t0, // &OBJC_CLASS_$_Persion,\n\t(const struct _method_list_t *)&_OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test, //对象方法列表\n\t(const struct _method_list_t *)&_OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test, //类方法列表\n\t0, //协议列表\n\t0, //属性列表\n};\nstatic void OBJC_CATEGORY_SETUP_$_Persion_$_Test(void ) {\n\t_OBJC_$_CATEGORY_Persion_$_Test.cls = &OBJC_CLASS_$_Persion;\n}\n#pragma section(\".objc_inithooks$B\", long, read, write)\n__declspec(allocate(\".objc_inithooks$B\")) static void *OBJC_CATEGORY_SETUP[] = {\n\t(void *)&OBJC_CATEGORY_SETUP_$_Persion_$_Test,\n};\nstatic struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (\"__DATA, __objc_catlist,regular,no_dead_strip\")))= {\n\t&_OBJC_$_CATEGORY_Persion_$_Test,\n};\nstatic struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };\n```\n\n# Category 的加载处理过程\n\n打开 runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)。找到运行时入口 objc-os.mm 文件，打开文件找到运行时的初始化方法 void _objc_init(void) 方法：\n\n## _objc_init\n```\nvoid _objc_init(void)\n{\n    static bool initialized = false;\n    if (initialized) return;\n    initialized = true;\n    \n    // fixme defer initialization until an objc-using image is found?\n    environ_init(); //设置系统的环境变量\n    tls_init(); //线程相关的处理\n    static_init(); //运行C ++静态构造函数\n    runtime_init();\n    exception_init(); //注册异常的回调\n    cache_init();\n    _imp_implementationWithBlock_init();\n\n    _dyld_objc_notify_register(&map_images, load_images, unmap_image); //调用dyld的函数注册一个回调，并执行回调函数。\n\n#if __OBJC2__\n    didCallDyldNotifyRegister = true;\n#endif\n}\n```\n\n## map_images\nJump To Definition -> map_images:\n```\nvoid\nmap_images(unsigned count, const char * const paths[],\n           const struct mach_header * const mhdrs[])\n{\n    mutex_locker_t lock(runtimeLock);\n    return map_images_nolock(count, paths, mhdrs);\n}\n```\nmap_images 方法的主要作用是处理由dyld映射的镜像文件.  \n\n## map_images_nolock\nJump To Definition -> map_images_nolock：\n```\nvoid \nmap_images_nolock(unsigned mhCount, const char * const mhPaths[],\n                  const struct mach_header * const mhdrs[])\n{\n    ...\n\t...\n\t...//一堆方法\n\n    if (hCount > 0) {\n        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);\n    }\n\n    firstTime = NO;\n    \n    // Call image load funcs after everything is set up.\n    for (auto func : loadImageFuncs) {\n        for (uint32_t i = 0; i < mhCount; i++) {\n            func(mhdrs[i]);\n        }\n    }\n}\n```\n\n_read_images：images 是模块/镜像的意思。该方法是读取模块用的，比如读取类信息、分类信息等。  \n\n## _read_images\nJump To Definition -> _read_images：\n```\nvoid _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)\n{\n    ...\n\t...\n\t...//一堆方法\n\n    // Category discovery MUST BE Late to avoid potential races\n    // when other threads call the new category code before\n    // this thread finishes its fixups.\n\n    // +load handled by prepare_load_methods()\n\n    // Realize non-lazy classes (for +load methods and static instances)\n    for (EACH_HEADER) {\n        classref_t const *classlist = \n            _getObjc2NonlazyClassList(hi, &count); // 获取分类数组\n        for (i = 0; i < count; i++) {\n            Class cls = remapClass(classlist[i]); //通过 remapClass 获取类对应的指针\n            if (!cls) continue;\n\n            addClassTableEntry(cls);\n\n            if (cls->isSwiftStable()) {\n                if (cls->swiftMetadataInitializer()) {\n                    _objc_fatal(\"Swift class %s with a metadata initializer \"\n                                \"is not allowed to be non-lazy\",\n                                cls->nameForLogging());\n                }\n                // fixme also disallow relocatable classes\n                // We can't disallow all Swift classes because of\n                // classes like Swift.__EmptyArrayStorage\n            }\n            realizeClassWithoutSwift(cls, nil);\n        }\n    }\n\t\n\t...\n\t...\n\t...//一堆方法\n}\n```\n\n上面👆代码是 _read_images 处理 Category 的核心代码，首先通过 _getObjc2NonlazyClassList 方法获取 Category 数组，遍历 Category 数组通过 remapClass 获取分类对应的指针，作为参数调用 realizeClassWithoutSwift 方法。\n\n## realizeClassWithoutSwift\nJump To Definition -> realizeClassWithoutSwift：\n```\nstatic Class realizeClassWithoutSwift(Class cls, Class previously)\n{\n\t...\n\t...\n\t...//一堆方法\n\n    // Attach categories\n    methodizeClass(cls, previously);\n\n    return cls;\n}\n```\n\nrealizeClassWithoutSwift 方法内部进过一顿骚操作，最后调用 methodizeClass 方法开始加载分类信息。\n\nAttach categories：将分类信息附加到类对象里。  \n\n## methodizeClass\nJump To Definition -> methodizeClass：\n```\nstatic void methodizeClass(Class cls, Class previously)\n{\n    runtimeLock.assertLocked();\n\n    bool isMeta = cls->isMetaClass(); //是否是元类对象\n    auto rw = cls->data();\n    auto ro = rw->ro();\n    auto rwe = rw->ext();\n\n    // Methodizing for the first time\n    if (PrintConnecting) {\n        _objc_inform(\"CLASS: methodizing class '%s' %s\", \n                     cls->nameForLogging(), isMeta ? \"(meta)\" : \"\");\n    }\n\n    // Install methods and properties that the class implements itself.\n\t// 方法数组\n    method_list_t *list = ro->baseMethods();\n    if (list) {\n        prepareMethodLists(cls, &list, 1, YES, isBundleClass(cls));\n        if (rwe) rwe->methods.attachLists(&list, 1);\n    }\n\n\t// 属性数组\n    property_list_t *proplist = ro->baseProperties;\n    if (rwe && proplist) {\n        rwe->properties.attachLists(&proplist, 1);\n    }\n\n\t// 协议数组\n    protocol_list_t *protolist = ro->baseProtocols;\n    if (rwe && protolist) {\n        rwe->protocols.attachLists(&protolist, 1);\n    }\n\n    // Root classes get bonus method implementations if they don't have \n    // them already. These apply before category replacements.\n    if (cls->isRootMetaclass()) {\n        // root metaclass\n        addMethod(cls, @selector(initialize), (IMP)&objc_noop_imp, \"\", NO);\n    }\n\t\n\t// 添加分类方法\n    // Attach categories.\n    if (previously) {\n        if (isMeta) {\n            objc::unattachedCategories.attachToClass(cls, previously,\n                                                     ATTACH_METACLASS);\n        } else {\n            // When a class relocates, categories with class methods\n            // may be registered on the class itself rather than on\n            // the metaclass. Tell attachToClass to look for those.\n            objc::unattachedCategories.attachToClass(cls, previously,\n                                                     ATTACH_CLASS_AND_METACLASS);\n        }\n    }\n    objc::unattachedCategories.attachToClass(cls, cls,\n                                             isMeta ? ATTACH_METACLASS : ATTACH_CLASS);\n\n#if DEBUG\n    // Debug: sanity-check all SELs; log method list contents\n    for (const auto& meth : rw->methods()) {\n        if (PrintConnecting) {\n            _objc_inform(\"METHOD %c[%s %s]\", isMeta ? '+' : '-', \n                         cls->nameForLogging(), sel_getName(meth.name));\n        }\n        ASSERT(sel_registerName(sel_getName(meth.name)) == meth.name); \n    }\n#endif\n}\n```\nInstall methods and properties that the class implements itself. 可以看出该方法是在加载类对象自己内部的信息。分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将信息添加到类对象里。\n\n## attachToClass\nJump To Definition -> attachToClass:\n```\nvoid attachToClass(Class cls, Class previously, int flags)\n    {\n        runtimeLock.assertLocked();\n        ASSERT((flags & ATTACH_CLASS) ||\n               (flags & ATTACH_METACLASS) ||\n               (flags & ATTACH_CLASS_AND_METACLASS));\n\n        auto &map = get();\n        auto it = map.find(previously);\n\n        if (it != map.end()) {\n            category_list &list = it->second;\n            if (flags & ATTACH_CLASS_AND_METACLASS) {\n                int otherFlags = flags & ~ATTACH_CLASS_AND_METACLASS;\n                attachCategories(cls, list.array(), list.count(), otherFlags | ATTACH_CLASS);\n                attachCategories(cls->ISA(), list.array(), list.count(), otherFlags | ATTACH_METACLASS);\n            } else {\n                attachCategories(cls, list.array(), list.count(), flags);\n            }\n            map.erase(it);\n        }\n    }\n```\n\n## attachCategories\nJump To Definition -> attachCategories:\n```\nstatic void\nattachCategories(Class cls, const locstamped_category_t *cats_list, uint32_t cats_count,\n                 int flags)\n{\n    if (slowpath(PrintReplacedMethods)) {\n        printReplacements(cls, cats_list, cats_count);\n    }\n    if (slowpath(PrintConnecting)) {\n        _objc_inform(\"CLASS: attaching %d categories to%s class '%s'%s\",\n                     cats_count, (flags & ATTACH_EXISTING) ? \" existing\" : \"\",\n                     cls->nameForLogging(), (flags & ATTACH_METACLASS) ? \" (meta)\" : \"\");\n    }\n\n    /*\n     * Only a few classes have more than 64 categories during launch.\n     * This uses a little stack, and avoids malloc.\n     *\n     * Categories must be added in the proper order, which is back\n     * to front. To do that with the chunking, we iterate cats_list\n     * from front to back, build up the local buffers backwards,\n     * and call attachLists on the chunks. attachLists prepends the\n     * lists, so the final result is in the expected order.\n     */\n    constexpr uint32_t ATTACH_BUFSIZ = 64;\n    method_list_t   *mlists[ATTACH_BUFSIZ];\n    property_list_t *proplists[ATTACH_BUFSIZ];\n    protocol_list_t *protolists[ATTACH_BUFSIZ];\n\n    uint32_t mcount = 0;\n    uint32_t propcount = 0;\n    uint32_t protocount = 0;\n    bool fromBundle = NO;\n    bool isMeta = (flags & ATTACH_METACLASS);\n    auto rwe = cls->data()->extAllocIfNeeded();\n\n    for (uint32_t i = 0; i < cats_count; i++) {\n\t\t\n\t\t// 取出某个分类 entry 是 category_t 类型\n        auto& entry = cats_list[i];\n\t\t\n\t\t// 方法数组\n        method_list_t *mlist = entry.cat->methodsForMeta(isMeta);\n        if (mlist) {\n            if (mcount == ATTACH_BUFSIZ) {\n                prepareMethodLists(cls, mlists, mcount, NO, fromBundle);\n                rwe->methods.attachLists(mlists, mcount);\n                mcount = 0;\n            }\n            mlists[ATTACH_BUFSIZ - ++mcount] = mlist;\n            fromBundle |= entry.hi->isBundle();\n        }\n\n\t\t//属性数组\n        property_list_t *proplist =\n            entry.cat->propertiesForMeta(isMeta, entry.hi);\n        if (proplist) {\n            if (propcount == ATTACH_BUFSIZ) {\n                rwe->properties.attachLists(proplists, propcount);\n                propcount = 0;\n            }\n            proplists[ATTACH_BUFSIZ - ++propcount] = proplist;\n        }\n\n\t\t// 协议数组\n        protocol_list_t *protolist = entry.cat->protocolsForMeta(isMeta);\n        if (protolist) {\n            if (protocount == ATTACH_BUFSIZ) {\n                rwe->protocols.attachLists(protolists, protocount);\n                protocount = 0;\n            }\n            protolists[ATTACH_BUFSIZ - ++protocount] = protolist;\n        }\n    }\n\n    if (mcount > 0) {\n        prepareMethodLists(cls, mlists + ATTACH_BUFSIZ - mcount, mcount, NO, fromBundle);\n        rwe->methods.attachLists(mlists + ATTACH_BUFSIZ - mcount, mcount);\n        if (flags & ATTACH_EXISTING) flushCaches(cls);\n    }\n\n    rwe->properties.attachLists(proplists + ATTACH_BUFSIZ - propcount, propcount);\n\n    rwe->protocols.attachLists(protolists + ATTACH_BUFSIZ - protocount, protocount);\n}\n```\n\n分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将分类信息添加到原类对象里。\n\n## attachLists\nJump To Definition -> attachLists:\n```\nvoid attachLists(List* const * addedLists, uint32_t addedCount) {\n        if (addedCount == 0) return;\n\n        if (hasArray()) {\n            // many lists -> many lists\n            uint32_t oldCount = array()->count; // 原内存空间大小\n            uint32_t newCount = oldCount + addedCount; // 新内存空间大小\n            setArray((array_t *)realloc(array(), array_t::byteSize(newCount))); // 重新分配内存空间\n            array()->count = newCount;\n            memmove(array()->lists + addedCount, array()->lists, \n                    oldCount * sizeof(array()->lists[0])); // 调整内存格式\n            memcpy(array()->lists, addedLists, \n                   addedCount * sizeof(array()->lists[0])); // 拷贝分类信息\n        }\n        else if (!list  &&  addedCount == 1) {\n            // 0 lists -> 1 list\n            list = addedLists[0];\n        } \n        else {\n            // 1 list -> many lists\n            List* oldList = list;\n            uint32_t oldCount = oldList ? 1 : 0;\n            uint32_t newCount = oldCount + addedCount;\n            setArray((array_t *)malloc(array_t::byteSize(newCount)));\n            array()->count = newCount;\n            if (oldList) array()->lists[addedCount] = oldList;\n            memcpy(array()->lists, addedLists, \n                   addedCount * sizeof(array()->lists[0]));\n        }\n    }\n```\n\n## realloc、memmove、memcpy\nattachLists 方法内部\n1.通过参数 addedCount 确定需要增加的内存空间 newCount，然后通过 realloc 方法重新分配空间。  \n2.空间增加后，通过 memmove 方法将类对象里的信息往后移动 addedCount 距离，把前排 addedCount 大小的空间空出来留给将要添加进来的分类信息。  \n![Category的实现原理01](Category的实现原理/Category的实现原理02.png)\n\n3.类对象的前排空间空出来后，再通过 memcpy 方法将分类信息拷贝到该空间里。\n![Category的实现原理01](Category的实现原理/Category的实现原理03.png)\n\n## Category 的编译顺序\n原文件 Persion.m 最先编译，之后添加的分类按照添加顺序，优先编译后来添加的分类。添加顺序：\n![Category的实现原理01](Category的实现原理/Category的实现原理01.png)\n\n如图编译顺序为 Persion.m -> Persion+Test.m -> Persion+Demo.m。如果 Persion.m、Persion+Test.m、Persion+Demo.m 中有相同的方法，后编译的类中的方法会优先于先编译的类中的方法（不是覆盖，只是优先被查询到）。\n\n调用日志：\n![Category的实现原理01](Category的实现原理/Category的实现原理04.png)\n\n可以看到 Persion.m 被优先编译，其次是后来添加的 Persion+Test.m，第三个编译的是 最后添加的 Persion+Demo.m。添加顺序决定编译顺序只对分类有效，Persion.m 一定是最先编译的，这一点通过 methodizeClass 方法也能看出来，先处理类对象，再处理分类。\n\n# Class Extension 的实现原理\n\n## 定义 Persion()\n```\n@interface Persion : NSObject\n@property (nonatomic, copy) NSString *categoryTest1;\n- (void)run;\n- (void)test;\n+ (void)test2;\n@end\n\n@interface Persion()\n@property (nonatomic, copy) NSString *categoryTest2;\n@end\n\n@implementation Persion\n- (void)run\n{\n    NSLog(@\"Person - run\");\n}\n- (void)test\n{\n    NSLog(@\"test\");\n}\n+ (void)test2\n{\n    \n}\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion 的实现：\n```\nextern \"C\" unsigned long OBJC_IVAR_$_Persion$_categoryTest1;\nextern \"C\" unsigned long OBJC_IVAR_$_Persion$_categoryTest2;\nstruct Persion_IMPL {\n\tstruct NSObject_IMPL NSObject_IVARS;\n\tNSString * _Nonnull _categoryTest1;\n\tNSString *_categoryTest2;\n};\n```\n\n上面👆这块代码可以看到，在 Persion() 中定义的 categoryTest2 已经包含在类 Persion 类对象的结构体里面了。可以证明 Class Extension 在编译的时候，它的数据就已经包含在类信息中了。从实现上来看，Class Extension 不应该叫做匿名分类，叫类扩展更适合。\n\n## 小结\n* 运行时入口 objc-os.mm，初始化方法 void _objc_init(void) 方法。\n\n* objc4 的代码虽然改了，但是实现原理还是没变。\n\n* Category 的实现原理  \nCategory 编译之后的底层结构是 struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息，在程序运行的时候，runtime 会将 Category 的数据，合并到类信息中（类对象、元类对象中）。\n\n* Category 和 Class Extension 的区别是什么？  \nClass Extension 在编译的时候，它的数据就已经包含在类信息中。Category 是在运行时，才会将数据合并到类信息中。\n","source":"_posts/OC底层/原理/Category的实现原理.md","raw":"---\ntitle: Category 的实现原理\ndate: 2020-05-18 15:09:22\ntags: OC底层原理\n---\n\n* Category 在编译完成后就变成了一个 _category_t 结构体，里面存储这分类的所有信息。\n* 在程序运行时通过 Runtime 加载所有 _category_t 的数据，把所有 _category_t 的数据（方法、属性、协议）合并到一个大数组中。\n* 合并时先扩充内存，然后将类对象里面的原有数据向后移动，再将分类数据（方法、属性、协议）插入到前排。\n* 靠后被编译到的 _category_t 数据（方法、属性、协议），因为在这个大数组的前排，所以会被优先调用到。  \n\n<!-- more -->\n\n\n# Category 的底层结构\n\n## 定义 Persion+Test\n```\n@interface Persion (Test)\n- (void)run;\n- (void)test;\n+ (void)test2;\n@end\n\n@implementation Persion (Test)\n- (void)run\n{\n    NSLog(@\"Person (Test) - run\");\n}\n- (void)test\n{\n    NSLog(@\"test\");\n}\n+ (void)test2\n{\n    \n}\n@end\n```\n\n## Persion+Test.cpp\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion+Test 的实现：\n```\n//_category_t 结构体\nstruct _category_t {\n\tconst char *name; //类名\n\tstruct _class_t *cls; //父类\n\tconst struct _method_list_t *instance_methods; //对象方法列表\n\tconst struct _method_list_t *class_methods; //类方法列表\n\tconst struct _protocol_list_t *protocols; //协议列表\n\tconst struct _prop_list_t *properties; //属性列表\n};\nextern \"C\" __declspec(dllimport) struct objc_cache _objc_empty_cache;\n#pragma warning(disable:4273)\n\n//Category 类对象的对象方法列表\nstatic struct /*_method_list_t*/ {\n\tunsigned int entsize;  // sizeof(struct _objc_method)\n\tunsigned int method_count;\n\tstruct _objc_method method_list[2];\n} _OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = {\n\tsizeof(_objc_method),\n\t2,\n\t{{(struct objc_selector *)\"run\", \"v16@0:8\", (void *)_I_Persion_Test_run},\n\t{(struct objc_selector *)\"test\", \"v16@0:8\", (void *)_I_Persion_Test_test}}\n};\n\n//Category 类对象的类方法列表\nstatic struct /*_method_list_t*/ {\n\tunsigned int entsize;  // sizeof(struct _objc_method)\n\tunsigned int method_count;\n\tstruct _objc_method method_list[1];\n} _OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = {\n\tsizeof(_objc_method),\n\t1,\n\t{{(struct objc_selector *)\"test2\", \"v16@0:8\", (void *)_C_Persion_Test_test2}}\n};\n\nextern \"C\" __declspec(dllimport) struct _class_t OBJC_CLASS_$_Persion;\n\n//Persion+Test 分类的结构体\nstatic struct _category_t _OBJC_$_CATEGORY_Persion_$_Test __attribute__ ((used, section (\"__DATA,__objc_const\"))) = \n{\n\t\"Persion\", //类名\n\t0, // &OBJC_CLASS_$_Persion,\n\t(const struct _method_list_t *)&_OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test, //对象方法列表\n\t(const struct _method_list_t *)&_OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test, //类方法列表\n\t0, //协议列表\n\t0, //属性列表\n};\nstatic void OBJC_CATEGORY_SETUP_$_Persion_$_Test(void ) {\n\t_OBJC_$_CATEGORY_Persion_$_Test.cls = &OBJC_CLASS_$_Persion;\n}\n#pragma section(\".objc_inithooks$B\", long, read, write)\n__declspec(allocate(\".objc_inithooks$B\")) static void *OBJC_CATEGORY_SETUP[] = {\n\t(void *)&OBJC_CATEGORY_SETUP_$_Persion_$_Test,\n};\nstatic struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (\"__DATA, __objc_catlist,regular,no_dead_strip\")))= {\n\t&_OBJC_$_CATEGORY_Persion_$_Test,\n};\nstatic struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };\n```\n\n# Category 的加载处理过程\n\n打开 runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)。找到运行时入口 objc-os.mm 文件，打开文件找到运行时的初始化方法 void _objc_init(void) 方法：\n\n## _objc_init\n```\nvoid _objc_init(void)\n{\n    static bool initialized = false;\n    if (initialized) return;\n    initialized = true;\n    \n    // fixme defer initialization until an objc-using image is found?\n    environ_init(); //设置系统的环境变量\n    tls_init(); //线程相关的处理\n    static_init(); //运行C ++静态构造函数\n    runtime_init();\n    exception_init(); //注册异常的回调\n    cache_init();\n    _imp_implementationWithBlock_init();\n\n    _dyld_objc_notify_register(&map_images, load_images, unmap_image); //调用dyld的函数注册一个回调，并执行回调函数。\n\n#if __OBJC2__\n    didCallDyldNotifyRegister = true;\n#endif\n}\n```\n\n## map_images\nJump To Definition -> map_images:\n```\nvoid\nmap_images(unsigned count, const char * const paths[],\n           const struct mach_header * const mhdrs[])\n{\n    mutex_locker_t lock(runtimeLock);\n    return map_images_nolock(count, paths, mhdrs);\n}\n```\nmap_images 方法的主要作用是处理由dyld映射的镜像文件.  \n\n## map_images_nolock\nJump To Definition -> map_images_nolock：\n```\nvoid \nmap_images_nolock(unsigned mhCount, const char * const mhPaths[],\n                  const struct mach_header * const mhdrs[])\n{\n    ...\n\t...\n\t...//一堆方法\n\n    if (hCount > 0) {\n        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);\n    }\n\n    firstTime = NO;\n    \n    // Call image load funcs after everything is set up.\n    for (auto func : loadImageFuncs) {\n        for (uint32_t i = 0; i < mhCount; i++) {\n            func(mhdrs[i]);\n        }\n    }\n}\n```\n\n_read_images：images 是模块/镜像的意思。该方法是读取模块用的，比如读取类信息、分类信息等。  \n\n## _read_images\nJump To Definition -> _read_images：\n```\nvoid _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)\n{\n    ...\n\t...\n\t...//一堆方法\n\n    // Category discovery MUST BE Late to avoid potential races\n    // when other threads call the new category code before\n    // this thread finishes its fixups.\n\n    // +load handled by prepare_load_methods()\n\n    // Realize non-lazy classes (for +load methods and static instances)\n    for (EACH_HEADER) {\n        classref_t const *classlist = \n            _getObjc2NonlazyClassList(hi, &count); // 获取分类数组\n        for (i = 0; i < count; i++) {\n            Class cls = remapClass(classlist[i]); //通过 remapClass 获取类对应的指针\n            if (!cls) continue;\n\n            addClassTableEntry(cls);\n\n            if (cls->isSwiftStable()) {\n                if (cls->swiftMetadataInitializer()) {\n                    _objc_fatal(\"Swift class %s with a metadata initializer \"\n                                \"is not allowed to be non-lazy\",\n                                cls->nameForLogging());\n                }\n                // fixme also disallow relocatable classes\n                // We can't disallow all Swift classes because of\n                // classes like Swift.__EmptyArrayStorage\n            }\n            realizeClassWithoutSwift(cls, nil);\n        }\n    }\n\t\n\t...\n\t...\n\t...//一堆方法\n}\n```\n\n上面👆代码是 _read_images 处理 Category 的核心代码，首先通过 _getObjc2NonlazyClassList 方法获取 Category 数组，遍历 Category 数组通过 remapClass 获取分类对应的指针，作为参数调用 realizeClassWithoutSwift 方法。\n\n## realizeClassWithoutSwift\nJump To Definition -> realizeClassWithoutSwift：\n```\nstatic Class realizeClassWithoutSwift(Class cls, Class previously)\n{\n\t...\n\t...\n\t...//一堆方法\n\n    // Attach categories\n    methodizeClass(cls, previously);\n\n    return cls;\n}\n```\n\nrealizeClassWithoutSwift 方法内部进过一顿骚操作，最后调用 methodizeClass 方法开始加载分类信息。\n\nAttach categories：将分类信息附加到类对象里。  \n\n## methodizeClass\nJump To Definition -> methodizeClass：\n```\nstatic void methodizeClass(Class cls, Class previously)\n{\n    runtimeLock.assertLocked();\n\n    bool isMeta = cls->isMetaClass(); //是否是元类对象\n    auto rw = cls->data();\n    auto ro = rw->ro();\n    auto rwe = rw->ext();\n\n    // Methodizing for the first time\n    if (PrintConnecting) {\n        _objc_inform(\"CLASS: methodizing class '%s' %s\", \n                     cls->nameForLogging(), isMeta ? \"(meta)\" : \"\");\n    }\n\n    // Install methods and properties that the class implements itself.\n\t// 方法数组\n    method_list_t *list = ro->baseMethods();\n    if (list) {\n        prepareMethodLists(cls, &list, 1, YES, isBundleClass(cls));\n        if (rwe) rwe->methods.attachLists(&list, 1);\n    }\n\n\t// 属性数组\n    property_list_t *proplist = ro->baseProperties;\n    if (rwe && proplist) {\n        rwe->properties.attachLists(&proplist, 1);\n    }\n\n\t// 协议数组\n    protocol_list_t *protolist = ro->baseProtocols;\n    if (rwe && protolist) {\n        rwe->protocols.attachLists(&protolist, 1);\n    }\n\n    // Root classes get bonus method implementations if they don't have \n    // them already. These apply before category replacements.\n    if (cls->isRootMetaclass()) {\n        // root metaclass\n        addMethod(cls, @selector(initialize), (IMP)&objc_noop_imp, \"\", NO);\n    }\n\t\n\t// 添加分类方法\n    // Attach categories.\n    if (previously) {\n        if (isMeta) {\n            objc::unattachedCategories.attachToClass(cls, previously,\n                                                     ATTACH_METACLASS);\n        } else {\n            // When a class relocates, categories with class methods\n            // may be registered on the class itself rather than on\n            // the metaclass. Tell attachToClass to look for those.\n            objc::unattachedCategories.attachToClass(cls, previously,\n                                                     ATTACH_CLASS_AND_METACLASS);\n        }\n    }\n    objc::unattachedCategories.attachToClass(cls, cls,\n                                             isMeta ? ATTACH_METACLASS : ATTACH_CLASS);\n\n#if DEBUG\n    // Debug: sanity-check all SELs; log method list contents\n    for (const auto& meth : rw->methods()) {\n        if (PrintConnecting) {\n            _objc_inform(\"METHOD %c[%s %s]\", isMeta ? '+' : '-', \n                         cls->nameForLogging(), sel_getName(meth.name));\n        }\n        ASSERT(sel_registerName(sel_getName(meth.name)) == meth.name); \n    }\n#endif\n}\n```\nInstall methods and properties that the class implements itself. 可以看出该方法是在加载类对象自己内部的信息。分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将信息添加到类对象里。\n\n## attachToClass\nJump To Definition -> attachToClass:\n```\nvoid attachToClass(Class cls, Class previously, int flags)\n    {\n        runtimeLock.assertLocked();\n        ASSERT((flags & ATTACH_CLASS) ||\n               (flags & ATTACH_METACLASS) ||\n               (flags & ATTACH_CLASS_AND_METACLASS));\n\n        auto &map = get();\n        auto it = map.find(previously);\n\n        if (it != map.end()) {\n            category_list &list = it->second;\n            if (flags & ATTACH_CLASS_AND_METACLASS) {\n                int otherFlags = flags & ~ATTACH_CLASS_AND_METACLASS;\n                attachCategories(cls, list.array(), list.count(), otherFlags | ATTACH_CLASS);\n                attachCategories(cls->ISA(), list.array(), list.count(), otherFlags | ATTACH_METACLASS);\n            } else {\n                attachCategories(cls, list.array(), list.count(), flags);\n            }\n            map.erase(it);\n        }\n    }\n```\n\n## attachCategories\nJump To Definition -> attachCategories:\n```\nstatic void\nattachCategories(Class cls, const locstamped_category_t *cats_list, uint32_t cats_count,\n                 int flags)\n{\n    if (slowpath(PrintReplacedMethods)) {\n        printReplacements(cls, cats_list, cats_count);\n    }\n    if (slowpath(PrintConnecting)) {\n        _objc_inform(\"CLASS: attaching %d categories to%s class '%s'%s\",\n                     cats_count, (flags & ATTACH_EXISTING) ? \" existing\" : \"\",\n                     cls->nameForLogging(), (flags & ATTACH_METACLASS) ? \" (meta)\" : \"\");\n    }\n\n    /*\n     * Only a few classes have more than 64 categories during launch.\n     * This uses a little stack, and avoids malloc.\n     *\n     * Categories must be added in the proper order, which is back\n     * to front. To do that with the chunking, we iterate cats_list\n     * from front to back, build up the local buffers backwards,\n     * and call attachLists on the chunks. attachLists prepends the\n     * lists, so the final result is in the expected order.\n     */\n    constexpr uint32_t ATTACH_BUFSIZ = 64;\n    method_list_t   *mlists[ATTACH_BUFSIZ];\n    property_list_t *proplists[ATTACH_BUFSIZ];\n    protocol_list_t *protolists[ATTACH_BUFSIZ];\n\n    uint32_t mcount = 0;\n    uint32_t propcount = 0;\n    uint32_t protocount = 0;\n    bool fromBundle = NO;\n    bool isMeta = (flags & ATTACH_METACLASS);\n    auto rwe = cls->data()->extAllocIfNeeded();\n\n    for (uint32_t i = 0; i < cats_count; i++) {\n\t\t\n\t\t// 取出某个分类 entry 是 category_t 类型\n        auto& entry = cats_list[i];\n\t\t\n\t\t// 方法数组\n        method_list_t *mlist = entry.cat->methodsForMeta(isMeta);\n        if (mlist) {\n            if (mcount == ATTACH_BUFSIZ) {\n                prepareMethodLists(cls, mlists, mcount, NO, fromBundle);\n                rwe->methods.attachLists(mlists, mcount);\n                mcount = 0;\n            }\n            mlists[ATTACH_BUFSIZ - ++mcount] = mlist;\n            fromBundle |= entry.hi->isBundle();\n        }\n\n\t\t//属性数组\n        property_list_t *proplist =\n            entry.cat->propertiesForMeta(isMeta, entry.hi);\n        if (proplist) {\n            if (propcount == ATTACH_BUFSIZ) {\n                rwe->properties.attachLists(proplists, propcount);\n                propcount = 0;\n            }\n            proplists[ATTACH_BUFSIZ - ++propcount] = proplist;\n        }\n\n\t\t// 协议数组\n        protocol_list_t *protolist = entry.cat->protocolsForMeta(isMeta);\n        if (protolist) {\n            if (protocount == ATTACH_BUFSIZ) {\n                rwe->protocols.attachLists(protolists, protocount);\n                protocount = 0;\n            }\n            protolists[ATTACH_BUFSIZ - ++protocount] = protolist;\n        }\n    }\n\n    if (mcount > 0) {\n        prepareMethodLists(cls, mlists + ATTACH_BUFSIZ - mcount, mcount, NO, fromBundle);\n        rwe->methods.attachLists(mlists + ATTACH_BUFSIZ - mcount, mcount);\n        if (flags & ATTACH_EXISTING) flushCaches(cls);\n    }\n\n    rwe->properties.attachLists(proplists + ATTACH_BUFSIZ - propcount, propcount);\n\n    rwe->protocols.attachLists(protolists + ATTACH_BUFSIZ - protocount, protocount);\n}\n```\n\n分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将分类信息添加到原类对象里。\n\n## attachLists\nJump To Definition -> attachLists:\n```\nvoid attachLists(List* const * addedLists, uint32_t addedCount) {\n        if (addedCount == 0) return;\n\n        if (hasArray()) {\n            // many lists -> many lists\n            uint32_t oldCount = array()->count; // 原内存空间大小\n            uint32_t newCount = oldCount + addedCount; // 新内存空间大小\n            setArray((array_t *)realloc(array(), array_t::byteSize(newCount))); // 重新分配内存空间\n            array()->count = newCount;\n            memmove(array()->lists + addedCount, array()->lists, \n                    oldCount * sizeof(array()->lists[0])); // 调整内存格式\n            memcpy(array()->lists, addedLists, \n                   addedCount * sizeof(array()->lists[0])); // 拷贝分类信息\n        }\n        else if (!list  &&  addedCount == 1) {\n            // 0 lists -> 1 list\n            list = addedLists[0];\n        } \n        else {\n            // 1 list -> many lists\n            List* oldList = list;\n            uint32_t oldCount = oldList ? 1 : 0;\n            uint32_t newCount = oldCount + addedCount;\n            setArray((array_t *)malloc(array_t::byteSize(newCount)));\n            array()->count = newCount;\n            if (oldList) array()->lists[addedCount] = oldList;\n            memcpy(array()->lists, addedLists, \n                   addedCount * sizeof(array()->lists[0]));\n        }\n    }\n```\n\n## realloc、memmove、memcpy\nattachLists 方法内部\n1.通过参数 addedCount 确定需要增加的内存空间 newCount，然后通过 realloc 方法重新分配空间。  \n2.空间增加后，通过 memmove 方法将类对象里的信息往后移动 addedCount 距离，把前排 addedCount 大小的空间空出来留给将要添加进来的分类信息。  \n![Category的实现原理01](Category的实现原理/Category的实现原理02.png)\n\n3.类对象的前排空间空出来后，再通过 memcpy 方法将分类信息拷贝到该空间里。\n![Category的实现原理01](Category的实现原理/Category的实现原理03.png)\n\n## Category 的编译顺序\n原文件 Persion.m 最先编译，之后添加的分类按照添加顺序，优先编译后来添加的分类。添加顺序：\n![Category的实现原理01](Category的实现原理/Category的实现原理01.png)\n\n如图编译顺序为 Persion.m -> Persion+Test.m -> Persion+Demo.m。如果 Persion.m、Persion+Test.m、Persion+Demo.m 中有相同的方法，后编译的类中的方法会优先于先编译的类中的方法（不是覆盖，只是优先被查询到）。\n\n调用日志：\n![Category的实现原理01](Category的实现原理/Category的实现原理04.png)\n\n可以看到 Persion.m 被优先编译，其次是后来添加的 Persion+Test.m，第三个编译的是 最后添加的 Persion+Demo.m。添加顺序决定编译顺序只对分类有效，Persion.m 一定是最先编译的，这一点通过 methodizeClass 方法也能看出来，先处理类对象，再处理分类。\n\n# Class Extension 的实现原理\n\n## 定义 Persion()\n```\n@interface Persion : NSObject\n@property (nonatomic, copy) NSString *categoryTest1;\n- (void)run;\n- (void)test;\n+ (void)test2;\n@end\n\n@interface Persion()\n@property (nonatomic, copy) NSString *categoryTest2;\n@end\n\n@implementation Persion\n- (void)run\n{\n    NSLog(@\"Person - run\");\n}\n- (void)test\n{\n    NSLog(@\"test\");\n}\n+ (void)test2\n{\n    \n}\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion 的实现：\n```\nextern \"C\" unsigned long OBJC_IVAR_$_Persion$_categoryTest1;\nextern \"C\" unsigned long OBJC_IVAR_$_Persion$_categoryTest2;\nstruct Persion_IMPL {\n\tstruct NSObject_IMPL NSObject_IVARS;\n\tNSString * _Nonnull _categoryTest1;\n\tNSString *_categoryTest2;\n};\n```\n\n上面👆这块代码可以看到，在 Persion() 中定义的 categoryTest2 已经包含在类 Persion 类对象的结构体里面了。可以证明 Class Extension 在编译的时候，它的数据就已经包含在类信息中了。从实现上来看，Class Extension 不应该叫做匿名分类，叫类扩展更适合。\n\n## 小结\n* 运行时入口 objc-os.mm，初始化方法 void _objc_init(void) 方法。\n\n* objc4 的代码虽然改了，但是实现原理还是没变。\n\n* Category 的实现原理  \nCategory 编译之后的底层结构是 struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息，在程序运行的时候，runtime 会将 Category 的数据，合并到类信息中（类对象、元类对象中）。\n\n* Category 和 Class Extension 的区别是什么？  \nClass Extension 在编译的时候，它的数据就已经包含在类信息中。Category 是在运行时，才会将数据合并到类信息中。\n","slug":"OC底层/原理/Category的实现原理","published":1,"updated":"2020-05-19T15:38:41.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40aqz000kte030yranl48","content":"<ul>\n<li>Category 在编译完成后就变成了一个 _category_t 结构体，里面存储这分类的所有信息。</li>\n<li>在程序运行时通过 Runtime 加载所有 _category_t 的数据，把所有 _category_t 的数据（方法、属性、协议）合并到一个大数组中。</li>\n<li>合并时先扩充内存，然后将类对象里面的原有数据向后移动，再将分类数据（方法、属性、协议）插入到前排。</li>\n<li>靠后被编译到的 _category_t 数据（方法、属性、协议），因为在这个大数组的前排，所以会被优先调用到。  </li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Category-的底层结构\"><a href=\"#Category-的底层结构\" class=\"headerlink\" title=\"Category 的底层结构\"></a>Category 的底层结构</h1><h2 id=\"定义-Persion-Test\"><a href=\"#定义-Persion-Test\" class=\"headerlink\" title=\"定义 Persion+Test\"></a>定义 Persion+Test</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Persion</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Person (Test) - run\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"Persion-Test-cpp\"><a href=\"#Persion-Test-cpp\" class=\"headerlink\" title=\"Persion+Test.cpp\"></a>Persion+Test.cpp</h2><p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion+Test 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_category_t 结构体</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name; <span class=\"comment\">//类名</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">class_t</span> *<span class=\"title\">cls</span>;</span> <span class=\"comment\">//父类</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">method_list_t</span> *<span class=\"title\">instance_methods</span>;</span> <span class=\"comment\">//对象方法列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">method_list_t</span> *<span class=\"title\">class_methods</span>;</span> <span class=\"comment\">//类方法列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">protocol_list_t</span> *<span class=\"title\">protocols</span>;</span> <span class=\"comment\">//协议列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">prop_list_t</span> *<span class=\"title\">properties</span>;</span> <span class=\"comment\">//属性列表</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> __declspec(dllimport) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> _<span class=\"title\">objc_empty_cache</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable:4273)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Category 类对象的对象方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> /*_<span class=\"title\">method_list_t</span>*/ &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> entsize;  <span class=\"comment\">// sizeof(struct _objc_method)</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> method_count;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[2];</span></div><div class=\"line\">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test __attribute__ ((used, section (<span class=\"string\">\"__DATA,__objc_const\"</span>))) = &#123;</div><div class=\"line\">\t<span class=\"keyword\">sizeof</span>(_objc_method),</div><div class=\"line\">\t<span class=\"number\">2</span>,</div><div class=\"line\">\t&#123;&#123;(struct objc_selector *)<span class=\"string\">\"run\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_I_Persion_Test_run&#125;,</div><div class=\"line\">\t&#123;(struct objc_selector *)<span class=\"string\">\"test\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_I_Persion_Test_test&#125;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Category 类对象的类方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> /*_<span class=\"title\">method_list_t</span>*/ &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> entsize;  <span class=\"comment\">// sizeof(struct _objc_method)</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> method_count;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[1];</span></div><div class=\"line\">&#125; _OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test __attribute__ ((used, section (<span class=\"string\">\"__DATA,__objc_const\"</span>))) = &#123;</div><div class=\"line\">\t<span class=\"keyword\">sizeof</span>(_objc_method),</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t&#123;&#123;(struct objc_selector *)<span class=\"string\">\"test2\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_C_Persion_Test_test2&#125;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> __declspec(dllimport) <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">class_t</span> <span class=\"title\">OBJC_CLASS_</span>$_<span class=\"title\">Persion</span>;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Persion+Test 分类的结构体</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> _<span class=\"title\">OBJC_</span>$_<span class=\"title\">CATEGORY_Persion_</span>$_<span class=\"title\">Test</span> __<span class=\"title\">attribute__</span> ((<span class=\"title\">used</span>, <span class=\"title\">section</span> (\"__<span class=\"title\">DATA</span>,__<span class=\"title\">objc_const</span>\"))) = </span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">\t<span class=\"string\">\"Persion\"</span>, <span class=\"comment\">//类名</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">// &amp;OBJC_CLASS_$_Persion,</span></div><div class=\"line\">\t(<span class=\"keyword\">const</span> struct <span class=\"keyword\">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test, <span class=\"comment\">//对象方法列表</span></div><div class=\"line\">\t(<span class=\"keyword\">const</span> struct <span class=\"keyword\">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test, <span class=\"comment\">//类方法列表</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">//协议列表</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">//属性列表</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> OBJC_CATEGORY_SETUP_$_Persion_$_Test(<span class=\"keyword\">void</span> ) &#123;</div><div class=\"line\">\t_OBJC_$_CATEGORY_Persion_$_Test.cls = &amp;OBJC_CLASS_$_Persion;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> section(<span class=\"meta-string\">\".objc_inithooks$B\"</span>, long, read, write)</span></div><div class=\"line\">__declspec(allocate(<span class=\"string\">\".objc_inithooks$B\"</span>)) <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *OBJC_CATEGORY_SETUP[] = &#123;</div><div class=\"line\">\t(<span class=\"keyword\">void</span> *)&amp;OBJC_CATEGORY_SETUP_$_Persion_$_Test,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> *<span class=\"title\">L_OBJC_LABEL_CATEGORY_</span>$ [1] __<span class=\"title\">attribute__</span>((<span class=\"title\">used</span>, <span class=\"title\">section</span> (\"__<span class=\"title\">DATA</span>, __<span class=\"title\">objc_catlist</span>,<span class=\"title\">regular</span>,<span class=\"title\">no_dead_strip</span>\")))= &#123;</span></div><div class=\"line\">\t&amp;_OBJC_$_CATEGORY_Persion_$_Test,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IMAGE_INFO</span> &#123;</span> <span class=\"keyword\">unsigned</span> version; <span class=\"keyword\">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class=\"number\">0</span>, <span class=\"number\">2</span> &#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Category-的加载处理过程\"><a href=\"#Category-的加载处理过程\" class=\"headerlink\" title=\"Category 的加载处理过程\"></a>Category 的加载处理过程</h1><p>打开 runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>。找到运行时入口 objc-os.mm 文件，打开文件找到运行时的初始化方法 void _objc_init(void) 方法：</p>\n<h2 id=\"objc-init\"><a href=\"#objc-init\" class=\"headerlink\" title=\"_objc_init\"></a>_objc_init</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _objc_init(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> initialized = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (initialized) <span class=\"keyword\">return</span>;</div><div class=\"line\">    initialized = <span class=\"literal\">true</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// fixme defer initialization until an objc-using image is found?</span></div><div class=\"line\">    environ_init(); <span class=\"comment\">//设置系统的环境变量</span></div><div class=\"line\">    tls_init(); <span class=\"comment\">//线程相关的处理</span></div><div class=\"line\">    static_init(); <span class=\"comment\">//运行C ++静态构造函数</span></div><div class=\"line\">    runtime_init();</div><div class=\"line\">    exception_init(); <span class=\"comment\">//注册异常的回调</span></div><div class=\"line\">    cache_init();</div><div class=\"line\">    _imp_implementationWithBlock_init();</div><div class=\"line\"></div><div class=\"line\">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image); <span class=\"comment\">//调用dyld的函数注册一个回调，并执行回调函数。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> __OBJC2__</span></div><div class=\"line\">    didCallDyldNotifyRegister = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"map-images\"><a href=\"#map-images\" class=\"headerlink\" title=\"map_images\"></a>map_images</h2><p>Jump To Definition -&gt; map_images:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span></div><div class=\"line\">map_images(<span class=\"keyword\">unsigned</span> count, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> paths[],</div><div class=\"line\">           <span class=\"keyword\">const</span> struct mach_header * <span class=\"keyword\">const</span> mhdrs[])</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">mutex_locker_t</span> lock(runtimeLock);</div><div class=\"line\">    <span class=\"keyword\">return</span> map_images_nolock(count, paths, mhdrs);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map_images 方法的主要作用是处理由dyld映射的镜像文件.  </p>\n<h2 id=\"map-images-nolock\"><a href=\"#map-images-nolock\" class=\"headerlink\" title=\"map_images_nolock\"></a>map_images_nolock</h2><p>Jump To Definition -&gt; map_images_nolock：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> </div><div class=\"line\">map_images_nolock(<span class=\"keyword\">unsigned</span> mhCount, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> mhPaths[],</div><div class=\"line\">                  <span class=\"keyword\">const</span> struct mach_header * <span class=\"keyword\">const</span> mhdrs[])</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    firstTime = NO;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Call image load funcs after everything is set up.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> func : loadImageFuncs) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; mhCount; i++) &#123;</div><div class=\"line\">            func(mhdrs[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>_read_images：images 是模块/镜像的意思。该方法是读取模块用的，比如读取类信息、分类信息等。  </p>\n<h2 id=\"read-images\"><a href=\"#read-images\" class=\"headerlink\" title=\"_read_images\"></a>_read_images</h2><p>Jump To Definition -&gt; _read_images：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">void _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Category discovery MUST BE Late to avoid potential races</span></div><div class=\"line\">    <span class=\"comment\">// when other threads call the new category code before</span></div><div class=\"line\">    <span class=\"comment\">// this thread finishes its fixups.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// +load handled by prepare_load_methods()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Realize non-lazy classes (for +load methods and static instances)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (EACH_HEADER) &#123;</div><div class=\"line\">        classref_t const *classlist = </div><div class=\"line\">            _getObjc2NonlazyClassList(hi, &amp;count); <span class=\"comment\">// 获取分类数组</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            Class <span class=\"keyword\">cls</span> = remapClass(classlist[i]); <span class=\"comment\">//通过 remapClass 获取类对应的指针</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">            addClassTableEntry(<span class=\"keyword\">cls</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">cls</span>-&gt;isSwiftStable()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">cls</span>-&gt;swiftMetadataInitializer()) &#123;</div><div class=\"line\">                    _objc_fatal(<span class=\"string\">\"Swift class %s with a metadata initializer \"</span></div><div class=\"line\">                                <span class=\"string\">\"is not allowed to be non-lazy\"</span>,</div><div class=\"line\">                                <span class=\"keyword\">cls</span>-&gt;nameForLogging());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// fixme also disallow relocatable classes</span></div><div class=\"line\">                <span class=\"comment\">// We can't disallow all Swift classes because of</span></div><div class=\"line\">                <span class=\"comment\">// classes like Swift.__EmptyArrayStorage</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            realizeClassWithoutSwift(<span class=\"keyword\">cls</span>, nil);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面👆代码是 _read_images 处理 Category 的核心代码，首先通过 _getObjc2NonlazyClassList 方法获取 Category 数组，遍历 Category 数组通过 remapClass 获取分类对应的指针，作为参数调用 realizeClassWithoutSwift 方法。</p>\n<h2 id=\"realizeClassWithoutSwift\"><a href=\"#realizeClassWithoutSwift\" class=\"headerlink\" title=\"realizeClassWithoutSwift\"></a>realizeClassWithoutSwift</h2><p>Jump To Definition -&gt; realizeClassWithoutSwift：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">Class</span> realizeClassWithoutSwift(<span class=\"keyword\">Class</span> cls, <span class=\"keyword\">Class</span> previously)</div><div class=\"line\">&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Attach categories</span></div><div class=\"line\">    methodizeClass(cls, previously);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cls;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>realizeClassWithoutSwift 方法内部进过一顿骚操作，最后调用 methodizeClass 方法开始加载分类信息。</p>\n<p>Attach categories：将分类信息附加到类对象里。  </p>\n<h2 id=\"methodizeClass\"><a href=\"#methodizeClass\" class=\"headerlink\" title=\"methodizeClass\"></a>methodizeClass</h2><p>Jump To Definition -&gt; methodizeClass：<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void methodizeClass(Class cls, Class previously)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">bool</span> isMeta = cls-&gt;</span>isMetaClass(); <span class=\"comment\">//是否是元类对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rw = cls-&gt;</span><span class=\"keyword\">data</span>();</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> ro = rw-&gt;</span>ro();</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rwe = rw-&gt;</span>ext();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Methodizing for the first time</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"CLASS: methodizing class '%s' %s\"</span>, </div><div class=\"line\">                     <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), isMeta ? <span class=\"string\">\"(meta)\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Install methods and properties that the class implements itself.</span></div><div class=\"line\">\t<span class=\"comment\">// 方法数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">method_list_t</span> *list = ro-&gt;</span>baseMethods();</div><div class=\"line\">    <span class=\"keyword\">if</span> (list) &#123;</div><div class=\"line\">        prepareMethodLists(cls, &amp;list, <span class=\"number\">1</span>, YES, isBundleClass(cls));</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">if</span> (rwe) rwe-&gt;</span>methods.attachLists(&amp;list, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 属性数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">property_list_t</span> *proplist = ro-&gt;</span>baseProperties;</div><div class=\"line\">    <span class=\"keyword\">if</span> (rwe &amp;&amp; proplist) &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(&amp;proplist, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 协议数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">protocol_list_t</span> *protolist = ro-&gt;</span>baseProtocols;</div><div class=\"line\">    <span class=\"keyword\">if</span> (rwe &amp;&amp; protolist) &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(&amp;protolist, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Root classes get bonus method implementations if they don't have </span></div><div class=\"line\">    <span class=\"comment\">// them already. These apply before category replacements.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">if</span> (cls-&gt;</span>isRootMetaclass()) &#123;</div><div class=\"line\">        <span class=\"comment\">// root metaclass</span></div><div class=\"line\">        addMethod(cls, @selector(initialize), (IMP)&amp;objc_noop_imp, <span class=\"string\">\"\"</span>, NO);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 添加分类方法</span></div><div class=\"line\">    <span class=\"comment\">// Attach categories.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (previously) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isMeta) &#123;</div><div class=\"line\">            objc::unattachedCategories.attachToClass(cls, previously,</div><div class=\"line\">                                                     ATTACH_METACLASS);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// When a class relocates, categories with class methods</span></div><div class=\"line\">            <span class=\"comment\">// may be registered on the class itself rather than on</span></div><div class=\"line\">            <span class=\"comment\">// the metaclass. Tell attachToClass to look for those.</span></div><div class=\"line\">            objc::unattachedCategories.attachToClass(cls, previously,</div><div class=\"line\">                                                     ATTACH_CLASS_AND_METACLASS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    objc::unattachedCategories.attachToClass(cls, cls,</div><div class=\"line\">                                             isMeta ? ATTACH_METACLASS : ATTACH_CLASS);</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> DEBUG</div><div class=\"line\">    <span class=\"comment\">// Debug: sanity-check all SELs; log method list contents</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">for</span> (const auto&amp; meth : rw-&gt;</span>methods()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">            _objc_inform(<span class=\"string\">\"METHOD %c[%s %s]\"</span>, isMeta ? <span class=\"string\">'+'</span> : <span class=\"string\">'-'</span>, </div><div class=\"line\">                         <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), sel_getName(meth.<span class=\"keyword\">name</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">        ASSERT(sel_registerName(sel_getName(meth.<span class=\"keyword\">name</span>)) == meth.<span class=\"keyword\">name</span>); </div><div class=\"line\">    &#125;</div><div class=\"line\">#endif</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Install methods and properties that the class implements itself. 可以看出该方法是在加载类对象自己内部的信息。分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将信息添加到类对象里。</p>\n<h2 id=\"attachToClass\"><a href=\"#attachToClass\" class=\"headerlink\" title=\"attachToClass\"></a>attachToClass</h2><p>Jump To Definition -&gt; attachToClass:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attachToClass</span><span class=\"params\">(Class cls, Class previously, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        runtimeLock.assertLocked();</div><div class=\"line\">        ASSERT((flags &amp; ATTACH_CLASS) ||</div><div class=\"line\">               (flags &amp; ATTACH_METACLASS) ||</div><div class=\"line\">               (flags &amp; ATTACH_CLASS_AND_METACLASS));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">auto</span> &amp;<span class=\"built_in\">map</span> = get();</div><div class=\"line\">        <span class=\"keyword\">auto</span> it = <span class=\"built_in\">map</span>.find(previously);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (it != <span class=\"built_in\">map</span>.end()) &#123;</div><div class=\"line\">            category_list &amp;<span class=\"built_in\">list</span> = it-&gt;second;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flags &amp; ATTACH_CLASS_AND_METACLASS) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> otherFlags = flags &amp; ~ATTACH_CLASS_AND_METACLASS;</div><div class=\"line\">                attachCategories(cls, <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), otherFlags | ATTACH_CLASS);</div><div class=\"line\">                attachCategories(cls-&gt;ISA(), <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), otherFlags | ATTACH_METACLASS);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                attachCategories(cls, <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), flags);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">map</span>.erase(it);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"attachCategories\"><a href=\"#attachCategories\" class=\"headerlink\" title=\"attachCategories\"></a>attachCategories</h2><p>Jump To Definition -&gt; attachCategories:<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void</div><div class=\"line\">attachCategories(Class cls, const locstamped_category_t *cats_list, uint32_t cats_count,</div><div class=\"line\">                 int flags)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(PrintReplacedMethods)) &#123;</div><div class=\"line\">        printReplacements(cls, cats_list, cats_count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(PrintConnecting)) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"CLASS: attaching %d categories to%s class '%s'%s\"</span>,</div><div class=\"line\">                     cats_count, (flags &amp; ATTACH_EXISTING) ? <span class=\"string\">\" existing\"</span> : <span class=\"string\">\"\"</span>,</div><div class=\"line\">                     <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), (flags &amp; ATTACH_METACLASS) ? <span class=\"string\">\" (meta)\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">     * Only a few classes have more than 64 categories during launch.</span></div><div class=\"line\"><span class=\"comment\">     * This uses a little stack, and avoids malloc.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * Categories must be added in the proper order, which is back</span></div><div class=\"line\"><span class=\"comment\">     * to front. To do that with the chunking, we iterate cats_list</span></div><div class=\"line\"><span class=\"comment\">     * from front to back, build up the local buffers backwards,</span></div><div class=\"line\"><span class=\"comment\">     * and call attachLists on the chunks. attachLists prepends the</span></div><div class=\"line\"><span class=\"comment\">     * lists, so the final result is in the expected order.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    constexpr uint32_t ATTACH_BUFSIZ = <span class=\"number\">64</span>;</div><div class=\"line\">    method_list_t   *mlists[ATTACH_BUFSIZ];</div><div class=\"line\">    property_list_t *proplists[ATTACH_BUFSIZ];</div><div class=\"line\">    protocol_list_t *protolists[ATTACH_BUFSIZ];</div><div class=\"line\"></div><div class=\"line\">    uint32_t mcount = <span class=\"number\">0</span>;</div><div class=\"line\">    uint32_t propcount = <span class=\"number\">0</span>;</div><div class=\"line\">    uint32_t protocount = <span class=\"number\">0</span>;</div><div class=\"line\">    bool fromBundle = NO;</div><div class=\"line\">    bool isMeta = (flags &amp; ATTACH_METACLASS);</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rwe = cls-&gt;</span><span class=\"function\"><span class=\"title\">data</span>()-&gt;</span>extAllocIfNeeded();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (uint32_t i = <span class=\"number\">0</span>; i &lt; cats_count; i++) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 取出某个分类 entry 是 category_t 类型</span></div><div class=\"line\">        auto&amp; entry = cats_list[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 方法数组</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">method_list_t</span> *mlist = entry.cat-&gt;</span>methodsForMeta(isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mcount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                prepareMethodLists(cls, mlists, mcount, NO, fromBundle);</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>methods.attachLists(mlists, mcount);</div><div class=\"line\">                mcount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mlists[ATTACH_BUFSIZ - ++mcount] = mlist;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">fromBundle</span> |= entry.hi-&gt;</span>isBundle();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//属性数组</span></div><div class=\"line\">        property_list_t *proplist =</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">entry</span>.cat-&gt;</span>propertiesForMeta(isMeta, entry.hi);</div><div class=\"line\">        <span class=\"keyword\">if</span> (proplist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (propcount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(proplists, propcount);</div><div class=\"line\">                propcount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            proplists[ATTACH_BUFSIZ - ++propcount] = proplist;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 协议数组</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">protocol_list_t</span> *protolist = entry.cat-&gt;</span>protocolsForMeta(isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (protolist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (protocount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(protolists, protocount);</div><div class=\"line\">                protocount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            protolists[ATTACH_BUFSIZ - ++protocount] = protolist;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mcount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        prepareMethodLists(cls, mlists + ATTACH_BUFSIZ - mcount, mcount, NO, fromBundle);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>methods.attachLists(mlists + ATTACH_BUFSIZ - mcount, mcount);</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; ATTACH_EXISTING) flushCaches(cls);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(proplists + ATTACH_BUFSIZ - propcount, propcount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(protolists + ATTACH_BUFSIZ - protocount, protocount);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将分类信息添加到原类对象里。</p>\n<h2 id=\"attachLists\"><a href=\"#attachLists\" class=\"headerlink\" title=\"attachLists\"></a>attachLists</h2><p>Jump To Definition -&gt; attachLists:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attachLists</span><span class=\"params\">(List* <span class=\"keyword\">const</span> * addedLists, <span class=\"keyword\">uint32_t</span> addedCount)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (addedCount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (hasArray()) &#123;</div><div class=\"line\">            <span class=\"comment\">// many lists -&gt; many lists</span></div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> oldCount = <span class=\"built_in\">array</span>()-&gt;count; <span class=\"comment\">// 原内存空间大小</span></div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> newCount = oldCount + addedCount; <span class=\"comment\">// 新内存空间大小</span></div><div class=\"line\">            setArray((<span class=\"keyword\">array_t</span> *)<span class=\"built_in\">realloc</span>(<span class=\"built_in\">array</span>(), <span class=\"keyword\">array_t</span>::byteSize(newCount))); <span class=\"comment\">// 重新分配内存空间</span></div><div class=\"line\">            <span class=\"built_in\">array</span>()-&gt;count = newCount;</div><div class=\"line\">            memmove(<span class=\"built_in\">array</span>()-&gt;lists + addedCount, <span class=\"built_in\">array</span>()-&gt;lists, </div><div class=\"line\">                    oldCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>])); <span class=\"comment\">// 调整内存格式</span></div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(<span class=\"built_in\">array</span>()-&gt;lists, addedLists, </div><div class=\"line\">                   addedCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>])); <span class=\"comment\">// 拷贝分类信息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>  &amp;&amp;  addedCount == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 0 lists -&gt; 1 list</span></div><div class=\"line\">            <span class=\"built_in\">list</span> = addedLists[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 1 list -&gt; many lists</span></div><div class=\"line\">            List* oldList = <span class=\"built_in\">list</span>;</div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> oldCount = oldList ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> newCount = oldCount + addedCount;</div><div class=\"line\">            setArray((<span class=\"keyword\">array_t</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">array_t</span>::byteSize(newCount)));</div><div class=\"line\">            <span class=\"built_in\">array</span>()-&gt;count = newCount;</div><div class=\"line\">            <span class=\"keyword\">if</span> (oldList) <span class=\"built_in\">array</span>()-&gt;lists[addedCount] = oldList;</div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(<span class=\"built_in\">array</span>()-&gt;lists, addedLists, </div><div class=\"line\">                   addedCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>]));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"realloc、memmove、memcpy\"><a href=\"#realloc、memmove、memcpy\" class=\"headerlink\" title=\"realloc、memmove、memcpy\"></a>realloc、memmove、memcpy</h2><p>attachLists 方法内部<br>1.通过参数 addedCount 确定需要增加的内存空间 newCount，然后通过 realloc 方法重新分配空间。<br>2.空间增加后，通过 memmove 方法将类对象里的信息往后移动 addedCount 距离，把前排 addedCount 大小的空间空出来留给将要添加进来的分类信息。<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理02.png\" alt=\"Category的实现原理01\"></p>\n<p>3.类对象的前排空间空出来后，再通过 memcpy 方法将分类信息拷贝到该空间里。<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理03.png\" alt=\"Category的实现原理01\"></p>\n<h2 id=\"Category-的编译顺序\"><a href=\"#Category-的编译顺序\" class=\"headerlink\" title=\"Category 的编译顺序\"></a>Category 的编译顺序</h2><p>原文件 Persion.m 最先编译，之后添加的分类按照添加顺序，优先编译后来添加的分类。添加顺序：<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理01.png\" alt=\"Category的实现原理01\"></p>\n<p>如图编译顺序为 Persion.m -&gt; Persion+Test.m -&gt; Persion+Demo.m。如果 Persion.m、Persion+Test.m、Persion+Demo.m 中有相同的方法，后编译的类中的方法会优先于先编译的类中的方法（不是覆盖，只是优先被查询到）。</p>\n<p>调用日志：<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理04.png\" alt=\"Category的实现原理01\"></p>\n<p>可以看到 Persion.m 被优先编译，其次是后来添加的 Persion+Test.m，第三个编译的是 最后添加的 Persion+Demo.m。添加顺序决定编译顺序只对分类有效，Persion.m 一定是最先编译的，这一点通过 methodizeClass 方法也能看出来，先处理类对象，再处理分类。</p>\n<h1 id=\"Class-Extension-的实现原理\"><a href=\"#Class-Extension-的实现原理\" class=\"headerlink\" title=\"Class Extension 的实现原理\"></a>Class Extension 的实现原理</h1><h2 id=\"定义-Persion\"><a href=\"#定义-Persion\" class=\"headerlink\" title=\"定义 Persion()\"></a>定义 Persion()</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *categoryTest1;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)run;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span>()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *categoryTest2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Persion</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Person - run\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion 的实现：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> OBJC_IVAR_$_Persion$_categoryTest1;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> OBJC_IVAR_$_Persion$_categoryTest2;</div><div class=\"line\"><span class=\"keyword\">struct</span> Persion_IMPL &#123;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"built_in\">NSObject_IMPL</span> <span class=\"built_in\">NSObject_IVARS</span>;</div><div class=\"line\">\t<span class=\"built_in\">NSString</span> * _Nonnull _categoryTest1;</div><div class=\"line\">\t<span class=\"built_in\">NSString</span> *_categoryTest2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>上面👆这块代码可以看到，在 Persion() 中定义的 categoryTest2 已经包含在类 Persion 类对象的结构体里面了。可以证明 Class Extension 在编译的时候，它的数据就已经包含在类信息中了。从实现上来看，Class Extension 不应该叫做匿名分类，叫类扩展更适合。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>运行时入口 objc-os.mm，初始化方法 void _objc_init(void) 方法。</p>\n</li>\n<li><p>objc4 的代码虽然改了，但是实现原理还是没变。</p>\n</li>\n<li><p>Category 的实现原理<br>Category 编译之后的底层结构是 struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息，在程序运行的时候，runtime 会将 Category 的数据，合并到类信息中（类对象、元类对象中）。</p>\n</li>\n<li><p>Category 和 Class Extension 的区别是什么？<br>Class Extension 在编译的时候，它的数据就已经包含在类信息中。Category 是在运行时，才会将数据合并到类信息中。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>Category 在编译完成后就变成了一个 _category_t 结构体，里面存储这分类的所有信息。</li>\n<li>在程序运行时通过 Runtime 加载所有 _category_t 的数据，把所有 _category_t 的数据（方法、属性、协议）合并到一个大数组中。</li>\n<li>合并时先扩充内存，然后将类对象里面的原有数据向后移动，再将分类数据（方法、属性、协议）插入到前排。</li>\n<li>靠后被编译到的 _category_t 数据（方法、属性、协议），因为在这个大数组的前排，所以会被优先调用到。  </li>\n</ul>","more":"<h1 id=\"Category-的底层结构\"><a href=\"#Category-的底层结构\" class=\"headerlink\" title=\"Category 的底层结构\"></a>Category 的底层结构</h1><h2 id=\"定义-Persion-Test\"><a href=\"#定义-Persion-Test\" class=\"headerlink\" title=\"定义 Persion+Test\"></a>定义 Persion+Test</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Persion</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Person (Test) - run\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"Persion-Test-cpp\"><a href=\"#Persion-Test-cpp\" class=\"headerlink\" title=\"Persion+Test.cpp\"></a>Persion+Test.cpp</h2><p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion+Test 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_category_t 结构体</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name; <span class=\"comment\">//类名</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">class_t</span> *<span class=\"title\">cls</span>;</span> <span class=\"comment\">//父类</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">method_list_t</span> *<span class=\"title\">instance_methods</span>;</span> <span class=\"comment\">//对象方法列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">method_list_t</span> *<span class=\"title\">class_methods</span>;</span> <span class=\"comment\">//类方法列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">protocol_list_t</span> *<span class=\"title\">protocols</span>;</span> <span class=\"comment\">//协议列表</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">prop_list_t</span> *<span class=\"title\">properties</span>;</span> <span class=\"comment\">//属性列表</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> __declspec(dllimport) <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> _<span class=\"title\">objc_empty_cache</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable:4273)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Category 类对象的对象方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> /*_<span class=\"title\">method_list_t</span>*/ &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> entsize;  <span class=\"comment\">// sizeof(struct _objc_method)</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> method_count;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[2];</span></div><div class=\"line\">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test __attribute__ ((used, section (<span class=\"string\">\"__DATA,__objc_const\"</span>))) = &#123;</div><div class=\"line\">\t<span class=\"keyword\">sizeof</span>(_objc_method),</div><div class=\"line\">\t<span class=\"number\">2</span>,</div><div class=\"line\">\t&#123;&#123;(struct objc_selector *)<span class=\"string\">\"run\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_I_Persion_Test_run&#125;,</div><div class=\"line\">\t&#123;(struct objc_selector *)<span class=\"string\">\"test\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_I_Persion_Test_test&#125;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Category 类对象的类方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> /*_<span class=\"title\">method_list_t</span>*/ &#123;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> entsize;  <span class=\"comment\">// sizeof(struct _objc_method)</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> method_count;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[1];</span></div><div class=\"line\">&#125; _OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test __attribute__ ((used, section (<span class=\"string\">\"__DATA,__objc_const\"</span>))) = &#123;</div><div class=\"line\">\t<span class=\"keyword\">sizeof</span>(_objc_method),</div><div class=\"line\">\t<span class=\"number\">1</span>,</div><div class=\"line\">\t&#123;&#123;(struct objc_selector *)<span class=\"string\">\"test2\"</span>, <span class=\"string\">\"v16@0:8\"</span>, (<span class=\"keyword\">void</span> *)_C_Persion_Test_test2&#125;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> __declspec(dllimport) <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">class_t</span> <span class=\"title\">OBJC_CLASS_</span>$_<span class=\"title\">Persion</span>;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Persion+Test 分类的结构体</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> _<span class=\"title\">OBJC_</span>$_<span class=\"title\">CATEGORY_Persion_</span>$_<span class=\"title\">Test</span> __<span class=\"title\">attribute__</span> ((<span class=\"title\">used</span>, <span class=\"title\">section</span> (\"__<span class=\"title\">DATA</span>,__<span class=\"title\">objc_const</span>\"))) = </span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">\t<span class=\"string\">\"Persion\"</span>, <span class=\"comment\">//类名</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">// &amp;OBJC_CLASS_$_Persion,</span></div><div class=\"line\">\t(<span class=\"keyword\">const</span> struct <span class=\"keyword\">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_Persion_$_Test, <span class=\"comment\">//对象方法列表</span></div><div class=\"line\">\t(<span class=\"keyword\">const</span> struct <span class=\"keyword\">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_CLASS_METHODS_Persion_$_Test, <span class=\"comment\">//类方法列表</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">//协议列表</span></div><div class=\"line\">\t<span class=\"number\">0</span>, <span class=\"comment\">//属性列表</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> OBJC_CATEGORY_SETUP_$_Persion_$_Test(<span class=\"keyword\">void</span> ) &#123;</div><div class=\"line\">\t_OBJC_$_CATEGORY_Persion_$_Test.cls = &amp;OBJC_CLASS_$_Persion;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> section(<span class=\"meta-string\">\".objc_inithooks$B\"</span>, long, read, write)</span></div><div class=\"line\">__declspec(allocate(<span class=\"string\">\".objc_inithooks$B\"</span>)) <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *OBJC_CATEGORY_SETUP[] = &#123;</div><div class=\"line\">\t(<span class=\"keyword\">void</span> *)&amp;OBJC_CATEGORY_SETUP_$_Persion_$_Test,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">category_t</span> *<span class=\"title\">L_OBJC_LABEL_CATEGORY_</span>$ [1] __<span class=\"title\">attribute__</span>((<span class=\"title\">used</span>, <span class=\"title\">section</span> (\"__<span class=\"title\">DATA</span>, __<span class=\"title\">objc_catlist</span>,<span class=\"title\">regular</span>,<span class=\"title\">no_dead_strip</span>\")))= &#123;</span></div><div class=\"line\">\t&amp;_OBJC_$_CATEGORY_Persion_$_Test,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IMAGE_INFO</span> &#123;</span> <span class=\"keyword\">unsigned</span> version; <span class=\"keyword\">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class=\"number\">0</span>, <span class=\"number\">2</span> &#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Category-的加载处理过程\"><a href=\"#Category-的加载处理过程\" class=\"headerlink\" title=\"Category 的加载处理过程\"></a>Category 的加载处理过程</h1><p>打开 runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>。找到运行时入口 objc-os.mm 文件，打开文件找到运行时的初始化方法 void _objc_init(void) 方法：</p>\n<h2 id=\"objc-init\"><a href=\"#objc-init\" class=\"headerlink\" title=\"_objc_init\"></a>_objc_init</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _objc_init(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> initialized = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (initialized) <span class=\"keyword\">return</span>;</div><div class=\"line\">    initialized = <span class=\"literal\">true</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// fixme defer initialization until an objc-using image is found?</span></div><div class=\"line\">    environ_init(); <span class=\"comment\">//设置系统的环境变量</span></div><div class=\"line\">    tls_init(); <span class=\"comment\">//线程相关的处理</span></div><div class=\"line\">    static_init(); <span class=\"comment\">//运行C ++静态构造函数</span></div><div class=\"line\">    runtime_init();</div><div class=\"line\">    exception_init(); <span class=\"comment\">//注册异常的回调</span></div><div class=\"line\">    cache_init();</div><div class=\"line\">    _imp_implementationWithBlock_init();</div><div class=\"line\"></div><div class=\"line\">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image); <span class=\"comment\">//调用dyld的函数注册一个回调，并执行回调函数。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> __OBJC2__</span></div><div class=\"line\">    didCallDyldNotifyRegister = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"map-images\"><a href=\"#map-images\" class=\"headerlink\" title=\"map_images\"></a>map_images</h2><p>Jump To Definition -&gt; map_images:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span></div><div class=\"line\">map_images(<span class=\"keyword\">unsigned</span> count, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> paths[],</div><div class=\"line\">           <span class=\"keyword\">const</span> struct mach_header * <span class=\"keyword\">const</span> mhdrs[])</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">mutex_locker_t</span> lock(runtimeLock);</div><div class=\"line\">    <span class=\"keyword\">return</span> map_images_nolock(count, paths, mhdrs);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map_images 方法的主要作用是处理由dyld映射的镜像文件.  </p>\n<h2 id=\"map-images-nolock\"><a href=\"#map-images-nolock\" class=\"headerlink\" title=\"map_images_nolock\"></a>map_images_nolock</h2><p>Jump To Definition -&gt; map_images_nolock：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> </div><div class=\"line\">map_images_nolock(<span class=\"keyword\">unsigned</span> mhCount, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> mhPaths[],</div><div class=\"line\">                  <span class=\"keyword\">const</span> struct mach_header * <span class=\"keyword\">const</span> mhdrs[])</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        _read_images(hList, hCount, totalClasses, unoptimizedTotalClasses);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    firstTime = NO;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Call image load funcs after everything is set up.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> func : loadImageFuncs) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; mhCount; i++) &#123;</div><div class=\"line\">            func(mhdrs[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>_read_images：images 是模块/镜像的意思。该方法是读取模块用的，比如读取类信息、分类信息等。  </p>\n<h2 id=\"read-images\"><a href=\"#read-images\" class=\"headerlink\" title=\"_read_images\"></a>_read_images</h2><p>Jump To Definition -&gt; _read_images：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">void _read_images(header_info **hList, uint32_t hCount, int totalClasses, int unoptimizedTotalClasses)</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Category discovery MUST BE Late to avoid potential races</span></div><div class=\"line\">    <span class=\"comment\">// when other threads call the new category code before</span></div><div class=\"line\">    <span class=\"comment\">// this thread finishes its fixups.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// +load handled by prepare_load_methods()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Realize non-lazy classes (for +load methods and static instances)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (EACH_HEADER) &#123;</div><div class=\"line\">        classref_t const *classlist = </div><div class=\"line\">            _getObjc2NonlazyClassList(hi, &amp;count); <span class=\"comment\">// 获取分类数组</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            Class <span class=\"keyword\">cls</span> = remapClass(classlist[i]); <span class=\"comment\">//通过 remapClass 获取类对应的指针</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">            addClassTableEntry(<span class=\"keyword\">cls</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">cls</span>-&gt;isSwiftStable()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">cls</span>-&gt;swiftMetadataInitializer()) &#123;</div><div class=\"line\">                    _objc_fatal(<span class=\"string\">\"Swift class %s with a metadata initializer \"</span></div><div class=\"line\">                                <span class=\"string\">\"is not allowed to be non-lazy\"</span>,</div><div class=\"line\">                                <span class=\"keyword\">cls</span>-&gt;nameForLogging());</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// fixme also disallow relocatable classes</span></div><div class=\"line\">                <span class=\"comment\">// We can't disallow all Swift classes because of</span></div><div class=\"line\">                <span class=\"comment\">// classes like Swift.__EmptyArrayStorage</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            realizeClassWithoutSwift(<span class=\"keyword\">cls</span>, nil);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面👆代码是 _read_images 处理 Category 的核心代码，首先通过 _getObjc2NonlazyClassList 方法获取 Category 数组，遍历 Category 数组通过 remapClass 获取分类对应的指针，作为参数调用 realizeClassWithoutSwift 方法。</p>\n<h2 id=\"realizeClassWithoutSwift\"><a href=\"#realizeClassWithoutSwift\" class=\"headerlink\" title=\"realizeClassWithoutSwift\"></a>realizeClassWithoutSwift</h2><p>Jump To Definition -&gt; realizeClassWithoutSwift：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">Class</span> realizeClassWithoutSwift(<span class=\"keyword\">Class</span> cls, <span class=\"keyword\">Class</span> previously)</div><div class=\"line\">&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\t...</div><div class=\"line\">\t...<span class=\"comment\">//一堆方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Attach categories</span></div><div class=\"line\">    methodizeClass(cls, previously);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cls;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>realizeClassWithoutSwift 方法内部进过一顿骚操作，最后调用 methodizeClass 方法开始加载分类信息。</p>\n<p>Attach categories：将分类信息附加到类对象里。  </p>\n<h2 id=\"methodizeClass\"><a href=\"#methodizeClass\" class=\"headerlink\" title=\"methodizeClass\"></a>methodizeClass</h2><p>Jump To Definition -&gt; methodizeClass：<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void methodizeClass(Class cls, Class previously)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">bool</span> isMeta = cls-&gt;</span>isMetaClass(); <span class=\"comment\">//是否是元类对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rw = cls-&gt;</span><span class=\"keyword\">data</span>();</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> ro = rw-&gt;</span>ro();</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rwe = rw-&gt;</span>ext();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Methodizing for the first time</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"CLASS: methodizing class '%s' %s\"</span>, </div><div class=\"line\">                     <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), isMeta ? <span class=\"string\">\"(meta)\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Install methods and properties that the class implements itself.</span></div><div class=\"line\">\t<span class=\"comment\">// 方法数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">method_list_t</span> *list = ro-&gt;</span>baseMethods();</div><div class=\"line\">    <span class=\"keyword\">if</span> (list) &#123;</div><div class=\"line\">        prepareMethodLists(cls, &amp;list, <span class=\"number\">1</span>, YES, isBundleClass(cls));</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">if</span> (rwe) rwe-&gt;</span>methods.attachLists(&amp;list, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 属性数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">property_list_t</span> *proplist = ro-&gt;</span>baseProperties;</div><div class=\"line\">    <span class=\"keyword\">if</span> (rwe &amp;&amp; proplist) &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(&amp;proplist, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 协议数组</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">protocol_list_t</span> *protolist = ro-&gt;</span>baseProtocols;</div><div class=\"line\">    <span class=\"keyword\">if</span> (rwe &amp;&amp; protolist) &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(&amp;protolist, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Root classes get bonus method implementations if they don't have </span></div><div class=\"line\">    <span class=\"comment\">// them already. These apply before category replacements.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">if</span> (cls-&gt;</span>isRootMetaclass()) &#123;</div><div class=\"line\">        <span class=\"comment\">// root metaclass</span></div><div class=\"line\">        addMethod(cls, @selector(initialize), (IMP)&amp;objc_noop_imp, <span class=\"string\">\"\"</span>, NO);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 添加分类方法</span></div><div class=\"line\">    <span class=\"comment\">// Attach categories.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (previously) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isMeta) &#123;</div><div class=\"line\">            objc::unattachedCategories.attachToClass(cls, previously,</div><div class=\"line\">                                                     ATTACH_METACLASS);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// When a class relocates, categories with class methods</span></div><div class=\"line\">            <span class=\"comment\">// may be registered on the class itself rather than on</span></div><div class=\"line\">            <span class=\"comment\">// the metaclass. Tell attachToClass to look for those.</span></div><div class=\"line\">            objc::unattachedCategories.attachToClass(cls, previously,</div><div class=\"line\">                                                     ATTACH_CLASS_AND_METACLASS);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    objc::unattachedCategories.attachToClass(cls, cls,</div><div class=\"line\">                                             isMeta ? ATTACH_METACLASS : ATTACH_CLASS);</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> DEBUG</div><div class=\"line\">    <span class=\"comment\">// Debug: sanity-check all SELs; log method list contents</span></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">for</span> (const auto&amp; meth : rw-&gt;</span>methods()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">            _objc_inform(<span class=\"string\">\"METHOD %c[%s %s]\"</span>, isMeta ? <span class=\"string\">'+'</span> : <span class=\"string\">'-'</span>, </div><div class=\"line\">                         <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), sel_getName(meth.<span class=\"keyword\">name</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">        ASSERT(sel_registerName(sel_getName(meth.<span class=\"keyword\">name</span>)) == meth.<span class=\"keyword\">name</span>); </div><div class=\"line\">    &#125;</div><div class=\"line\">#endif</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Install methods and properties that the class implements itself. 可以看出该方法是在加载类对象自己内部的信息。分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将信息添加到类对象里。</p>\n<h2 id=\"attachToClass\"><a href=\"#attachToClass\" class=\"headerlink\" title=\"attachToClass\"></a>attachToClass</h2><p>Jump To Definition -&gt; attachToClass:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attachToClass</span><span class=\"params\">(Class cls, Class previously, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        runtimeLock.assertLocked();</div><div class=\"line\">        ASSERT((flags &amp; ATTACH_CLASS) ||</div><div class=\"line\">               (flags &amp; ATTACH_METACLASS) ||</div><div class=\"line\">               (flags &amp; ATTACH_CLASS_AND_METACLASS));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">auto</span> &amp;<span class=\"built_in\">map</span> = get();</div><div class=\"line\">        <span class=\"keyword\">auto</span> it = <span class=\"built_in\">map</span>.find(previously);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (it != <span class=\"built_in\">map</span>.end()) &#123;</div><div class=\"line\">            category_list &amp;<span class=\"built_in\">list</span> = it-&gt;second;</div><div class=\"line\">            <span class=\"keyword\">if</span> (flags &amp; ATTACH_CLASS_AND_METACLASS) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> otherFlags = flags &amp; ~ATTACH_CLASS_AND_METACLASS;</div><div class=\"line\">                attachCategories(cls, <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), otherFlags | ATTACH_CLASS);</div><div class=\"line\">                attachCategories(cls-&gt;ISA(), <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), otherFlags | ATTACH_METACLASS);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                attachCategories(cls, <span class=\"built_in\">list</span>.<span class=\"built_in\">array</span>(), <span class=\"built_in\">list</span>.count(), flags);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">map</span>.erase(it);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"attachCategories\"><a href=\"#attachCategories\" class=\"headerlink\" title=\"attachCategories\"></a>attachCategories</h2><p>Jump To Definition -&gt; attachCategories:<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void</div><div class=\"line\">attachCategories(Class cls, const locstamped_category_t *cats_list, uint32_t cats_count,</div><div class=\"line\">                 int flags)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(PrintReplacedMethods)) &#123;</div><div class=\"line\">        printReplacements(cls, cats_list, cats_count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(PrintConnecting)) &#123;</div><div class=\"line\">        _objc_inform(<span class=\"string\">\"CLASS: attaching %d categories to%s class '%s'%s\"</span>,</div><div class=\"line\">                     cats_count, (flags &amp; ATTACH_EXISTING) ? <span class=\"string\">\" existing\"</span> : <span class=\"string\">\"\"</span>,</div><div class=\"line\">                     <span class=\"function\"><span class=\"title\">cls</span>-&gt;</span>nameForLogging(), (flags &amp; ATTACH_METACLASS) ? <span class=\"string\">\" (meta)\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">     * Only a few classes have more than 64 categories during launch.</span></div><div class=\"line\"><span class=\"comment\">     * This uses a little stack, and avoids malloc.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * Categories must be added in the proper order, which is back</span></div><div class=\"line\"><span class=\"comment\">     * to front. To do that with the chunking, we iterate cats_list</span></div><div class=\"line\"><span class=\"comment\">     * from front to back, build up the local buffers backwards,</span></div><div class=\"line\"><span class=\"comment\">     * and call attachLists on the chunks. attachLists prepends the</span></div><div class=\"line\"><span class=\"comment\">     * lists, so the final result is in the expected order.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    constexpr uint32_t ATTACH_BUFSIZ = <span class=\"number\">64</span>;</div><div class=\"line\">    method_list_t   *mlists[ATTACH_BUFSIZ];</div><div class=\"line\">    property_list_t *proplists[ATTACH_BUFSIZ];</div><div class=\"line\">    protocol_list_t *protolists[ATTACH_BUFSIZ];</div><div class=\"line\"></div><div class=\"line\">    uint32_t mcount = <span class=\"number\">0</span>;</div><div class=\"line\">    uint32_t propcount = <span class=\"number\">0</span>;</div><div class=\"line\">    uint32_t protocount = <span class=\"number\">0</span>;</div><div class=\"line\">    bool fromBundle = NO;</div><div class=\"line\">    bool isMeta = (flags &amp; ATTACH_METACLASS);</div><div class=\"line\">    <span class=\"function\"><span class=\"title\">auto</span> rwe = cls-&gt;</span><span class=\"function\"><span class=\"title\">data</span>()-&gt;</span>extAllocIfNeeded();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (uint32_t i = <span class=\"number\">0</span>; i &lt; cats_count; i++) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 取出某个分类 entry 是 category_t 类型</span></div><div class=\"line\">        auto&amp; entry = cats_list[i];</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 方法数组</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">method_list_t</span> *mlist = entry.cat-&gt;</span>methodsForMeta(isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mcount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                prepareMethodLists(cls, mlists, mcount, NO, fromBundle);</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>methods.attachLists(mlists, mcount);</div><div class=\"line\">                mcount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mlists[ATTACH_BUFSIZ - ++mcount] = mlist;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">fromBundle</span> |= entry.hi-&gt;</span>isBundle();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//属性数组</span></div><div class=\"line\">        property_list_t *proplist =</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">entry</span>.cat-&gt;</span>propertiesForMeta(isMeta, entry.hi);</div><div class=\"line\">        <span class=\"keyword\">if</span> (proplist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (propcount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(proplists, propcount);</div><div class=\"line\">                propcount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            proplists[ATTACH_BUFSIZ - ++propcount] = proplist;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 协议数组</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">protocol_list_t</span> *protolist = entry.cat-&gt;</span>protocolsForMeta(isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (protolist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (protocount == ATTACH_BUFSIZ) &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(protolists, protocount);</div><div class=\"line\">                protocount = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            protolists[ATTACH_BUFSIZ - ++protocount] = protolist;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mcount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        prepareMethodLists(cls, mlists + ATTACH_BUFSIZ - mcount, mcount, NO, fromBundle);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>methods.attachLists(mlists + ATTACH_BUFSIZ - mcount, mcount);</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; ATTACH_EXISTING) flushCaches(cls);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>properties.attachLists(proplists + ATTACH_BUFSIZ - propcount, propcount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"title\">rwe</span>-&gt;</span>protocols.attachLists(protolists + ATTACH_BUFSIZ - protocount, protocount);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分别针对方法数组、属性数组和协议数组调用 attachLists 方法，将分类信息添加到原类对象里。</p>\n<h2 id=\"attachLists\"><a href=\"#attachLists\" class=\"headerlink\" title=\"attachLists\"></a>attachLists</h2><p>Jump To Definition -&gt; attachLists:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attachLists</span><span class=\"params\">(List* <span class=\"keyword\">const</span> * addedLists, <span class=\"keyword\">uint32_t</span> addedCount)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (addedCount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (hasArray()) &#123;</div><div class=\"line\">            <span class=\"comment\">// many lists -&gt; many lists</span></div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> oldCount = <span class=\"built_in\">array</span>()-&gt;count; <span class=\"comment\">// 原内存空间大小</span></div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> newCount = oldCount + addedCount; <span class=\"comment\">// 新内存空间大小</span></div><div class=\"line\">            setArray((<span class=\"keyword\">array_t</span> *)<span class=\"built_in\">realloc</span>(<span class=\"built_in\">array</span>(), <span class=\"keyword\">array_t</span>::byteSize(newCount))); <span class=\"comment\">// 重新分配内存空间</span></div><div class=\"line\">            <span class=\"built_in\">array</span>()-&gt;count = newCount;</div><div class=\"line\">            memmove(<span class=\"built_in\">array</span>()-&gt;lists + addedCount, <span class=\"built_in\">array</span>()-&gt;lists, </div><div class=\"line\">                    oldCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>])); <span class=\"comment\">// 调整内存格式</span></div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(<span class=\"built_in\">array</span>()-&gt;lists, addedLists, </div><div class=\"line\">                   addedCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>])); <span class=\"comment\">// 拷贝分类信息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>  &amp;&amp;  addedCount == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 0 lists -&gt; 1 list</span></div><div class=\"line\">            <span class=\"built_in\">list</span> = addedLists[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 1 list -&gt; many lists</span></div><div class=\"line\">            List* oldList = <span class=\"built_in\">list</span>;</div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> oldCount = oldList ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">uint32_t</span> newCount = oldCount + addedCount;</div><div class=\"line\">            setArray((<span class=\"keyword\">array_t</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">array_t</span>::byteSize(newCount)));</div><div class=\"line\">            <span class=\"built_in\">array</span>()-&gt;count = newCount;</div><div class=\"line\">            <span class=\"keyword\">if</span> (oldList) <span class=\"built_in\">array</span>()-&gt;lists[addedCount] = oldList;</div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(<span class=\"built_in\">array</span>()-&gt;lists, addedLists, </div><div class=\"line\">                   addedCount * <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>()-&gt;lists[<span class=\"number\">0</span>]));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"realloc、memmove、memcpy\"><a href=\"#realloc、memmove、memcpy\" class=\"headerlink\" title=\"realloc、memmove、memcpy\"></a>realloc、memmove、memcpy</h2><p>attachLists 方法内部<br>1.通过参数 addedCount 确定需要增加的内存空间 newCount，然后通过 realloc 方法重新分配空间。<br>2.空间增加后，通过 memmove 方法将类对象里的信息往后移动 addedCount 距离，把前排 addedCount 大小的空间空出来留给将要添加进来的分类信息。<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理02.png\" alt=\"Category的实现原理01\"></p>\n<p>3.类对象的前排空间空出来后，再通过 memcpy 方法将分类信息拷贝到该空间里。<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理03.png\" alt=\"Category的实现原理01\"></p>\n<h2 id=\"Category-的编译顺序\"><a href=\"#Category-的编译顺序\" class=\"headerlink\" title=\"Category 的编译顺序\"></a>Category 的编译顺序</h2><p>原文件 Persion.m 最先编译，之后添加的分类按照添加顺序，优先编译后来添加的分类。添加顺序：<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理01.png\" alt=\"Category的实现原理01\"></p>\n<p>如图编译顺序为 Persion.m -&gt; Persion+Test.m -&gt; Persion+Demo.m。如果 Persion.m、Persion+Test.m、Persion+Demo.m 中有相同的方法，后编译的类中的方法会优先于先编译的类中的方法（不是覆盖，只是优先被查询到）。</p>\n<p>调用日志：<br><img src=\"/2020/05/18/OC底层/原理/Category的实现原理/Category的实现原理04.png\" alt=\"Category的实现原理01\"></p>\n<p>可以看到 Persion.m 被优先编译，其次是后来添加的 Persion+Test.m，第三个编译的是 最后添加的 Persion+Demo.m。添加顺序决定编译顺序只对分类有效，Persion.m 一定是最先编译的，这一点通过 methodizeClass 方法也能看出来，先处理类对象，再处理分类。</p>\n<h1 id=\"Class-Extension-的实现原理\"><a href=\"#Class-Extension-的实现原理\" class=\"headerlink\" title=\"Class Extension 的实现原理\"></a>Class Extension 的实现原理</h1><h2 id=\"定义-Persion\"><a href=\"#定义-Persion\" class=\"headerlink\" title=\"定义 Persion()\"></a>定义 Persion()</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *categoryTest1;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)run;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Persion</span>()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *categoryTest2;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Persion</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)run</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Person - run\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test2</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Persion 的实现：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> OBJC_IVAR_$_Persion$_categoryTest1;</div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> OBJC_IVAR_$_Persion$_categoryTest2;</div><div class=\"line\"><span class=\"keyword\">struct</span> Persion_IMPL &#123;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"built_in\">NSObject_IMPL</span> <span class=\"built_in\">NSObject_IVARS</span>;</div><div class=\"line\">\t<span class=\"built_in\">NSString</span> * _Nonnull _categoryTest1;</div><div class=\"line\">\t<span class=\"built_in\">NSString</span> *_categoryTest2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>上面👆这块代码可以看到，在 Persion() 中定义的 categoryTest2 已经包含在类 Persion 类对象的结构体里面了。可以证明 Class Extension 在编译的时候，它的数据就已经包含在类信息中了。从实现上来看，Class Extension 不应该叫做匿名分类，叫类扩展更适合。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>运行时入口 objc-os.mm，初始化方法 void _objc_init(void) 方法。</p>\n</li>\n<li><p>objc4 的代码虽然改了，但是实现原理还是没变。</p>\n</li>\n<li><p>Category 的实现原理<br>Category 编译之后的底层结构是 struct category_t，里面存储着分类的对象方法、类方法、属性、协议信息，在程序运行的时候，runtime 会将 Category 的数据，合并到类信息中（类对象、元类对象中）。</p>\n</li>\n<li><p>Category 和 Class Extension 的区别是什么？<br>Class Extension 在编译的时候，它的数据就已经包含在类信息中。Category 是在运行时，才会将数据合并到类信息中。</p>\n</li>\n</ul>"},{"title":"KVO","date":"2020-05-13T06:59:58.000Z","_content":"\nKVO的全称是Key-Value Observing，俗称“键值监听”，可以用于监听某个对象属性值的改变。\n![isa和superclass](KVO/KVO01.png)\n\n<!-- more -->\n\n# KVO 监听\n定义 Person、Observer\n```\n@interface Person : NSObject\n@property (assign, nonatomic) int age;\n@end\n\n@implementation Person\n- (void)setAge:(int)age\n{\n    _age = age;\n    NSLog(@\"setAge: - %d\", age);\n}\n@end\n\n@interface Observer : NSObject\n@end\n\n@implementation Observer\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context\n{\n    NSLog(@\"observeValueForKeyPath - %@\", change);\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        Observer *observer = [[Observer alloc] init];\n        Person *person1 = [[Person alloc] init];\n        Person *person2 = [[Person alloc] init];\n        \n        [person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n        \n        [person1 setAge:10];\n        [person2 setAge:20];\n\n        [person1 removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\nobserveValueForKeyPath - {\n    kind = 1;\n    new = 10;\n    old = 0;\n}\n```\n\nperson2 和 person1 拥有同一个类对象，修改属性 age 时调用的都是对象方法 -(void)setAge。\n\n## 未使用 KVO 监听的对象\n\n* 思考：person2 修改 age 时为什么在 Observer 里没有打印？  \n\n因为 person2 没有使用 KVO 监听，修改属性 age 时调用的是 Person 类对象里的对象方法 -(void)setAge，所以在 Observer 里没有打印。\n\n![isa和superclass](KVO/KVO02.png)\n\n## 使用了 KVO 监听的对象\n\n打印 person1、person2 类对象：\n```\nNSLog(@\"person1添加KVO之前 - %@\", object_getClass(person1));\nNSLog(@\"person1添加KVO之前 - %@\", object_getClass(person2));\n\n[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n        \nNSLog(@\"person1添加KVO之后 - %@\", object_getClass(person1));\nNSLog(@\"person1添加KVO之后 - %@\", object_getClass(person2));\n```\n\n打印结果：\n```\nperson1添加KVO之前 - Person\nperson1添加KVO之前 - Person\nperson1添加KVO之后 - NSKVONotifying_Person\nperson1添加KVO之后 - Person\n```\n\n从打印结果看出，因为 person1 使用了 KVO 监听，所以系统通过 runtime 生成了一个NSKVONotifying_Person 对象，所以 person1 修改属性 age 时调用的是 生成了一个NSKVONotifying_Person 类对象里的对象方法 -(void)setAge。  \n\n### NSKVONotifying_Person 类对象\n\n![isa和superclass](KVO/KVO03.png)\n\n打印对象方法 -(void)setAge 的地址：\n```\nNSLog(@\"person1添加KVO之前 - %p %p\", [person methodForSelector:@selector(setAge:)], [person1 methodForSelector:@selector(setAge:)]);\n\n[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\nNSLog(@\"person1添加KVO之后 - %p %p\", [person methodForSelector:@selector(setAge:)], [person1 methodForSelector:@selector(setAge:)]);\n```\n\n打印结果：\n```\nperson1添加KVO之前 - 0x100001cf0 0x100001cf0\nperson1添加KVO之后 - 0x7fff304afa0b 0x100001cf0\n```\n从打印结果看出，person1 添加 KVO 监听前后，对象方法 -(void)setAge 的地址变了。\n\n打印地址对应的方法名：\n```\n(lldb) p (IMP)0x100001cf0\n(IMP) $0 = 0x0000000100001cf0 (Interview01-KVC`-[Person setAge:] at Person.h:16)\n(lldb) p (IMP)0x7fff304afa0b\n(IMP) $1 = 0x00007fff304afa0b (Foundation`_NSSetIntValueAndNotify)\n```\n\n从打印结果看出，person1 添加 KVO 监听后，修改 age 时调用的是 Foundation 框架里的  _NSSetIntValueAndNotify 方法。\n\n### _NSSetIntValueAndNotify 方法\n_NSSetIntValueAndNotify 方法实现猜想：\n```\n- (void)setAge:(int)age {\n    _NSSetIntValueAndNotify();\n}\n\nvoid _NSSetIntValueAndNotify \n{\n    [self willChangeValueForKey:@\"age\"];\n    [super setAge:age];\n    [self didChagneValueForKey:@\"age\"];\n}\n\n- (void)didChagneValueForKey:(NSString *)key\n{\n    // 通知监听器，某属性值发生了改变\n    [observer observeValueForKeyPath:key ofObject:nil change:nil context:nil];\n}\n```\n\n查看_NSSet*AndNotify的存在：  \n![isa和superclass](KVO/KVO04.png)\n\n\n_NSSet*ValueAndNotify的内部实现：\n```\nvoid _NSSet*ValueAndNotify \n{\n    [self willChangeValueForKey:@\"key\"];\n    // 原来的 setter 实现\n    [self didChagneValueForKey:@\"key\"];\n}\n```\n\n* 调用 willChangeValueForKey:  \n* 调用原来的 setter 实现  \n* 调用 didChangeValueForKey:  \ndidChangeValueForKey: 内部会调用 observer 的 observeValueForKeyPath:ofObject:change:context: 方法\n\n\n\n### NSKVONotifying_Person 元类对象\n打印 person1 的元类对象：\n```\nNSLog(@\"person1添加KVO之后，类对象 - %@, %@\", object_getClass(person1), object_getClass(person2));\nNSLog(@\"person1添加KVO之后，元类对象 - %@, %@\", object_getClass(object_getClass(person1)), object_getClass(object_getClass(person2)));\n```\n\n打印结果：\n```\nperson1添加KVO之后，类对象 - NSKVONotifying_Person, Person\nperson1添加KVO之后，元类对象 - NSKVONotifying_Person, Person\n```\n\nNSKVONotifying_Person 类对象的 isa 指针指向的是 NSKVONotifying_Person 元类对象。\n\n\n### 修改成员变量的值是否会触发 KVO\n```\n@interface MJPerson : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation MJPerson\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJObserver *observer = [[MJObserver alloc] init];\n        MJPerson *person = [[MJPerson alloc] init];\n        \n        [person addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\n        person->_age = 10;\n\n        [person removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n运行后并没有出现打印。虽然 person 添加了 KVO 监听，但是修改 age 时并没有调用 -(void)setAge 方法。\n\n## 小结\n\n* iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)  \n利用 RuntimeAPI 动态生成一个子类，并且让 instance 对象的 isa 指向这个全新的子类。  \n当修改 instance 对象的属性时，会调用 Foundation 的 _NSSetXXXValueAndNotify 函数：  \n```\nwillChangeValueForKey:\n父类原来的setter\ndidChangeValueForKey:\n```\n\ndidChangeValueForKey: 内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）\n\n* 如何手动触发KVO？  \n手动调用 willChangeValueForKey: 和 didChangeValueForKey:  \n```\nwillChangeValueForKey:\nperson->age = 10;\ndidChangeValueForKey:\n```\n\n* 直接修改成员变量会触发KVO么？  \n不会触发，修改 age 时并没有调用 -(void)setAge 方法。\n\n\n# KVC\nKVC 的全称是 Key-Value Coding，俗称“键值编码”，可以通过一个 key 来访问某个属性。常见的API有：\n```\n- (void)setValue:(id)value forKeyPath:(NSString *)keyPath;\n- (void)setValue:(id)value forKey:(NSString *)key;\n- (id)valueForKeyPath:(NSString *)keyPath;\n- (id)valueForKey:(NSString *)key; \n```\n\n## setValue: forKey: 原理\n![isa和superclass](KVO/KVO05.png)\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _isAge;\n    int age;\n    int isAge;\n}\n@end\n\n@implementation Person\n- (void)setAge:(int)age\n{\n    NSLog(@\"setAge: - %d\", age);\n}\n\n- (void)_setAge:(int)age\n{\n    NSLog(@\"_setAge: - %d\", age);\n}\n\n+ (BOOL)accessInstanceVariablesDirectly\n{\n    return YES; //默认的返回值就是YES（YES表示可以访问成员变量）\n}\n@end\n```\n\n通过你 kvc 修改 age 的值：\n```\nPerson *person = [[Person alloc] init];\n[person setValue:@10 forKey:@\"age\"];\n```\n\n依次注释掉 setAge:、_setAge: 方法，可以发现 setValue: forKey: 会优先调用 setAge:，setAge: 不存在时会调用 _setAge: 方法。如果    setAge: 和 _setAge: 都不存在时，会调用 + (BOOL)accessInstanceVariablesDirectly 方法判断是否可以访问成员变量。\n\n打断点后，可以在控制台看到 _age、_isAge、age、isAge 被依次赋值：\n![isa和superclass](KVO/KVO07.png)\n\n## KVC 触发 KVO\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int age;\n}\n@end\n\n@implementation Person\n- (void)willChangeValueForKey:(NSString *)key\n{\n    [super willChangeValueForKey:key];\n    NSLog(@\"willChangeValueForKey - %@\", key);\n}\n\n- (void)didChangeValueForKey:(NSString *)key\n{\n    NSLog(@\"didChangeValueForKey - begin - %@\", key);\n    [super didChangeValueForKey:key];\n    NSLog(@\"didChangeValueForKey - end - %@\", key);\n}\n\n+ (BOOL)accessInstanceVariablesDirectly\n{\n    return YES; //默认的返回值就是YES（YES表示可以访问成员变量）\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJObserver *observer = [[MJObserver alloc] init];\n        MJPerson *person = [[MJPerson alloc] init];\n        \n        [person addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\n        [person setValue:@10 forKey:@\"age\"];\n\n        [person removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\nwillChangeValueForKey - age\ndidChangeValueForKey - begin - age\nobserveValueForKeyPath - {\n    kind = 1;\n    new = 10;\n    old = 0;\n}\ndidChangeValueForKey - end - age\n```\n\n### setKey 和 _setKey 存在\n添加 KVO 监听时会调用一次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用一次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 \n\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_05.png)\nsetValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_06.png)\n\n### setKey 和 _setKey 不存在\n添加 KVO 监听时会调用两次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用两次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 \n\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_01.png)\n添加 KVO 监听第二次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_02.png)\nsetValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_03.png)\nsetValue:forKey: 第二次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_04.png)\n\n## valueForKey: 原理\n![isa和superclass](KVO/KVO06.png)\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _isAge;\n    int age;\n    int isAge;\n}\n@end\n\n@implementation Person\n- (int)getAge\n{\n    return 11;\n}\n\n- (int)age\n{\n    return 12;\n}\n\n- (int)isAge\n{\n    return 13;\n}\n\n- (int)_age\n{\n    return 14;\n}\n@end\n```\n\n依次注释掉 - (int)getAge、- (int)age、- (int)isAge、- (int)_age 方法，从打印结果可以发现，setValue: forKey: 方法会优先调用 - (void)setAge:(int)age，- (void)setAge:(int)age 不存在时会调用 - (void)_setAge:(int)age 方法，以此类推。\n\n### setKey 和 _setKey 存在\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_07.png)\n\n### setKey 和 _setKey 不存在\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_08.png)\nvalueForKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_09.png)\n\n## 小结\n\n* 通过KVC修改属性会触发KVO么？  \n会触发KVO。通过KVC修改属性会调用 willChangeValueForKey: 和 didChangeValueForKey: 方法，而 didChangeValueForKey: 方法内部会触发 KVO 监听。  \n\n* KVC 的赋值和取值过程是怎样的？原理是什么？  \n赋值：setValue:forKey: 会按照 setKey:/_setKey: 顺序查找方法，如果方法存在，直接调用方法赋值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。如果可以，会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到后赋值。如果不可以访问成员变量，或者成员变量不存在，就会调用 setValue:forUndefinedKey: 并抛出异常 NSUnknownKeyException。  \n  \n  取值：valueForKey: 会按照 getKey/key/isKey/_key 顺序查找方法，如果方法存在，直接调用方法取值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到成员变量后取值。如果不可以访问成员变量，或者成员变量不存在，就会调用 valueForUndefinedKey: 并抛出异常 NSUnknownKeyException。  \n\n\n","source":"_posts/OC底层/原理/KVO.md","raw":"---\ntitle: KVO\ndate: 2020-05-13 14:59:58\ntags: OC底层原理\n---\n\nKVO的全称是Key-Value Observing，俗称“键值监听”，可以用于监听某个对象属性值的改变。\n![isa和superclass](KVO/KVO01.png)\n\n<!-- more -->\n\n# KVO 监听\n定义 Person、Observer\n```\n@interface Person : NSObject\n@property (assign, nonatomic) int age;\n@end\n\n@implementation Person\n- (void)setAge:(int)age\n{\n    _age = age;\n    NSLog(@\"setAge: - %d\", age);\n}\n@end\n\n@interface Observer : NSObject\n@end\n\n@implementation Observer\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context\n{\n    NSLog(@\"observeValueForKeyPath - %@\", change);\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        Observer *observer = [[Observer alloc] init];\n        Person *person1 = [[Person alloc] init];\n        Person *person2 = [[Person alloc] init];\n        \n        [person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n        \n        [person1 setAge:10];\n        [person2 setAge:20];\n\n        [person1 removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\nobserveValueForKeyPath - {\n    kind = 1;\n    new = 10;\n    old = 0;\n}\n```\n\nperson2 和 person1 拥有同一个类对象，修改属性 age 时调用的都是对象方法 -(void)setAge。\n\n## 未使用 KVO 监听的对象\n\n* 思考：person2 修改 age 时为什么在 Observer 里没有打印？  \n\n因为 person2 没有使用 KVO 监听，修改属性 age 时调用的是 Person 类对象里的对象方法 -(void)setAge，所以在 Observer 里没有打印。\n\n![isa和superclass](KVO/KVO02.png)\n\n## 使用了 KVO 监听的对象\n\n打印 person1、person2 类对象：\n```\nNSLog(@\"person1添加KVO之前 - %@\", object_getClass(person1));\nNSLog(@\"person1添加KVO之前 - %@\", object_getClass(person2));\n\n[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n        \nNSLog(@\"person1添加KVO之后 - %@\", object_getClass(person1));\nNSLog(@\"person1添加KVO之后 - %@\", object_getClass(person2));\n```\n\n打印结果：\n```\nperson1添加KVO之前 - Person\nperson1添加KVO之前 - Person\nperson1添加KVO之后 - NSKVONotifying_Person\nperson1添加KVO之后 - Person\n```\n\n从打印结果看出，因为 person1 使用了 KVO 监听，所以系统通过 runtime 生成了一个NSKVONotifying_Person 对象，所以 person1 修改属性 age 时调用的是 生成了一个NSKVONotifying_Person 类对象里的对象方法 -(void)setAge。  \n\n### NSKVONotifying_Person 类对象\n\n![isa和superclass](KVO/KVO03.png)\n\n打印对象方法 -(void)setAge 的地址：\n```\nNSLog(@\"person1添加KVO之前 - %p %p\", [person methodForSelector:@selector(setAge:)], [person1 methodForSelector:@selector(setAge:)]);\n\n[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\nNSLog(@\"person1添加KVO之后 - %p %p\", [person methodForSelector:@selector(setAge:)], [person1 methodForSelector:@selector(setAge:)]);\n```\n\n打印结果：\n```\nperson1添加KVO之前 - 0x100001cf0 0x100001cf0\nperson1添加KVO之后 - 0x7fff304afa0b 0x100001cf0\n```\n从打印结果看出，person1 添加 KVO 监听前后，对象方法 -(void)setAge 的地址变了。\n\n打印地址对应的方法名：\n```\n(lldb) p (IMP)0x100001cf0\n(IMP) $0 = 0x0000000100001cf0 (Interview01-KVC`-[Person setAge:] at Person.h:16)\n(lldb) p (IMP)0x7fff304afa0b\n(IMP) $1 = 0x00007fff304afa0b (Foundation`_NSSetIntValueAndNotify)\n```\n\n从打印结果看出，person1 添加 KVO 监听后，修改 age 时调用的是 Foundation 框架里的  _NSSetIntValueAndNotify 方法。\n\n### _NSSetIntValueAndNotify 方法\n_NSSetIntValueAndNotify 方法实现猜想：\n```\n- (void)setAge:(int)age {\n    _NSSetIntValueAndNotify();\n}\n\nvoid _NSSetIntValueAndNotify \n{\n    [self willChangeValueForKey:@\"age\"];\n    [super setAge:age];\n    [self didChagneValueForKey:@\"age\"];\n}\n\n- (void)didChagneValueForKey:(NSString *)key\n{\n    // 通知监听器，某属性值发生了改变\n    [observer observeValueForKeyPath:key ofObject:nil change:nil context:nil];\n}\n```\n\n查看_NSSet*AndNotify的存在：  \n![isa和superclass](KVO/KVO04.png)\n\n\n_NSSet*ValueAndNotify的内部实现：\n```\nvoid _NSSet*ValueAndNotify \n{\n    [self willChangeValueForKey:@\"key\"];\n    // 原来的 setter 实现\n    [self didChagneValueForKey:@\"key\"];\n}\n```\n\n* 调用 willChangeValueForKey:  \n* 调用原来的 setter 实现  \n* 调用 didChangeValueForKey:  \ndidChangeValueForKey: 内部会调用 observer 的 observeValueForKeyPath:ofObject:change:context: 方法\n\n\n\n### NSKVONotifying_Person 元类对象\n打印 person1 的元类对象：\n```\nNSLog(@\"person1添加KVO之后，类对象 - %@, %@\", object_getClass(person1), object_getClass(person2));\nNSLog(@\"person1添加KVO之后，元类对象 - %@, %@\", object_getClass(object_getClass(person1)), object_getClass(object_getClass(person2)));\n```\n\n打印结果：\n```\nperson1添加KVO之后，类对象 - NSKVONotifying_Person, Person\nperson1添加KVO之后，元类对象 - NSKVONotifying_Person, Person\n```\n\nNSKVONotifying_Person 类对象的 isa 指针指向的是 NSKVONotifying_Person 元类对象。\n\n\n### 修改成员变量的值是否会触发 KVO\n```\n@interface MJPerson : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation MJPerson\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJObserver *observer = [[MJObserver alloc] init];\n        MJPerson *person = [[MJPerson alloc] init];\n        \n        [person addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\n        person->_age = 10;\n\n        [person removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n运行后并没有出现打印。虽然 person 添加了 KVO 监听，但是修改 age 时并没有调用 -(void)setAge 方法。\n\n## 小结\n\n* iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)  \n利用 RuntimeAPI 动态生成一个子类，并且让 instance 对象的 isa 指向这个全新的子类。  \n当修改 instance 对象的属性时，会调用 Foundation 的 _NSSetXXXValueAndNotify 函数：  \n```\nwillChangeValueForKey:\n父类原来的setter\ndidChangeValueForKey:\n```\n\ndidChangeValueForKey: 内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）\n\n* 如何手动触发KVO？  \n手动调用 willChangeValueForKey: 和 didChangeValueForKey:  \n```\nwillChangeValueForKey:\nperson->age = 10;\ndidChangeValueForKey:\n```\n\n* 直接修改成员变量会触发KVO么？  \n不会触发，修改 age 时并没有调用 -(void)setAge 方法。\n\n\n# KVC\nKVC 的全称是 Key-Value Coding，俗称“键值编码”，可以通过一个 key 来访问某个属性。常见的API有：\n```\n- (void)setValue:(id)value forKeyPath:(NSString *)keyPath;\n- (void)setValue:(id)value forKey:(NSString *)key;\n- (id)valueForKeyPath:(NSString *)keyPath;\n- (id)valueForKey:(NSString *)key; \n```\n\n## setValue: forKey: 原理\n![isa和superclass](KVO/KVO05.png)\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _isAge;\n    int age;\n    int isAge;\n}\n@end\n\n@implementation Person\n- (void)setAge:(int)age\n{\n    NSLog(@\"setAge: - %d\", age);\n}\n\n- (void)_setAge:(int)age\n{\n    NSLog(@\"_setAge: - %d\", age);\n}\n\n+ (BOOL)accessInstanceVariablesDirectly\n{\n    return YES; //默认的返回值就是YES（YES表示可以访问成员变量）\n}\n@end\n```\n\n通过你 kvc 修改 age 的值：\n```\nPerson *person = [[Person alloc] init];\n[person setValue:@10 forKey:@\"age\"];\n```\n\n依次注释掉 setAge:、_setAge: 方法，可以发现 setValue: forKey: 会优先调用 setAge:，setAge: 不存在时会调用 _setAge: 方法。如果    setAge: 和 _setAge: 都不存在时，会调用 + (BOOL)accessInstanceVariablesDirectly 方法判断是否可以访问成员变量。\n\n打断点后，可以在控制台看到 _age、_isAge、age、isAge 被依次赋值：\n![isa和superclass](KVO/KVO07.png)\n\n## KVC 触发 KVO\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int age;\n}\n@end\n\n@implementation Person\n- (void)willChangeValueForKey:(NSString *)key\n{\n    [super willChangeValueForKey:key];\n    NSLog(@\"willChangeValueForKey - %@\", key);\n}\n\n- (void)didChangeValueForKey:(NSString *)key\n{\n    NSLog(@\"didChangeValueForKey - begin - %@\", key);\n    [super didChangeValueForKey:key];\n    NSLog(@\"didChangeValueForKey - end - %@\", key);\n}\n\n+ (BOOL)accessInstanceVariablesDirectly\n{\n    return YES; //默认的返回值就是YES（YES表示可以访问成员变量）\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJObserver *observer = [[MJObserver alloc] init];\n        MJPerson *person = [[MJPerson alloc] init];\n        \n        [person addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL];\n\n        [person setValue:@10 forKey:@\"age\"];\n\n        [person removeObserver:observer forKeyPath:@\"age\"];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\nwillChangeValueForKey - age\ndidChangeValueForKey - begin - age\nobserveValueForKeyPath - {\n    kind = 1;\n    new = 10;\n    old = 0;\n}\ndidChangeValueForKey - end - age\n```\n\n### setKey 和 _setKey 存在\n添加 KVO 监听时会调用一次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用一次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 \n\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_05.png)\nsetValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_06.png)\n\n### setKey 和 _setKey 不存在\n添加 KVO 监听时会调用两次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用两次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 \n\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_01.png)\n添加 KVO 监听第二次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_02.png)\nsetValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_03.png)\nsetValue:forKey: 第二次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_04.png)\n\n## valueForKey: 原理\n![isa和superclass](KVO/KVO06.png)\n\n定义 Person：\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _isAge;\n    int age;\n    int isAge;\n}\n@end\n\n@implementation Person\n- (int)getAge\n{\n    return 11;\n}\n\n- (int)age\n{\n    return 12;\n}\n\n- (int)isAge\n{\n    return 13;\n}\n\n- (int)_age\n{\n    return 14;\n}\n@end\n```\n\n依次注释掉 - (int)getAge、- (int)age、- (int)isAge、- (int)_age 方法，从打印结果可以发现，setValue: forKey: 方法会优先调用 - (void)setAge:(int)age，- (void)setAge:(int)age 不存在时会调用 - (void)_setAge:(int)age 方法，以此类推。\n\n### setKey 和 _setKey 存在\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_07.png)\n\n### setKey 和 _setKey 不存在\n添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_08.png)\nvalueForKey: 第一次调用 accessInstanceVariablesDirectly 方法：\n![isa和superclass](KVO/accessInstanceVariablesDirectly_09.png)\n\n## 小结\n\n* 通过KVC修改属性会触发KVO么？  \n会触发KVO。通过KVC修改属性会调用 willChangeValueForKey: 和 didChangeValueForKey: 方法，而 didChangeValueForKey: 方法内部会触发 KVO 监听。  \n\n* KVC 的赋值和取值过程是怎样的？原理是什么？  \n赋值：setValue:forKey: 会按照 setKey:/_setKey: 顺序查找方法，如果方法存在，直接调用方法赋值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。如果可以，会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到后赋值。如果不可以访问成员变量，或者成员变量不存在，就会调用 setValue:forUndefinedKey: 并抛出异常 NSUnknownKeyException。  \n  \n  取值：valueForKey: 会按照 getKey/key/isKey/_key 顺序查找方法，如果方法存在，直接调用方法取值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到成员变量后取值。如果不可以访问成员变量，或者成员变量不存在，就会调用 valueForUndefinedKey: 并抛出异常 NSUnknownKeyException。  \n\n\n","slug":"OC底层/原理/KVO","published":1,"updated":"2020-05-14T16:37:54.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40ar0000lte03k1x1cfed","content":"<p>KVO的全称是Key-Value Observing，俗称“键值监听”，可以用于监听某个对象属性值的改变。<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO01.png\" alt=\"isa和superclass\"></p>\n<a id=\"more\"></a>\n<h1 id=\"KVO-监听\"><a href=\"#KVO-监听\" class=\"headerlink\" title=\"KVO 监听\"></a>KVO 监听</h1><p>定义 Person、Observer<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> age;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    _age = age;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Observer</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Observer</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSKeyValueChangeKey</span>,<span class=\"keyword\">id</span>&gt; *)change context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"observeValueForKeyPath - %@\"</span>, change);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        Observer *observer = [[Observer alloc] init];</div><div class=\"line\">        Person *person1 = [[Person alloc] init];</div><div class=\"line\">        Person *person2 = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person1 addObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> | <span class=\"built_in\">NSKeyValueObservingOptionOld</span> context:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        </div><div class=\"line\">        [person1 setAge:<span class=\"number\">10</span>];</div><div class=\"line\">        [person2 setAge:<span class=\"number\">20</span>];</div><div class=\"line\"></div><div class=\"line\">        [person1 removeObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">observeValueForKeyPath</span> - &#123;</div><div class=\"line\">    <span class=\"attribute\">kind</span> = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">new</span> = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">old</span> = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>person2 和 person1 拥有同一个类对象，修改属性 age 时调用的都是对象方法 -(void)setAge。</p>\n<h2 id=\"未使用-KVO-监听的对象\"><a href=\"#未使用-KVO-监听的对象\" class=\"headerlink\" title=\"未使用 KVO 监听的对象\"></a>未使用 KVO 监听的对象</h2><ul>\n<li>思考：person2 修改 age 时为什么在 Observer 里没有打印？  </li>\n</ul>\n<p>因为 person2 没有使用 KVO 监听，修改属性 age 时调用的是 Person 类对象里的对象方法 -(void)setAge，所以在 Observer 里没有打印。</p>\n<p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO02.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"使用了-KVO-监听的对象\"><a href=\"#使用了-KVO-监听的对象\" class=\"headerlink\" title=\"使用了 KVO 监听的对象\"></a>使用了 KVO 监听的对象</h2><p>打印 person1、person2 类对象：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之前 - %@\"</span>, object_getClass(person1));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之前 - %@\"</span>, object_getClass(person2));</div><div class=\"line\"></div><div class=\"line\">[person1 addObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> | <span class=\"built_in\">NSKeyValueObservingOptionOld</span> context:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之后 - %@\"</span>, object_getClass(person1));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之后 - %@\"</span>, object_getClass(person2));</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之前 - <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之前 - <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之后 - NSKVONotifying_Person</div><div class=\"line\">person1添加KVO之后 - <span class=\"keyword\">Person</span></div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，因为 person1 使用了 KVO 监听，所以系统通过 runtime 生成了一个NSKVONotifying_Person 对象，所以 person1 修改属性 age 时调用的是 生成了一个NSKVONotifying_Person 类对象里的对象方法 -(void)setAge。  </p>\n<h3 id=\"NSKVONotifying-Person-类对象\"><a href=\"#NSKVONotifying-Person-类对象\" class=\"headerlink\" title=\"NSKVONotifying_Person 类对象\"></a>NSKVONotifying_Person 类对象</h3><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO03.png\" alt=\"isa和superclass\"></p>\n<p>打印对象方法 -(void)setAge 的地址：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"person1添加KVO之前 - %p %p\"</span>, [person <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)], [person1 <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL]</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"person1添加KVO之后 - %p %p\"</span>, [person <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)], [person1 <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)]);</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之前 - <span class=\"number\">0x100001cf</span>0 <span class=\"number\">0x100001cf</span>0</div><div class=\"line\">person1添加KVO之后 - <span class=\"number\">0x7fff304af</span>a0b <span class=\"number\">0x100001cf</span>0</div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，person1 添加 KVO 监听前后，对象方法 -(void)setAge 的地址变了。</p>\n<p>打印地址对应的方法名：<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">(lldb)</span> p <span class=\"comment\">(IMP)</span><span class=\"number\">0</span>x<span class=\"number\">100001</span>cf<span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">(IMP)</span> $<span class=\"number\">0</span> = <span class=\"number\">0</span>x<span class=\"number\">0000000100001</span>cf<span class=\"number\">0</span> <span class=\"comment\">(Interview01-KVC`-[Person setAge:] at Person.h:16)</span></div><div class=\"line\"><span class=\"comment\">(lldb)</span> p <span class=\"comment\">(IMP)</span><span class=\"number\">0</span>x<span class=\"number\">7</span>fff<span class=\"number\">304</span>afa<span class=\"number\">0</span>b</div><div class=\"line\"><span class=\"comment\">(IMP)</span> $<span class=\"number\">1</span> = <span class=\"number\">0</span>x<span class=\"number\">00007</span>fff<span class=\"number\">304</span>afa<span class=\"number\">0</span>b <span class=\"comment\">(Foundation`_NSSetIntValueAndNotify)</span></div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，person1 添加 KVO 监听后，修改 age 时调用的是 Foundation 框架里的  _NSSetIntValueAndNotify 方法。</p>\n<h3 id=\"NSSetIntValueAndNotify-方法\"><a href=\"#NSSetIntValueAndNotify-方法\" class=\"headerlink\" title=\"_NSSetIntValueAndNotify 方法\"></a>_NSSetIntValueAndNotify 方法</h3><p>_NSSetIntValueAndNotify 方法实现猜想：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">setAge:</span>(<span class=\"keyword\">int</span>)age &#123;</div><div class=\"line\">    _NSSetIntValueAndNotify();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> _NSSetIntValueAndNotify </div><div class=\"line\">&#123;</div><div class=\"line\">    [self <span class=\"string\">willChangeValueForKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">setAge:</span>age];</div><div class=\"line\">    [self <span class=\"string\">didChagneValueForKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">didChagneValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 通知监听器，某属性值发生了改变</span></div><div class=\"line\">    [observer <span class=\"string\">observeValueForKeyPath:</span>key <span class=\"string\">ofObject:</span>nil <span class=\"string\">change:</span>nil <span class=\"string\">context:</span>nil];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看_NSSet*AndNotify的存在：<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO04.png\" alt=\"isa和superclass\"></p>\n<p>_NSSet*ValueAndNotify的内部实现：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _NSSet*ValueAndNotify </div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"meta\">self willChangeValueForKey:@<span class=\"meta-string\">\"key\"</span></span>];</div><div class=\"line\">    <span class=\"comment\">// 原来的 setter 实现</span></div><div class=\"line\">    [<span class=\"meta\">self didChagneValueForKey:@<span class=\"meta-string\">\"key\"</span></span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>调用 willChangeValueForKey:  </li>\n<li>调用原来的 setter 实现  </li>\n<li>调用 didChangeValueForKey:<br>didChangeValueForKey: 内部会调用 observer 的 observeValueForKeyPath:ofObject:change:context: 方法</li>\n</ul>\n<h3 id=\"NSKVONotifying-Person-元类对象\"><a href=\"#NSKVONotifying-Person-元类对象\" class=\"headerlink\" title=\"NSKVONotifying_Person 元类对象\"></a>NSKVONotifying_Person 元类对象</h3><p>打印 person1 的元类对象：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSLog(@<span class=\"string\">\"person1添加KVO之后，类对象 - %@, %@\"</span>, object_getClass(<span class=\"name\">person1</span>), object_getClass(<span class=\"name\">person2</span>))<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"person1添加KVO之后，元类对象 - %@, %@\"</span>, object_getClass(<span class=\"name\">object_getClass</span>(<span class=\"name\">person1</span>)), object_getClass(<span class=\"name\">object_getClass</span>(<span class=\"name\">person2</span>)))<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之后，类对象 - NSKVONotifying_Person, <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之后，元类对象 - NSKVONotifying_Person, <span class=\"keyword\">Person</span></div></pre></td></tr></table></figure></p>\n<p>NSKVONotifying_Person 类对象的 isa 指针指向的是 NSKVONotifying_Person 元类对象。</p>\n<h3 id=\"修改成员变量的值是否会触发-KVO\"><a href=\"#修改成员变量的值是否会触发-KVO\" class=\"headerlink\" title=\"修改成员变量的值是否会触发 KVO\"></a>修改成员变量的值是否会触发 KVO</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@interface</span> <span class=\"string\">MJPerson :</span> NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@implementation</span> MJPerson</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, const <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJObserver *observer = [[MJObserver alloc] init];</div><div class=\"line\">        MJPerson *person = [[MJPerson alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person <span class=\"string\">addObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span> <span class=\"string\">options:</span>NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld <span class=\"string\">context:</span>NULL];</div><div class=\"line\"></div><div class=\"line\">        person-&gt;_age = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">removeObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行后并没有出现打印。虽然 person 添加了 KVO 监听，但是修改 age 时并没有调用 -(void)setAge 方法。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)<br>利用 RuntimeAPI 动态生成一个子类，并且让 instance 对象的 isa 指向这个全新的子类。<br>当修改 instance 对象的属性时，会调用 Foundation 的 _NSSetXXXValueAndNotify 函数：  <figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">willChangeValueForKey:</span></div><div class=\"line\">父类原来的setter</div><div class=\"line\"><span class=\"symbol\">didChangeValueForKey:</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>didChangeValueForKey: 内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</p>\n<ul>\n<li><p>如何手动触发KVO？<br>手动调用 willChangeValueForKey: 和 didChangeValueForKey:  </p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">willChangeValueForKey:</span></div><div class=\"line\">person-&gt;age = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"symbol\">didChangeValueForKey:</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>直接修改成员变量会触发KVO么？<br>不会触发，修改 age 时并没有调用 -(void)setAge 方法。</p>\n</li>\n</ul>\n<h1 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h1><p>KVC 的全称是 Key-Value Coding，俗称“键值编码”，可以通过一个 key 来访问某个属性。常见的API有：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"params\">(void)</span>setValue:<span class=\"params\">(id)</span>value forKeyPath:<span class=\"params\">(NSString *)</span>keyPath;</div><div class=\"line\">- <span class=\"params\">(void)</span>setValue:<span class=\"params\">(id)</span>value forKey:<span class=\"params\">(NSString *)</span>key;</div><div class=\"line\">- <span class=\"params\">(id)</span>valueForKeyPath:<span class=\"params\">(NSString *)</span>keyPath;</div><div class=\"line\">- <span class=\"params\">(id)</span>valueForKey:<span class=\"params\">(NSString *)</span>key;</div></pre></td></tr></table></figure></p>\n<h2 id=\"setValue-forKey-原理\"><a href=\"#setValue-forKey-原理\" class=\"headerlink\" title=\"setValue: forKey: 原理\"></a>setValue: forKey: 原理</h2><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO05.png\" alt=\"isa和superclass\"></p>\n<p>定义 Person：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _isAge;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAge;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)_setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"_setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)accessInstanceVariablesDirectly</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; <span class=\"comment\">//默认的返回值就是YES（YES表示可以访问成员变量）</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>通过你 kvc 修改 age 的值：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Person</span> *<span class=\"keyword\">person</span> = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div><div class=\"line\"><span class=\"comment\">[person setValue:@10 forKey:@\"age\"]</span>;</div></pre></td></tr></table></figure></p>\n<p>依次注释掉 setAge:、_setAge: 方法，可以发现 setValue: forKey: 会优先调用 setAge:，setAge: 不存在时会调用 _setAge: 方法。如果    setAge: 和 _setAge: 都不存在时，会调用 + (BOOL)accessInstanceVariablesDirectly 方法判断是否可以访问成员变量。</p>\n<p>打断点后，可以在控制台看到 _age、_isAge、age、isAge 被依次赋值：<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO07.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"KVC-触发-KVO\"><a href=\"#KVC-触发-KVO\" class=\"headerlink\" title=\"KVC 触发 KVO\"></a>KVC 触发 KVO</h2><p>定义 Person：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@interface</span> <span class=\"string\">Person :</span> NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@implementation</span> Person</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">willChangeValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">willChangeValueForKey:</span>key];</div><div class=\"line\">    NSLog(@<span class=\"string\">\"willChangeValueForKey - %@\"</span>, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">didChangeValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"didChangeValueForKey - begin - %@\"</span>, key);</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">didChangeValueForKey:</span>key];</div><div class=\"line\">    NSLog(@<span class=\"string\">\"didChangeValueForKey - end - %@\"</span>, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)accessInstanceVariablesDirectly</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> YES; <span class=\"comment\">//默认的返回值就是YES（YES表示可以访问成员变量）</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, const <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJObserver *observer = [[MJObserver alloc] init];</div><div class=\"line\">        MJPerson *person = [[MJPerson alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person <span class=\"string\">addObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span> <span class=\"string\">options:</span>NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld <span class=\"string\">context:</span>NULL];</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">setValue:</span>@<span class=\"number\">10</span> <span class=\"string\">forKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">removeObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">willChangeValueForKey - age</div><div class=\"line\"><span class=\"keyword\">didChangeValueForKey </span>- <span class=\"keyword\">begin </span>- age</div><div class=\"line\">observeValueForKeyPath - &#123;</div><div class=\"line\">    kind = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    new = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\">    old = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">didChangeValueForKey </span>- end - age</div></pre></td></tr></table></figure></p>\n<h3 id=\"setKey-和-setKey-存在\"><a href=\"#setKey-和-setKey-存在\" class=\"headerlink\" title=\"setKey 和 _setKey 存在\"></a>setKey 和 _setKey 存在</h3><p>添加 KVO 监听时会调用一次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用一次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 </p>\n<p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_05.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_06.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"setKey-和-setKey-不存在\"><a href=\"#setKey-和-setKey-不存在\" class=\"headerlink\" title=\"setKey 和 _setKey 不存在\"></a>setKey 和 _setKey 不存在</h3><p>添加 KVO 监听时会调用两次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用两次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 </p>\n<p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_01.png\" alt=\"isa和superclass\"><br>添加 KVO 监听第二次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_02.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_03.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第二次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_04.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"valueForKey-原理\"><a href=\"#valueForKey-原理\" class=\"headerlink\" title=\"valueForKey: 原理\"></a>valueForKey: 原理</h2><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO06.png\" alt=\"isa和superclass\"></p>\n<p>定义 Person：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _isAge;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAge;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">int</span>)getAge</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)isAge</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)_age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>依次注释掉 - (int)getAge、- (int)age、- (int)isAge、- (int)_age 方法，从打印结果可以发现，setValue: forKey: 方法会优先调用 - (void)setAge:(int)age，- (void)setAge:(int)age 不存在时会调用 - (void)_setAge:(int)age 方法，以此类推。</p>\n<h3 id=\"setKey-和-setKey-存在-1\"><a href=\"#setKey-和-setKey-存在-1\" class=\"headerlink\" title=\"setKey 和 _setKey 存在\"></a>setKey 和 _setKey 存在</h3><p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_07.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"setKey-和-setKey-不存在-1\"><a href=\"#setKey-和-setKey-不存在-1\" class=\"headerlink\" title=\"setKey 和 _setKey 不存在\"></a>setKey 和 _setKey 不存在</h3><p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_08.png\" alt=\"isa和superclass\"><br>valueForKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_09.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>通过KVC修改属性会触发KVO么？<br>会触发KVO。通过KVC修改属性会调用 willChangeValueForKey: 和 didChangeValueForKey: 方法，而 didChangeValueForKey: 方法内部会触发 KVO 监听。  </p>\n</li>\n<li><p>KVC 的赋值和取值过程是怎样的？原理是什么？<br>赋值：setValue:forKey: 会按照 setKey:/_setKey: 顺序查找方法，如果方法存在，直接调用方法赋值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。如果可以，会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到后赋值。如果不可以访问成员变量，或者成员变量不存在，就会调用 setValue:forUndefinedKey: 并抛出异常 NSUnknownKeyException。  </p>\n<p>取值：valueForKey: 会按照 getKey/key/isKey/_key 顺序查找方法，如果方法存在，直接调用方法取值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到成员变量后取值。如果不可以访问成员变量，或者成员变量不存在，就会调用 valueForUndefinedKey: 并抛出异常 NSUnknownKeyException。  </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>KVO的全称是Key-Value Observing，俗称“键值监听”，可以用于监听某个对象属性值的改变。<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO01.png\" alt=\"isa和superclass\"></p>","more":"<h1 id=\"KVO-监听\"><a href=\"#KVO-监听\" class=\"headerlink\" title=\"KVO 监听\"></a>KVO 监听</h1><p>定义 Person、Observer<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> age;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    _age = age;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Observer</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Observer</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSKeyValueChangeKey</span>,<span class=\"keyword\">id</span>&gt; *)change context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"observeValueForKeyPath - %@\"</span>, change);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        Observer *observer = [[Observer alloc] init];</div><div class=\"line\">        Person *person1 = [[Person alloc] init];</div><div class=\"line\">        Person *person2 = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person1 addObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> | <span class=\"built_in\">NSKeyValueObservingOptionOld</span> context:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        </div><div class=\"line\">        [person1 setAge:<span class=\"number\">10</span>];</div><div class=\"line\">        [person2 setAge:<span class=\"number\">20</span>];</div><div class=\"line\"></div><div class=\"line\">        [person1 removeObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">observeValueForKeyPath</span> - &#123;</div><div class=\"line\">    <span class=\"attribute\">kind</span> = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">new</span> = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">old</span> = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>person2 和 person1 拥有同一个类对象，修改属性 age 时调用的都是对象方法 -(void)setAge。</p>\n<h2 id=\"未使用-KVO-监听的对象\"><a href=\"#未使用-KVO-监听的对象\" class=\"headerlink\" title=\"未使用 KVO 监听的对象\"></a>未使用 KVO 监听的对象</h2><ul>\n<li>思考：person2 修改 age 时为什么在 Observer 里没有打印？  </li>\n</ul>\n<p>因为 person2 没有使用 KVO 监听，修改属性 age 时调用的是 Person 类对象里的对象方法 -(void)setAge，所以在 Observer 里没有打印。</p>\n<p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO02.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"使用了-KVO-监听的对象\"><a href=\"#使用了-KVO-监听的对象\" class=\"headerlink\" title=\"使用了 KVO 监听的对象\"></a>使用了 KVO 监听的对象</h2><p>打印 person1、person2 类对象：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之前 - %@\"</span>, object_getClass(person1));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之前 - %@\"</span>, object_getClass(person2));</div><div class=\"line\"></div><div class=\"line\">[person1 addObserver:observer forKeyPath:<span class=\"string\">@\"age\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> | <span class=\"built_in\">NSKeyValueObservingOptionOld</span> context:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之后 - %@\"</span>, object_getClass(person1));</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person1添加KVO之后 - %@\"</span>, object_getClass(person2));</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之前 - <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之前 - <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之后 - NSKVONotifying_Person</div><div class=\"line\">person1添加KVO之后 - <span class=\"keyword\">Person</span></div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，因为 person1 使用了 KVO 监听，所以系统通过 runtime 生成了一个NSKVONotifying_Person 对象，所以 person1 修改属性 age 时调用的是 生成了一个NSKVONotifying_Person 类对象里的对象方法 -(void)setAge。  </p>\n<h3 id=\"NSKVONotifying-Person-类对象\"><a href=\"#NSKVONotifying-Person-类对象\" class=\"headerlink\" title=\"NSKVONotifying_Person 类对象\"></a>NSKVONotifying_Person 类对象</h3><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO03.png\" alt=\"isa和superclass\"></p>\n<p>打印对象方法 -(void)setAge 的地址：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"person1添加KVO之前 - %p %p\"</span>, [person <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)], [person1 <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-attr\">[person1 addObserver:observer forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:NULL]</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"person1添加KVO之后 - %p %p\"</span>, [person <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)], [person1 <span class=\"attribute\">methodForSelector</span>:<span class=\"variable\">@selector</span>(<span class=\"attribute\">setAge</span>:)]);</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之前 - <span class=\"number\">0x100001cf</span>0 <span class=\"number\">0x100001cf</span>0</div><div class=\"line\">person1添加KVO之后 - <span class=\"number\">0x7fff304af</span>a0b <span class=\"number\">0x100001cf</span>0</div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，person1 添加 KVO 监听前后，对象方法 -(void)setAge 的地址变了。</p>\n<p>打印地址对应的方法名：<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">(lldb)</span> p <span class=\"comment\">(IMP)</span><span class=\"number\">0</span>x<span class=\"number\">100001</span>cf<span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">(IMP)</span> $<span class=\"number\">0</span> = <span class=\"number\">0</span>x<span class=\"number\">0000000100001</span>cf<span class=\"number\">0</span> <span class=\"comment\">(Interview01-KVC`-[Person setAge:] at Person.h:16)</span></div><div class=\"line\"><span class=\"comment\">(lldb)</span> p <span class=\"comment\">(IMP)</span><span class=\"number\">0</span>x<span class=\"number\">7</span>fff<span class=\"number\">304</span>afa<span class=\"number\">0</span>b</div><div class=\"line\"><span class=\"comment\">(IMP)</span> $<span class=\"number\">1</span> = <span class=\"number\">0</span>x<span class=\"number\">00007</span>fff<span class=\"number\">304</span>afa<span class=\"number\">0</span>b <span class=\"comment\">(Foundation`_NSSetIntValueAndNotify)</span></div></pre></td></tr></table></figure></p>\n<p>从打印结果看出，person1 添加 KVO 监听后，修改 age 时调用的是 Foundation 框架里的  _NSSetIntValueAndNotify 方法。</p>\n<h3 id=\"NSSetIntValueAndNotify-方法\"><a href=\"#NSSetIntValueAndNotify-方法\" class=\"headerlink\" title=\"_NSSetIntValueAndNotify 方法\"></a>_NSSetIntValueAndNotify 方法</h3><p>_NSSetIntValueAndNotify 方法实现猜想：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">setAge:</span>(<span class=\"keyword\">int</span>)age &#123;</div><div class=\"line\">    _NSSetIntValueAndNotify();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> _NSSetIntValueAndNotify </div><div class=\"line\">&#123;</div><div class=\"line\">    [self <span class=\"string\">willChangeValueForKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">setAge:</span>age];</div><div class=\"line\">    [self <span class=\"string\">didChagneValueForKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">didChagneValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 通知监听器，某属性值发生了改变</span></div><div class=\"line\">    [observer <span class=\"string\">observeValueForKeyPath:</span>key <span class=\"string\">ofObject:</span>nil <span class=\"string\">change:</span>nil <span class=\"string\">context:</span>nil];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看_NSSet*AndNotify的存在：<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO04.png\" alt=\"isa和superclass\"></p>\n<p>_NSSet*ValueAndNotify的内部实现：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _NSSet*ValueAndNotify </div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"meta\">self willChangeValueForKey:@<span class=\"meta-string\">\"key\"</span></span>];</div><div class=\"line\">    <span class=\"comment\">// 原来的 setter 实现</span></div><div class=\"line\">    [<span class=\"meta\">self didChagneValueForKey:@<span class=\"meta-string\">\"key\"</span></span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>调用 willChangeValueForKey:  </li>\n<li>调用原来的 setter 实现  </li>\n<li>调用 didChangeValueForKey:<br>didChangeValueForKey: 内部会调用 observer 的 observeValueForKeyPath:ofObject:change:context: 方法</li>\n</ul>\n<h3 id=\"NSKVONotifying-Person-元类对象\"><a href=\"#NSKVONotifying-Person-元类对象\" class=\"headerlink\" title=\"NSKVONotifying_Person 元类对象\"></a>NSKVONotifying_Person 元类对象</h3><p>打印 person1 的元类对象：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSLog(@<span class=\"string\">\"person1添加KVO之后，类对象 - %@, %@\"</span>, object_getClass(<span class=\"name\">person1</span>), object_getClass(<span class=\"name\">person2</span>))<span class=\"comment\">;</span></div><div class=\"line\">NSLog(@<span class=\"string\">\"person1添加KVO之后，元类对象 - %@, %@\"</span>, object_getClass(<span class=\"name\">object_getClass</span>(<span class=\"name\">person1</span>)), object_getClass(<span class=\"name\">object_getClass</span>(<span class=\"name\">person2</span>)))<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person1添加KVO之后，类对象 - NSKVONotifying_Person, <span class=\"keyword\">Person</span></div><div class=\"line\">person1添加KVO之后，元类对象 - NSKVONotifying_Person, <span class=\"keyword\">Person</span></div></pre></td></tr></table></figure></p>\n<p>NSKVONotifying_Person 类对象的 isa 指针指向的是 NSKVONotifying_Person 元类对象。</p>\n<h3 id=\"修改成员变量的值是否会触发-KVO\"><a href=\"#修改成员变量的值是否会触发-KVO\" class=\"headerlink\" title=\"修改成员变量的值是否会触发 KVO\"></a>修改成员变量的值是否会触发 KVO</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@interface</span> <span class=\"string\">MJPerson :</span> NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@implementation</span> MJPerson</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, const <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJObserver *observer = [[MJObserver alloc] init];</div><div class=\"line\">        MJPerson *person = [[MJPerson alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person <span class=\"string\">addObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span> <span class=\"string\">options:</span>NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld <span class=\"string\">context:</span>NULL];</div><div class=\"line\"></div><div class=\"line\">        person-&gt;_age = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">removeObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行后并没有出现打印。虽然 person 添加了 KVO 监听，但是修改 age 时并没有调用 -(void)setAge 方法。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)<br>利用 RuntimeAPI 动态生成一个子类，并且让 instance 对象的 isa 指向这个全新的子类。<br>当修改 instance 对象的属性时，会调用 Foundation 的 _NSSetXXXValueAndNotify 函数：  <figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">willChangeValueForKey:</span></div><div class=\"line\">父类原来的setter</div><div class=\"line\"><span class=\"symbol\">didChangeValueForKey:</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>didChangeValueForKey: 内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</p>\n<ul>\n<li><p>如何手动触发KVO？<br>手动调用 willChangeValueForKey: 和 didChangeValueForKey:  </p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">willChangeValueForKey:</span></div><div class=\"line\">person-&gt;age = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"symbol\">didChangeValueForKey:</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>直接修改成员变量会触发KVO么？<br>不会触发，修改 age 时并没有调用 -(void)setAge 方法。</p>\n</li>\n</ul>\n<h1 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h1><p>KVC 的全称是 Key-Value Coding，俗称“键值编码”，可以通过一个 key 来访问某个属性。常见的API有：<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"params\">(void)</span>setValue:<span class=\"params\">(id)</span>value forKeyPath:<span class=\"params\">(NSString *)</span>keyPath;</div><div class=\"line\">- <span class=\"params\">(void)</span>setValue:<span class=\"params\">(id)</span>value forKey:<span class=\"params\">(NSString *)</span>key;</div><div class=\"line\">- <span class=\"params\">(id)</span>valueForKeyPath:<span class=\"params\">(NSString *)</span>keyPath;</div><div class=\"line\">- <span class=\"params\">(id)</span>valueForKey:<span class=\"params\">(NSString *)</span>key;</div></pre></td></tr></table></figure></p>\n<h2 id=\"setValue-forKey-原理\"><a href=\"#setValue-forKey-原理\" class=\"headerlink\" title=\"setValue: forKey: 原理\"></a>setValue: forKey: 原理</h2><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO05.png\" alt=\"isa和superclass\"></p>\n<p>定义 Person：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _isAge;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAge;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)_setAge:(<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"_setAge: - %d\"</span>, age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)accessInstanceVariablesDirectly</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; <span class=\"comment\">//默认的返回值就是YES（YES表示可以访问成员变量）</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>通过你 kvc 修改 age 的值：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Person</span> *<span class=\"keyword\">person</span> = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div><div class=\"line\"><span class=\"comment\">[person setValue:@10 forKey:@\"age\"]</span>;</div></pre></td></tr></table></figure></p>\n<p>依次注释掉 setAge:、_setAge: 方法，可以发现 setValue: forKey: 会优先调用 setAge:，setAge: 不存在时会调用 _setAge: 方法。如果    setAge: 和 _setAge: 都不存在时，会调用 + (BOOL)accessInstanceVariablesDirectly 方法判断是否可以访问成员变量。</p>\n<p>打断点后，可以在控制台看到 _age、_isAge、age、isAge 被依次赋值：<br><img src=\"/2020/05/13/OC底层/原理/KVO/KVO07.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"KVC-触发-KVO\"><a href=\"#KVC-触发-KVO\" class=\"headerlink\" title=\"KVC 触发 KVO\"></a>KVC 触发 KVO</h2><p>定义 Person：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@interface</span> <span class=\"string\">Person :</span> NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@implementation</span> Person</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">willChangeValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">willChangeValueForKey:</span>key];</div><div class=\"line\">    NSLog(@<span class=\"string\">\"willChangeValueForKey - %@\"</span>, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"string\">didChangeValueForKey:</span>(NSString *)key</div><div class=\"line\">&#123;</div><div class=\"line\">    NSLog(@<span class=\"string\">\"didChangeValueForKey - begin - %@\"</span>, key);</div><div class=\"line\">    [<span class=\"keyword\">super</span> <span class=\"string\">didChangeValueForKey:</span>key];</div><div class=\"line\">    NSLog(@<span class=\"string\">\"didChangeValueForKey - end - %@\"</span>, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)accessInstanceVariablesDirectly</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> YES; <span class=\"comment\">//默认的返回值就是YES（YES表示可以访问成员变量）</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, const <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJObserver *observer = [[MJObserver alloc] init];</div><div class=\"line\">        MJPerson *person = [[MJPerson alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        [person <span class=\"string\">addObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span> <span class=\"string\">options:</span>NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld <span class=\"string\">context:</span>NULL];</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">setValue:</span>@<span class=\"number\">10</span> <span class=\"string\">forKey:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\"></div><div class=\"line\">        [person <span class=\"string\">removeObserver:</span>observer <span class=\"string\">forKeyPath:</span>@<span class=\"string\">\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印结果：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">willChangeValueForKey - age</div><div class=\"line\"><span class=\"keyword\">didChangeValueForKey </span>- <span class=\"keyword\">begin </span>- age</div><div class=\"line\">observeValueForKeyPath - &#123;</div><div class=\"line\">    kind = <span class=\"number\">1</span><span class=\"comment\">;</span></div><div class=\"line\">    new = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\">    old = <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">didChangeValueForKey </span>- end - age</div></pre></td></tr></table></figure></p>\n<h3 id=\"setKey-和-setKey-存在\"><a href=\"#setKey-和-setKey-存在\" class=\"headerlink\" title=\"setKey 和 _setKey 存在\"></a>setKey 和 _setKey 存在</h3><p>添加 KVO 监听时会调用一次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用一次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 </p>\n<p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_05.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_06.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"setKey-和-setKey-不存在\"><a href=\"#setKey-和-setKey-不存在\" class=\"headerlink\" title=\"setKey 和 _setKey 不存在\"></a>setKey 和 _setKey 不存在</h3><p>添加 KVO 监听时会调用两次 + (BOOL)accessInstanceVariablesDirectly， 调用 setValue:forKey: 时会调用两次 + (BOOL)accessInstanceVariablesDirectly，再去调用 willChangeValueForKey 和 didChangeValueForKey。 </p>\n<p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_01.png\" alt=\"isa和superclass\"><br>添加 KVO 监听第二次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_02.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_03.png\" alt=\"isa和superclass\"><br>setValue:forKey: 第二次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_04.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"valueForKey-原理\"><a href=\"#valueForKey-原理\" class=\"headerlink\" title=\"valueForKey: 原理\"></a>valueForKey: 原理</h2><p><img src=\"/2020/05/13/OC底层/原理/KVO/KVO06.png\" alt=\"isa和superclass\"></p>\n<p>定义 Person：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _isAge;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAge;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">int</span>)getAge</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)isAge</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)_age</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>依次注释掉 - (int)getAge、- (int)age、- (int)isAge、- (int)_age 方法，从打印结果可以发现，setValue: forKey: 方法会优先调用 - (void)setAge:(int)age，- (void)setAge:(int)age 不存在时会调用 - (void)_setAge:(int)age 方法，以此类推。</p>\n<h3 id=\"setKey-和-setKey-存在-1\"><a href=\"#setKey-和-setKey-存在-1\" class=\"headerlink\" title=\"setKey 和 _setKey 存在\"></a>setKey 和 _setKey 存在</h3><p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_07.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"setKey-和-setKey-不存在-1\"><a href=\"#setKey-和-setKey-不存在-1\" class=\"headerlink\" title=\"setKey 和 _setKey 不存在\"></a>setKey 和 _setKey 不存在</h3><p>添加 KVO 监听第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_08.png\" alt=\"isa和superclass\"><br>valueForKey: 第一次调用 accessInstanceVariablesDirectly 方法：<br><img src=\"/2020/05/13/OC底层/原理/KVO/accessInstanceVariablesDirectly_09.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>通过KVC修改属性会触发KVO么？<br>会触发KVO。通过KVC修改属性会调用 willChangeValueForKey: 和 didChangeValueForKey: 方法，而 didChangeValueForKey: 方法内部会触发 KVO 监听。  </p>\n</li>\n<li><p>KVC 的赋值和取值过程是怎样的？原理是什么？<br>赋值：setValue:forKey: 会按照 setKey:/_setKey: 顺序查找方法，如果方法存在，直接调用方法赋值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。如果可以，会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到后赋值。如果不可以访问成员变量，或者成员变量不存在，就会调用 setValue:forUndefinedKey: 并抛出异常 NSUnknownKeyException。  </p>\n<p>取值：valueForKey: 会按照 getKey/key/isKey/_key 顺序查找方法，如果方法存在，直接调用方法取值。如果方法不存在，会调用 accessInstanceVariablesDirectly 方法，判断是否可以访问成员变量。会按照 _key/_isKey/key/isKsy 顺序查找成员变量，找到成员变量后取值。如果不可以访问成员变量，或者成员变量不存在，就会调用 valueForUndefinedKey: 并抛出异常 NSUnknownKeyException。  </p>\n</li>\n</ul>"},{"title":"OC对象的分类","date":"2020-05-09T08:37:02.000Z","_content":"\nObjective-C 中的对象主要可以分为3种：  \n* instance对象（实例对象）\n* class对象（类对象）\n* meta-class对象（元类对象）  \n\n<!-- more -->\n\n# instance 对象\ninstance 对象就是通过类 alloc 出来的对象，每次调用 alloc 都会产生新的 instance 对象。\n```\nNSObject *object1 = [[NSObject alloc] init];\nNSObject *object2 = [[NSObject alloc] init];\n```\n\nobject1、object2 是 NSObject 的 instance 对象，它们是不同的两个对象，分别占据着两块不同的内存。\n\n## instance 对象在内存中存储的信息\n\n* isa指针\n* 其他成员变量\n\n定义 Person\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation Person\n@end\n```\n\n创建 Person 的实例对象\n```\nPerson *p1 = [[Person alloc] init];\nPerson *p2 = [[Person alloc] init];\n```\n\np1、p2 对象在内存中存储的信息\n![OC对象的分类](OC对象的分类/OC对象的分类01.png)\n\n\n# class 对象\n每个类在内存中有且只有一个class对象，同一个类 alloc 出来的实例对象共同拥有唯一的 class 对象。\n\n获取 class 对象：\n```\nClass objectClass1 = [object1 class];\nClass objectClass2 = [object2 class];\nClass objectClass3 = object_getClass(object1);\nClass objectClass4 = object_getClass(object2);\nClass objectClass5 = [NSObject class];\n```\n\nobjectClass1 ~ objectClass5 都是 NSObject 的 class 对象，它们是同一个对象。\n\n## class 对象在内存中存储的信息主要包括\n* isa指针\n* superclass指针\n* 类的属性信息（@property）、类的对象方法信息（instance method）\n* 类的协议信息（protocol）、类的成员变量信息（ivar）  \n......  \n\n![OC对象的分类](OC对象的分类/OC对象的分类02.png)\n\n不同的 instance 对象却拥有相同的属性、对象方法、协议和成员变量等等，这些信息都存放在 class 对象的内存中，保证了同样的信息只存储一份。\n\n## 👉 注意\n以下代码获取的 objectClass 是 class 对象，并不是 meta-class 对象\n```\nClass objectClass = [[NSObject class] class];\n```\n\n# meta-class 对象\n\n每个类在内存中有且只有一个meta-class对象。  \n\n将类对象当做参数传入，获得元类对象：\n```\nClass objectMetaClass = object_getClass(objectClass5);\n```\n\n## meta-class 对象在内存中存储的信息主要包括\n* isa指针\n* superclass指针\n* 类的类方法信息（class method）  \n......\n\n![OC对象的分类](OC对象的分类/OC对象的分类03.png)\n\n## 查看 objecClass 是否为 meta-class\n```\n#import <objc/runtime.h>\n\nBOOL result = class_isMetaClass(objecClass)\n```\n\n# 窥视 objc_getClass()、object_getClass()\n\n## object_getClass\n打开 Runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)，找到 objc-class.mm，搜索 object_getClass：\n```\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n```\n\n## objc_getClass\n打开 Runtime 源码，找到 runtime.mm，搜索 objc_getClass：\n```\nClass objc_getClass(const char *aClassName)\n{\n    if (!aClassName) return Nil;\n\n    // NO unconnected, YES class handler\n    return look_up_class(aClassName, NO, YES);\n}\n```\n\n上面👆的代码里可以确认 objc_getClass 的参数是一个类名。\n\nJump To Definition -> look_up_class：\n```\nClass \nlook_up_class(const char *name, \n              bool includeUnconnected __attribute__((unused)), \n              bool includeClassHandler __attribute__((unused)))\n{\n    if (!name) return nil;\n\n    Class result;\n    bool unrealized;\n    {\n        runtimeLock.lock();\n        result = getClassExceptSomeSwift(name);\n        unrealized = result  &&  !result->isRealized();\n        if (unrealized) {\n            result = realizeClassMaybeSwiftAndUnlock(result, runtimeLock);\n            // runtimeLock is now unlocked\n        } else {\n            runtimeLock.unlock();\n        }\n    }\n\n    if (!result) {\n        // Ask Swift about its un-instantiated classes.\n\n        // We use thread-local storage to prevent infinite recursion\n        // if the hook function provokes another lookup of the same name\n        // (for example, if the hook calls objc_allocateClassPair)\n\n        auto *tls = _objc_fetch_pthread_data(true);\n\n        // Stop if this thread is already looking up this name.\n        for (unsigned i = 0; i < tls->classNameLookupsUsed; i++) {\n            if (0 == strcmp(name, tls->classNameLookups[i])) {\n                return nil;\n            }\n        }\n\n        // Save this lookup in tls.\n        if (tls->classNameLookupsUsed == tls->classNameLookupsAllocated) {\n            tls->classNameLookupsAllocated =\n                (tls->classNameLookupsAllocated * 2 ?: 1);\n            size_t size = tls->classNameLookupsAllocated *\n                sizeof(tls->classNameLookups[0]);\n            tls->classNameLookups = (const char **)\n                realloc(tls->classNameLookups, size);\n        }\n        tls->classNameLookups[tls->classNameLookupsUsed++] = name;\n\n        // Call the hook.\n        Class swiftcls = nil;\n        if (GetClassHook.get()(name, &swiftcls)) {\n            ASSERT(swiftcls->isRealized());\n            result = swiftcls;\n        }\n\n        // Erase the name from tls.\n        unsigned slot = --tls->classNameLookupsUsed;\n        ASSERT(slot >= 0  &&  slot < tls->classNameLookupsAllocated);\n        ASSERT(name == tls->classNameLookups[slot]);\n        tls->classNameLookups[slot] = nil;\n    }\n\n    return result;\n}\n```\nJump To Definition -> getClassExceptSomeSwift：\n```\nstatic Class getClassExceptSomeSwift(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // Try name as-is\n    Class result = getClass_impl(name);\n    if (result) return result;\n\n    // Try Swift-mangled equivalent of the given name.\n    if (char *swName = copySwiftV1MangledName(name)) {\n        result = getClass_impl(swName);\n        free(swName);\n        return result;\n    }\n\n    return nil;\n}\n```\n\nJump To Definition -> getClass_impl：\n```\nstatic Class getClass_impl(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // allocated in _read_images\n    ASSERT(gdb_objc_realized_classes);\n\n    // Try runtime-allocated table\n    Class result = (Class)NXMapGet(gdb_objc_realized_classes, name);\n    if (result) return result;\n\n    // Try table from dyld shared cache.\n    // Note we do this last to handle the case where we dlopen'ed a shared cache\n    // dylib with duplicates of classes already present in the main executable.\n    // In that case, we put the class from the main executable in\n    // gdb_objc_realized_classes and want to check that before considering any\n    // newly loaded shared cache binaries.\n    return getPreoptimizedClass(name);\n}\n```\n\nJump To Definition -> NXMapGet：\n```\nvoid *NXMapGet(NXMapTable *table, const void *key) {\n    void\t*value;\n    return (_NXMapMember(table, key, &value) != NX_MAPNOTAKEY) ? value : NULL;\n}\n```\n\nNXMapGet 根据传进来的类名返回了一个类对象。\n\n## 小结\n* object_getClass 的参数是 instance 对象/ class 对象/ meta-class 对象。  \n* object_getClass 返回的是 obj 的 isa 指针。\n* 如果 obj 是 instance 对象则返回 class 对象。如果 obj 是 class 对象则返回 meta-class 对象。如果 obj 是 meta-class 对象则返回 NSObject（基类） 的 meta-class 对象。\n* Class objc_getClass(const char *aClassName) ：字符串类名 -> 对应的类对象\n* -(void)Class 和 +(void)Class 返回的是类对象。","source":"_posts/OC底层/原理/OC对象的分类.md","raw":"---\ntitle: OC对象的分类\ndate: 2020-05-09 16:37:02\ntags: OC底层原理\n---\n\nObjective-C 中的对象主要可以分为3种：  \n* instance对象（实例对象）\n* class对象（类对象）\n* meta-class对象（元类对象）  \n\n<!-- more -->\n\n# instance 对象\ninstance 对象就是通过类 alloc 出来的对象，每次调用 alloc 都会产生新的 instance 对象。\n```\nNSObject *object1 = [[NSObject alloc] init];\nNSObject *object2 = [[NSObject alloc] init];\n```\n\nobject1、object2 是 NSObject 的 instance 对象，它们是不同的两个对象，分别占据着两块不同的内存。\n\n## instance 对象在内存中存储的信息\n\n* isa指针\n* 其他成员变量\n\n定义 Person\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation Person\n@end\n```\n\n创建 Person 的实例对象\n```\nPerson *p1 = [[Person alloc] init];\nPerson *p2 = [[Person alloc] init];\n```\n\np1、p2 对象在内存中存储的信息\n![OC对象的分类](OC对象的分类/OC对象的分类01.png)\n\n\n# class 对象\n每个类在内存中有且只有一个class对象，同一个类 alloc 出来的实例对象共同拥有唯一的 class 对象。\n\n获取 class 对象：\n```\nClass objectClass1 = [object1 class];\nClass objectClass2 = [object2 class];\nClass objectClass3 = object_getClass(object1);\nClass objectClass4 = object_getClass(object2);\nClass objectClass5 = [NSObject class];\n```\n\nobjectClass1 ~ objectClass5 都是 NSObject 的 class 对象，它们是同一个对象。\n\n## class 对象在内存中存储的信息主要包括\n* isa指针\n* superclass指针\n* 类的属性信息（@property）、类的对象方法信息（instance method）\n* 类的协议信息（protocol）、类的成员变量信息（ivar）  \n......  \n\n![OC对象的分类](OC对象的分类/OC对象的分类02.png)\n\n不同的 instance 对象却拥有相同的属性、对象方法、协议和成员变量等等，这些信息都存放在 class 对象的内存中，保证了同样的信息只存储一份。\n\n## 👉 注意\n以下代码获取的 objectClass 是 class 对象，并不是 meta-class 对象\n```\nClass objectClass = [[NSObject class] class];\n```\n\n# meta-class 对象\n\n每个类在内存中有且只有一个meta-class对象。  \n\n将类对象当做参数传入，获得元类对象：\n```\nClass objectMetaClass = object_getClass(objectClass5);\n```\n\n## meta-class 对象在内存中存储的信息主要包括\n* isa指针\n* superclass指针\n* 类的类方法信息（class method）  \n......\n\n![OC对象的分类](OC对象的分类/OC对象的分类03.png)\n\n## 查看 objecClass 是否为 meta-class\n```\n#import <objc/runtime.h>\n\nBOOL result = class_isMetaClass(objecClass)\n```\n\n# 窥视 objc_getClass()、object_getClass()\n\n## object_getClass\n打开 Runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)，找到 objc-class.mm，搜索 object_getClass：\n```\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n```\n\n## objc_getClass\n打开 Runtime 源码，找到 runtime.mm，搜索 objc_getClass：\n```\nClass objc_getClass(const char *aClassName)\n{\n    if (!aClassName) return Nil;\n\n    // NO unconnected, YES class handler\n    return look_up_class(aClassName, NO, YES);\n}\n```\n\n上面👆的代码里可以确认 objc_getClass 的参数是一个类名。\n\nJump To Definition -> look_up_class：\n```\nClass \nlook_up_class(const char *name, \n              bool includeUnconnected __attribute__((unused)), \n              bool includeClassHandler __attribute__((unused)))\n{\n    if (!name) return nil;\n\n    Class result;\n    bool unrealized;\n    {\n        runtimeLock.lock();\n        result = getClassExceptSomeSwift(name);\n        unrealized = result  &&  !result->isRealized();\n        if (unrealized) {\n            result = realizeClassMaybeSwiftAndUnlock(result, runtimeLock);\n            // runtimeLock is now unlocked\n        } else {\n            runtimeLock.unlock();\n        }\n    }\n\n    if (!result) {\n        // Ask Swift about its un-instantiated classes.\n\n        // We use thread-local storage to prevent infinite recursion\n        // if the hook function provokes another lookup of the same name\n        // (for example, if the hook calls objc_allocateClassPair)\n\n        auto *tls = _objc_fetch_pthread_data(true);\n\n        // Stop if this thread is already looking up this name.\n        for (unsigned i = 0; i < tls->classNameLookupsUsed; i++) {\n            if (0 == strcmp(name, tls->classNameLookups[i])) {\n                return nil;\n            }\n        }\n\n        // Save this lookup in tls.\n        if (tls->classNameLookupsUsed == tls->classNameLookupsAllocated) {\n            tls->classNameLookupsAllocated =\n                (tls->classNameLookupsAllocated * 2 ?: 1);\n            size_t size = tls->classNameLookupsAllocated *\n                sizeof(tls->classNameLookups[0]);\n            tls->classNameLookups = (const char **)\n                realloc(tls->classNameLookups, size);\n        }\n        tls->classNameLookups[tls->classNameLookupsUsed++] = name;\n\n        // Call the hook.\n        Class swiftcls = nil;\n        if (GetClassHook.get()(name, &swiftcls)) {\n            ASSERT(swiftcls->isRealized());\n            result = swiftcls;\n        }\n\n        // Erase the name from tls.\n        unsigned slot = --tls->classNameLookupsUsed;\n        ASSERT(slot >= 0  &&  slot < tls->classNameLookupsAllocated);\n        ASSERT(name == tls->classNameLookups[slot]);\n        tls->classNameLookups[slot] = nil;\n    }\n\n    return result;\n}\n```\nJump To Definition -> getClassExceptSomeSwift：\n```\nstatic Class getClassExceptSomeSwift(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // Try name as-is\n    Class result = getClass_impl(name);\n    if (result) return result;\n\n    // Try Swift-mangled equivalent of the given name.\n    if (char *swName = copySwiftV1MangledName(name)) {\n        result = getClass_impl(swName);\n        free(swName);\n        return result;\n    }\n\n    return nil;\n}\n```\n\nJump To Definition -> getClass_impl：\n```\nstatic Class getClass_impl(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // allocated in _read_images\n    ASSERT(gdb_objc_realized_classes);\n\n    // Try runtime-allocated table\n    Class result = (Class)NXMapGet(gdb_objc_realized_classes, name);\n    if (result) return result;\n\n    // Try table from dyld shared cache.\n    // Note we do this last to handle the case where we dlopen'ed a shared cache\n    // dylib with duplicates of classes already present in the main executable.\n    // In that case, we put the class from the main executable in\n    // gdb_objc_realized_classes and want to check that before considering any\n    // newly loaded shared cache binaries.\n    return getPreoptimizedClass(name);\n}\n```\n\nJump To Definition -> NXMapGet：\n```\nvoid *NXMapGet(NXMapTable *table, const void *key) {\n    void\t*value;\n    return (_NXMapMember(table, key, &value) != NX_MAPNOTAKEY) ? value : NULL;\n}\n```\n\nNXMapGet 根据传进来的类名返回了一个类对象。\n\n## 小结\n* object_getClass 的参数是 instance 对象/ class 对象/ meta-class 对象。  \n* object_getClass 返回的是 obj 的 isa 指针。\n* 如果 obj 是 instance 对象则返回 class 对象。如果 obj 是 class 对象则返回 meta-class 对象。如果 obj 是 meta-class 对象则返回 NSObject（基类） 的 meta-class 对象。\n* Class objc_getClass(const char *aClassName) ：字符串类名 -> 对应的类对象\n* -(void)Class 和 +(void)Class 返回的是类对象。","slug":"OC底层/原理/OC对象的分类","published":1,"updated":"2020-05-13T07:08:28.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40ar1000nte035a20pfj4","content":"<p>Objective-C 中的对象主要可以分为3种：  </p>\n<ul>\n<li>instance对象（实例对象）</li>\n<li>class对象（类对象）</li>\n<li>meta-class对象（元类对象）  </li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"instance-对象\"><a href=\"#instance-对象\" class=\"headerlink\" title=\"instance 对象\"></a>instance 对象</h1><p>instance 对象就是通过类 alloc 出来的对象，每次调用 alloc 都会产生新的 instance 对象。<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSObject *object1 = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div><div class=\"line\">NSObject *object2 = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>object1、object2 是 NSObject 的 instance 对象，它们是不同的两个对象，分别占据着两块不同的内存。</p>\n<h2 id=\"instance-对象在内存中存储的信息\"><a href=\"#instance-对象在内存中存储的信息\" class=\"headerlink\" title=\"instance 对象在内存中存储的信息\"></a>instance 对象在内存中存储的信息</h2><ul>\n<li>isa指针</li>\n<li>其他成员变量</li>\n</ul>\n<p>定义 Person<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure></p>\n<p>创建 Person 的实例对象<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Person</span> *p1 = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div><div class=\"line\"><span class=\"keyword\">Person</span> *p2 = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>p1、p2 对象在内存中存储的信息<br><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类01.png\" alt=\"OC对象的分类\"></p>\n<h1 id=\"class-对象\"><a href=\"#class-对象\" class=\"headerlink\" title=\"class 对象\"></a>class 对象</h1><p>每个类在内存中有且只有一个class对象，同一个类 alloc 出来的实例对象共同拥有唯一的 class 对象。</p>\n<p>获取 class 对象：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass1</span> = [<span class=\"title\">object1</span> <span class=\"title\">class</span>];</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass2</span> = [<span class=\"title\">object2</span> <span class=\"title\">class</span>];</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass3</span> = <span class=\"title\">object_getClass</span>(<span class=\"title\">object1</span>);</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass4</span> = <span class=\"title\">object_getClass</span>(<span class=\"title\">object2</span>);</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass5</span> = [<span class=\"title\">NSObject</span> <span class=\"title\">class</span>];</span></div></pre></td></tr></table></figure></p>\n<p>objectClass1 ~ objectClass5 都是 NSObject 的 class 对象，它们是同一个对象。</p>\n<h2 id=\"class-对象在内存中存储的信息主要包括\"><a href=\"#class-对象在内存中存储的信息主要包括\" class=\"headerlink\" title=\"class 对象在内存中存储的信息主要包括\"></a>class 对象在内存中存储的信息主要包括</h2><ul>\n<li>isa指针</li>\n<li>superclass指针</li>\n<li>类的属性信息（@property）、类的对象方法信息（instance method）</li>\n<li>类的协议信息（protocol）、类的成员变量信息（ivar）<br>……  </li>\n</ul>\n<p><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类02.png\" alt=\"OC对象的分类\"></p>\n<p>不同的 instance 对象却拥有相同的属性、对象方法、协议和成员变量等等，这些信息都存放在 class 对象的内存中，保证了同样的信息只存储一份。</p>\n<h2 id=\"👉-注意\"><a href=\"#👉-注意\" class=\"headerlink\" title=\"👉 注意\"></a>👉 注意</h2><p>以下代码获取的 objectClass 是 class 对象，并不是 meta-class 对象<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> objectClass = [[NSObject <span class=\"keyword\">class</span>] <span class=\"keyword\">class</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"meta-class-对象\"><a href=\"#meta-class-对象\" class=\"headerlink\" title=\"meta-class 对象\"></a>meta-class 对象</h1><p>每个类在内存中有且只有一个meta-class对象。  </p>\n<p>将类对象当做参数传入，获得元类对象：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class objectMetaClass</span> = object_getClass(objectClass5);</div></pre></td></tr></table></figure></p>\n<h2 id=\"meta-class-对象在内存中存储的信息主要包括\"><a href=\"#meta-class-对象在内存中存储的信息主要包括\" class=\"headerlink\" title=\"meta-class 对象在内存中存储的信息主要包括\"></a>meta-class 对象在内存中存储的信息主要包括</h2><ul>\n<li>isa指针</li>\n<li>superclass指针</li>\n<li>类的类方法信息（class method）<br>……</li>\n</ul>\n<p><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类03.png\" alt=\"OC对象的分类\"></p>\n<h2 id=\"查看-objecClass-是否为-meta-class\"><a href=\"#查看-objecClass-是否为-meta-class\" class=\"headerlink\" title=\"查看 objecClass 是否为 meta-class\"></a>查看 objecClass 是否为 meta-class</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">BOOL</span> result = class_isMetaClass(objecClass)</div></pre></td></tr></table></figure>\n<h1 id=\"窥视-objc-getClass-、object-getClass\"><a href=\"#窥视-objc-getClass-、object-getClass\" class=\"headerlink\" title=\"窥视 objc_getClass()、object_getClass()\"></a>窥视 objc_getClass()、object_getClass()</h1><h2 id=\"object-getClass\"><a href=\"#object-getClass\" class=\"headerlink\" title=\"object_getClass\"></a>object_getClass</h2><p>打开 Runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>，找到 objc-class.mm，搜索 object_getClass：<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> object_getClass(id obj)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj) <span class=\"keyword\">return</span> obj-&gt;getIsa();</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Nil;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"objc-getClass\"><a href=\"#objc-getClass\" class=\"headerlink\" title=\"objc_getClass\"></a>objc_getClass</h2><p>打开 Runtime 源码，找到 runtime.mm，搜索 objc_getClass：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class objc_getClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *aClassName)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!aClassName) <span class=\"keyword\">return</span> Nil;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NO unconnected, YES class handler</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">look_up_class</span><span class=\"params\">(aClassName, NO, YES)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面👆的代码里可以确认 objc_getClass 的参数是一个类名。</p>\n<p>Jump To Definition -&gt; look_up_class：<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class </div><div class=\"line\">look_up_class(const char *<span class=\"keyword\">name</span>, </div><div class=\"line\">              bool includeUnconnected __attribute__((unused)), </div><div class=\"line\">              bool includeClassHandler __attribute__((unused)))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">name</span>) return <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    Class result;</div><div class=\"line\">    bool unrealized;</div><div class=\"line\">    &#123;</div><div class=\"line\">        runtimeLock.lock();</div><div class=\"line\">        result = getClassExceptSomeSwift(<span class=\"keyword\">name</span>);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">unrealized</span> = result  &amp;&amp;  !result-&gt;</span>isRealized();</div><div class=\"line\">        <span class=\"keyword\">if</span> (unrealized) &#123;</div><div class=\"line\">            result = realizeClassMaybeSwiftAndUnlock(result, runtimeLock);</div><div class=\"line\">            <span class=\"comment\">// runtimeLock is now unlocked</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            runtimeLock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</div><div class=\"line\">        <span class=\"comment\">// Ask Swift about its un-instantiated classes.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// We use thread-local storage to prevent infinite recursion</span></div><div class=\"line\">        <span class=\"comment\">// if the hook function provokes another lookup of the same name</span></div><div class=\"line\">        <span class=\"comment\">// (for example, if the hook calls objc_allocateClassPair)</span></div><div class=\"line\"></div><div class=\"line\">        auto *tls = _objc_fetch_pthread_data(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Stop if this thread is already looking up this name.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">for</span> (unsigned i = 0; i &lt; tls-&gt;</span>classNameLookupsUsed; i++) &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">if</span> (0 == strcmp(<span class=\"keyword\">name</span>, tls-&gt;</span>classNameLookups[i])) &#123;</div><div class=\"line\">                return <span class=\"literal\">nil</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Save this lookup in tls.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">if</span> (tls-&gt;</span><span class=\"function\"><span class=\"title\">classNameLookupsUsed</span> == tls-&gt;</span>classNameLookupsAllocated) &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookupsAllocated =</div><div class=\"line\">                (<span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookupsAllocated * <span class=\"number\">2</span> ?: <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">size_t</span> size = tls-&gt;</span>classNameLookupsAllocated *</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">sizeof</span>(tls-&gt;</span>classNameLookups[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookups = (const char **)</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">realloc</span>(tls-&gt;</span>classNameLookups, size);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span><span class=\"function\"><span class=\"title\">classNameLookups</span>[tls-&gt;</span>classNameLookupsUsed++] = <span class=\"keyword\">name</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Call the hook.</span></div><div class=\"line\">        Class swiftcls = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GetClassHook.get()(<span class=\"keyword\">name</span>, &amp;swiftcls)) &#123;</div><div class=\"line\">            ASSERT(<span class=\"function\"><span class=\"title\">swiftcls</span>-&gt;</span>isRealized());</div><div class=\"line\">            result = swiftcls;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Erase the name from tls.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">unsigned</span> slot = --tls-&gt;</span>classNameLookupsUsed;</div><div class=\"line\">        ASSERT(<span class=\"function\"><span class=\"title\">slot</span> &gt;= 0  &amp;&amp;  slot &lt; tls-&gt;</span>classNameLookupsAllocated);</div><div class=\"line\">        ASSERT(<span class=\"function\"><span class=\"title\">name</span> == tls-&gt;</span>classNameLookups[slot]);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookups[slot] = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; getClassExceptSomeSwift：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Class</span> getClassExceptSomeSwift(<span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> name <span class=\"keyword\">as</span>-<span class=\"keyword\">is</span></div><div class=\"line\">    <span class=\"type\">Class</span> <span class=\"literal\">result</span> = getClass_impl(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">result</span>) <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> <span class=\"type\">Swift</span>-mangled equivalent <span class=\"keyword\">of</span> the given name.</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">char</span> *swName = copySwiftV1MangledName(name)) &#123;</div><div class=\"line\">        <span class=\"literal\">result</span> = getClass_impl(swName);</div><div class=\"line\">        free(swName);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; getClass_impl：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Class</span> getClass_impl(<span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    // allocated <span class=\"keyword\">in</span> _read_images</div><div class=\"line\">    <span class=\"type\">ASSERT</span>(gdb_objc_realized_classes);</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> runtime-allocated table</div><div class=\"line\">    <span class=\"type\">Class</span> <span class=\"literal\">result</span> = (<span class=\"type\">Class</span>)<span class=\"type\">NXMapGet</span>(gdb_objc_realized_classes, name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">result</span>) <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> table <span class=\"keyword\">from</span> dyld <span class=\"literal\">shared</span> cache.</div><div class=\"line\">    // <span class=\"type\">Note</span> we <span class=\"keyword\">do</span> this last to handle the <span class=\"keyword\">case</span> where we dlopen'ed a <span class=\"literal\">shared</span> cache</div><div class=\"line\">    // dylib <span class=\"keyword\">with</span> duplicates <span class=\"keyword\">of</span> classes already present <span class=\"keyword\">in</span> the main executable.</div><div class=\"line\">    // <span class=\"type\">In</span> that <span class=\"keyword\">case</span>, we put the class <span class=\"keyword\">from</span> the main executable <span class=\"keyword\">in</span></div><div class=\"line\">    // gdb_objc_realized_classes <span class=\"keyword\">and</span> want to check that before considering <span class=\"built_in\">any</span></div><div class=\"line\">    // newly loaded <span class=\"literal\">shared</span> cache binaries.</div><div class=\"line\">    <span class=\"keyword\">return</span> getPreoptimizedClass(name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; NXMapGet：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> *NXMapGet(NXMapTable *table, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key) &#123;</div><div class=\"line\">    <span class=\"keyword\">void</span>\t*<span class=\"keyword\">value</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (_NXMapMember(table, key, &amp;<span class=\"keyword\">value</span>) != NX_MAPNOTAKEY) ? <span class=\"keyword\">value</span> : NULL;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>NXMapGet 根据传进来的类名返回了一个类对象。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>object_getClass 的参数是 instance 对象/ class 对象/ meta-class 对象。  </li>\n<li>object_getClass 返回的是 obj 的 isa 指针。</li>\n<li>如果 obj 是 instance 对象则返回 class 对象。如果 obj 是 class 对象则返回 meta-class 对象。如果 obj 是 meta-class 对象则返回 NSObject（基类） 的 meta-class 对象。</li>\n<li>Class objc_getClass(const char *aClassName) ：字符串类名 -&gt; 对应的类对象</li>\n<li>-(void)Class 和 +(void)Class 返回的是类对象。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Objective-C 中的对象主要可以分为3种：  </p>\n<ul>\n<li>instance对象（实例对象）</li>\n<li>class对象（类对象）</li>\n<li>meta-class对象（元类对象）  </li>\n</ul>","more":"<h1 id=\"instance-对象\"><a href=\"#instance-对象\" class=\"headerlink\" title=\"instance 对象\"></a>instance 对象</h1><p>instance 对象就是通过类 alloc 出来的对象，每次调用 alloc 都会产生新的 instance 对象。<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSObject *object1 = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div><div class=\"line\">NSObject *object2 = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>object1、object2 是 NSObject 的 instance 对象，它们是不同的两个对象，分别占据着两块不同的内存。</p>\n<h2 id=\"instance-对象在内存中存储的信息\"><a href=\"#instance-对象在内存中存储的信息\" class=\"headerlink\" title=\"instance 对象在内存中存储的信息\"></a>instance 对象在内存中存储的信息</h2><ul>\n<li>isa指针</li>\n<li>其他成员变量</li>\n</ul>\n<p>定义 Person<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure></p>\n<p>创建 Person 的实例对象<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Person</span> *p1 = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div><div class=\"line\"><span class=\"keyword\">Person</span> *p2 = <span class=\"comment\">[<span class=\"comment\">[Person alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>p1、p2 对象在内存中存储的信息<br><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类01.png\" alt=\"OC对象的分类\"></p>\n<h1 id=\"class-对象\"><a href=\"#class-对象\" class=\"headerlink\" title=\"class 对象\"></a>class 对象</h1><p>每个类在内存中有且只有一个class对象，同一个类 alloc 出来的实例对象共同拥有唯一的 class 对象。</p>\n<p>获取 class 对象：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass1</span> = [<span class=\"title\">object1</span> <span class=\"title\">class</span>];</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass2</span> = [<span class=\"title\">object2</span> <span class=\"title\">class</span>];</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass3</span> = <span class=\"title\">object_getClass</span>(<span class=\"title\">object1</span>);</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass4</span> = <span class=\"title\">object_getClass</span>(<span class=\"title\">object2</span>);</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">objectClass5</span> = [<span class=\"title\">NSObject</span> <span class=\"title\">class</span>];</span></div></pre></td></tr></table></figure></p>\n<p>objectClass1 ~ objectClass5 都是 NSObject 的 class 对象，它们是同一个对象。</p>\n<h2 id=\"class-对象在内存中存储的信息主要包括\"><a href=\"#class-对象在内存中存储的信息主要包括\" class=\"headerlink\" title=\"class 对象在内存中存储的信息主要包括\"></a>class 对象在内存中存储的信息主要包括</h2><ul>\n<li>isa指针</li>\n<li>superclass指针</li>\n<li>类的属性信息（@property）、类的对象方法信息（instance method）</li>\n<li>类的协议信息（protocol）、类的成员变量信息（ivar）<br>……  </li>\n</ul>\n<p><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类02.png\" alt=\"OC对象的分类\"></p>\n<p>不同的 instance 对象却拥有相同的属性、对象方法、协议和成员变量等等，这些信息都存放在 class 对象的内存中，保证了同样的信息只存储一份。</p>\n<h2 id=\"👉-注意\"><a href=\"#👉-注意\" class=\"headerlink\" title=\"👉 注意\"></a>👉 注意</h2><p>以下代码获取的 objectClass 是 class 对象，并不是 meta-class 对象<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> objectClass = [[NSObject <span class=\"keyword\">class</span>] <span class=\"keyword\">class</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"meta-class-对象\"><a href=\"#meta-class-对象\" class=\"headerlink\" title=\"meta-class 对象\"></a>meta-class 对象</h1><p>每个类在内存中有且只有一个meta-class对象。  </p>\n<p>将类对象当做参数传入，获得元类对象：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class objectMetaClass</span> = object_getClass(objectClass5);</div></pre></td></tr></table></figure></p>\n<h2 id=\"meta-class-对象在内存中存储的信息主要包括\"><a href=\"#meta-class-对象在内存中存储的信息主要包括\" class=\"headerlink\" title=\"meta-class 对象在内存中存储的信息主要包括\"></a>meta-class 对象在内存中存储的信息主要包括</h2><ul>\n<li>isa指针</li>\n<li>superclass指针</li>\n<li>类的类方法信息（class method）<br>……</li>\n</ul>\n<p><img src=\"/2020/05/09/OC底层/原理/OC对象的分类/OC对象的分类03.png\" alt=\"OC对象的分类\"></p>\n<h2 id=\"查看-objecClass-是否为-meta-class\"><a href=\"#查看-objecClass-是否为-meta-class\" class=\"headerlink\" title=\"查看 objecClass 是否为 meta-class\"></a>查看 objecClass 是否为 meta-class</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">BOOL</span> result = class_isMetaClass(objecClass)</div></pre></td></tr></table></figure>\n<h1 id=\"窥视-objc-getClass-、object-getClass\"><a href=\"#窥视-objc-getClass-、object-getClass\" class=\"headerlink\" title=\"窥视 objc_getClass()、object_getClass()\"></a>窥视 objc_getClass()、object_getClass()</h1><h2 id=\"object-getClass\"><a href=\"#object-getClass\" class=\"headerlink\" title=\"object_getClass\"></a>object_getClass</h2><p>打开 Runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>，找到 objc-class.mm，搜索 object_getClass：<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> object_getClass(id obj)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj) <span class=\"keyword\">return</span> obj-&gt;getIsa();</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Nil;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"objc-getClass\"><a href=\"#objc-getClass\" class=\"headerlink\" title=\"objc_getClass\"></a>objc_getClass</h2><p>打开 Runtime 源码，找到 runtime.mm，搜索 objc_getClass：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class objc_getClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *aClassName)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!aClassName) <span class=\"keyword\">return</span> Nil;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NO unconnected, YES class handler</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">look_up_class</span><span class=\"params\">(aClassName, NO, YES)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面👆的代码里可以确认 objc_getClass 的参数是一个类名。</p>\n<p>Jump To Definition -&gt; look_up_class：<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class </div><div class=\"line\">look_up_class(const char *<span class=\"keyword\">name</span>, </div><div class=\"line\">              bool includeUnconnected __attribute__((unused)), </div><div class=\"line\">              bool includeClassHandler __attribute__((unused)))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">name</span>) return <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    Class result;</div><div class=\"line\">    bool unrealized;</div><div class=\"line\">    &#123;</div><div class=\"line\">        runtimeLock.lock();</div><div class=\"line\">        result = getClassExceptSomeSwift(<span class=\"keyword\">name</span>);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">unrealized</span> = result  &amp;&amp;  !result-&gt;</span>isRealized();</div><div class=\"line\">        <span class=\"keyword\">if</span> (unrealized) &#123;</div><div class=\"line\">            result = realizeClassMaybeSwiftAndUnlock(result, runtimeLock);</div><div class=\"line\">            <span class=\"comment\">// runtimeLock is now unlocked</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            runtimeLock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!result) &#123;</div><div class=\"line\">        <span class=\"comment\">// Ask Swift about its un-instantiated classes.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// We use thread-local storage to prevent infinite recursion</span></div><div class=\"line\">        <span class=\"comment\">// if the hook function provokes another lookup of the same name</span></div><div class=\"line\">        <span class=\"comment\">// (for example, if the hook calls objc_allocateClassPair)</span></div><div class=\"line\"></div><div class=\"line\">        auto *tls = _objc_fetch_pthread_data(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Stop if this thread is already looking up this name.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">for</span> (unsigned i = 0; i &lt; tls-&gt;</span>classNameLookupsUsed; i++) &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">if</span> (0 == strcmp(<span class=\"keyword\">name</span>, tls-&gt;</span>classNameLookups[i])) &#123;</div><div class=\"line\">                return <span class=\"literal\">nil</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Save this lookup in tls.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">if</span> (tls-&gt;</span><span class=\"function\"><span class=\"title\">classNameLookupsUsed</span> == tls-&gt;</span>classNameLookupsAllocated) &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookupsAllocated =</div><div class=\"line\">                (<span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookupsAllocated * <span class=\"number\">2</span> ?: <span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">size_t</span> size = tls-&gt;</span>classNameLookupsAllocated *</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">sizeof</span>(tls-&gt;</span>classNameLookups[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookups = (const char **)</div><div class=\"line\">                <span class=\"function\"><span class=\"title\">realloc</span>(tls-&gt;</span>classNameLookups, size);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span><span class=\"function\"><span class=\"title\">classNameLookups</span>[tls-&gt;</span>classNameLookupsUsed++] = <span class=\"keyword\">name</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Call the hook.</span></div><div class=\"line\">        Class swiftcls = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GetClassHook.get()(<span class=\"keyword\">name</span>, &amp;swiftcls)) &#123;</div><div class=\"line\">            ASSERT(<span class=\"function\"><span class=\"title\">swiftcls</span>-&gt;</span>isRealized());</div><div class=\"line\">            result = swiftcls;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Erase the name from tls.</span></div><div class=\"line\">        <span class=\"function\"><span class=\"title\">unsigned</span> slot = --tls-&gt;</span>classNameLookupsUsed;</div><div class=\"line\">        ASSERT(<span class=\"function\"><span class=\"title\">slot</span> &gt;= 0  &amp;&amp;  slot &lt; tls-&gt;</span>classNameLookupsAllocated);</div><div class=\"line\">        ASSERT(<span class=\"function\"><span class=\"title\">name</span> == tls-&gt;</span>classNameLookups[slot]);</div><div class=\"line\">        <span class=\"function\"><span class=\"title\">tls</span>-&gt;</span>classNameLookups[slot] = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; getClassExceptSomeSwift：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Class</span> getClassExceptSomeSwift(<span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> name <span class=\"keyword\">as</span>-<span class=\"keyword\">is</span></div><div class=\"line\">    <span class=\"type\">Class</span> <span class=\"literal\">result</span> = getClass_impl(name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">result</span>) <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> <span class=\"type\">Swift</span>-mangled equivalent <span class=\"keyword\">of</span> the given name.</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">char</span> *swName = copySwiftV1MangledName(name)) &#123;</div><div class=\"line\">        <span class=\"literal\">result</span> = getClass_impl(swName);</div><div class=\"line\">        free(swName);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; getClass_impl：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Class</span> getClass_impl(<span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    // allocated <span class=\"keyword\">in</span> _read_images</div><div class=\"line\">    <span class=\"type\">ASSERT</span>(gdb_objc_realized_classes);</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> runtime-allocated table</div><div class=\"line\">    <span class=\"type\">Class</span> <span class=\"literal\">result</span> = (<span class=\"type\">Class</span>)<span class=\"type\">NXMapGet</span>(gdb_objc_realized_classes, name);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">result</span>) <span class=\"keyword\">return</span> <span class=\"literal\">result</span>;</div><div class=\"line\"></div><div class=\"line\">    // <span class=\"type\">Try</span> table <span class=\"keyword\">from</span> dyld <span class=\"literal\">shared</span> cache.</div><div class=\"line\">    // <span class=\"type\">Note</span> we <span class=\"keyword\">do</span> this last to handle the <span class=\"keyword\">case</span> where we dlopen'ed a <span class=\"literal\">shared</span> cache</div><div class=\"line\">    // dylib <span class=\"keyword\">with</span> duplicates <span class=\"keyword\">of</span> classes already present <span class=\"keyword\">in</span> the main executable.</div><div class=\"line\">    // <span class=\"type\">In</span> that <span class=\"keyword\">case</span>, we put the class <span class=\"keyword\">from</span> the main executable <span class=\"keyword\">in</span></div><div class=\"line\">    // gdb_objc_realized_classes <span class=\"keyword\">and</span> want to check that before considering <span class=\"built_in\">any</span></div><div class=\"line\">    // newly loaded <span class=\"literal\">shared</span> cache binaries.</div><div class=\"line\">    <span class=\"keyword\">return</span> getPreoptimizedClass(name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump To Definition -&gt; NXMapGet：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> *NXMapGet(NXMapTable *table, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key) &#123;</div><div class=\"line\">    <span class=\"keyword\">void</span>\t*<span class=\"keyword\">value</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (_NXMapMember(table, key, &amp;<span class=\"keyword\">value</span>) != NX_MAPNOTAKEY) ? <span class=\"keyword\">value</span> : NULL;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>NXMapGet 根据传进来的类名返回了一个类对象。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>object_getClass 的参数是 instance 对象/ class 对象/ meta-class 对象。  </li>\n<li>object_getClass 返回的是 obj 的 isa 指针。</li>\n<li>如果 obj 是 instance 对象则返回 class 对象。如果 obj 是 class 对象则返回 meta-class 对象。如果 obj 是 meta-class 对象则返回 NSObject（基类） 的 meta-class 对象。</li>\n<li>Class objc_getClass(const char *aClassName) ：字符串类名 -&gt; 对应的类对象</li>\n<li>-(void)Class 和 +(void)Class 返回的是类对象。</li>\n</ul>"},{"title":"OC对象的本质","date":"2020-05-06T06:36:30.000Z","_content":"\n* Objective-C 代码的底层实现其实是 C\\C++ 代码\n* Objective-C 的面向对象是基于 C\\C++ 的数据结构(结构体)实现的\n\n![ObjectiveC_C_C++_汇编语言_机器语言](OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png)\n\n<!-- more -->\n\n# Objective-C的本质\n\n## 将 Objective-C 代码转换为 C\\C++ 代码\n\n### 创建一个项目\n![OC对象的本质](OC对象的本质/OC对象的本质.png)\n\n在终端打开 main.m 的位置，输入下面的命令生成 main.cpp 文件。因为要生成的代码包括c/c++，所以使用 main.cpp 文件，main.cpp 文件是 c++ 文件，支持 c/c++。\n\n### 生成 main.cpp\n```\n$ clang -rewrite-objc main.m -o main.cpp\n```\n没有指定平台，默认生成的是多个平台的代码，代码量太大。\n\n### 指定生成 iphoneos 平台、arm64 架构的 main.cpp  \n指定平台，不同平台支持的代码不一样，如 Windows、mac、iOS。  \n指定框架，不同框架支持的代码也不一样，模拟器(i386)、32bit(armv7)、64bit（arm64）。\n```\n$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp\n```\nxcrun -sdk iphoneos：指定 iphoneos。\n-arch arm64：指定 arm64 架构。\n\n报错：xcrun: error: SDK \"iphoneos\" cannot be located  \n解决1：给Xcode命令行工具指定路径↓\n```\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/\n```\n\n（如果需要链接其他框架，使用-framework参数。比如-framework UIKit。(未验证)）\n```\n$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp -framework UIKit\n```\n\n### 取消 Xcode 对 main-arm64.cpp 的文件编译  \n生成的 main-arm64.cpp 文件添加到项目后，运行会报错。main-arm64.cpp 是临时生成的，内部有一个 main 函数，没做适配。 \n\n解决：删除 Build Phases -> Compile Sources -> main-arm64.cpp\n![main-arm64](OC对象的本质/取消编译main_arm64_cpp.png)\n\n\n\n\n# NSObject 的底层实现\n\n* 思考：一个OC对象在内存中是如何布局的？\n\n## NSObject 在 OC 中的定义：\n```\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n//简化后：\n@interface NSObject {\n    Class isa;\n}\n```\n\n## 在 c++ 中的定义：\n```\nstruct NSObject_IMPL {\n    Class isa; // 8个字节\n};\n```\nClass 是指向结构体的指针：typedef struct objc_class *Class。IMPL 是 implementation 的简写。结构体中只有一个成员变量，所以这个结构体在内存中占用的大小就是指针 isa 的大小。\n\n![OC对象的本质02](OC对象的本质/OC对象的本质02.png)\n\n## 打印 NSObject 实例对象的成员变量所占用的大小 >> 8\n```\n//1.导入头文件\n#import <objc/runtime.h>\n\n//2.打印，结果 8\nNSLog(@\"%zd\", class_getInstanceSize([NSObject class]));\n```\n\n## 打印 obj 指针所指向内存的大小 >> 16\n```\n//1.导入头文件\n#import <malloc/malloc.h>\n\n//2.打印，结果 16\nNSLog(@\"%zd\", malloc_size((__bridge const void *)obj));\n```\n__bridge 可以实现 Objective-C 与 C 语言变量 和 Objective-C 与 Core Foundation 对象之间的互相转换。  \n\n\n## 窥视 class_getInstanceSize\n下载 runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)。  \n打开源码搜索 class_getInstanceSize，找到 objc-class.mm 文件中 class_getInstanceSize 的实现代码。\n```\nsize_t class_getInstanceSize(Class cls)\n{\n    if (!cls) return 0;\n    return cls->alignedInstanceSize();\n}\n```\nJump to Definition -> alignedInstanceSize：\n```\n// Class's ivar size rounded up to a pointer-size boundary.\nuint32_t alignedInstanceSize() const {\n    return word_align(unalignedInstanceSize());\n}\n```\n翻译过来就是，class_getInstanceSize 内部根据成员变量的大小，根据内存对齐原则得到 NSObject 实例对象里成员变量所占用的内存大小。\n\n## 窥视 alloc\nalloc 的内部实现是 allocWithZone，在源码中搜索 allocWithZone：\n```\nid\n_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone)\n{\n    id obj;\n\n    if (fastpath(!zone)) {\n        obj = class_createInstance(cls, 0); //额外空间0\n    } else {\n        obj = class_createInstanceFromZone(cls, 0, zone);\n    }\n\n    if (slowpath(!obj)) obj = _objc_callBadAllocHandler(cls);\n    return obj;\n}\n```\nJump to Definition -> class_createInstance：\n```\nid\nclass_createInstance(Class cls, size_t extraBytes)\n{\n    if (!cls) return nil;\n    return _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\nJump to Definition -> _class_createInstanceFromZone：\n```\n//创建 cls 的实例对象\nstatic ALWAYS_INLINE id\n_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,\n                              int construct_flags = OBJECT_CONSTRUCT_NONE,\n                              bool cxxConstruct = true,\n                              size_t *outAllocatedSize = nil)\n{\n    ASSERT(cls->isRealized());\n\n    // Read class's info bits all at once for performance\n    bool hasCxxCtor = cxxConstruct && cls->hasCxxCtor();\n    bool hasCxxDtor = cls->hasCxxDtor();\n    bool fast = cls->canAllocNonpointer();\n    size_t size;\n\n    size = cls->instanceSize(extraBytes); //分配空间\n    if (outAllocatedSize) *outAllocatedSize = size;\n\n    id obj;\n    if (zone) {\n        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);\n    } else {\n        obj = (id)calloc(1, size); //c语言分配内存的函数，分配空间：size\n    }\n    if (slowpath(!obj)) {\n        if (construct_flags & OBJECT_CONSTRUCT_CALL_BADALLOC) {\n            return _objc_callBadAllocHandler(cls);\n        }\n        return nil;\n    }\n\n    if (!zone && fast) {\n        obj->initInstanceIsa(cls, hasCxxDtor);\n    } else {\n        // Use raw pointer isa on the assumption that they might be\n        // doing something weird with the zone or RR.\n        obj->initIsa(cls);\n    }\n\n    if (fastpath(!hasCxxCtor)) {\n        return obj;\n    }\n\n    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;\n    return object_cxxConstructFromClass(obj, cls, construct_flags);\n}\n```\n\nJump to Definition -> instanceSize：\n```\nsize_t instanceSize(size_t extraBytes) const {\n    if (fastpath(cache.hasFastInstanceSize(extraBytes))) {\n        return cache.fastInstanceSize(extraBytes);\n    }\n\n    size_t size = alignedInstanceSize() + extraBytes;\n    // CF requires all objects be at least 16 bytes.\n    if (size < 16) size = 16;\n    return size;\n}\n```\n可以看到，创建的实例对象的大小至少16个字节。CoreFoundation 框架内部就是这么硬性规定的。\n\n## 小结：  \n```\nNSObject *obj = [[NSObject alloc] init];\n```\n* 上面👆这句代码实际上是在内存中生成了一个 c 语言定义的结构体，结构体内有一个类型为 Class 的 isa 指针，结构体的大小 8 个字节。Class 是一个指向结构体的指针。\n\n* 一个NSObject对象占用多少内存？  \nalloc 方法让系统分配了16个字节给 NSObject 对象（可以通过 malloc_size 函数获取）。  \nNSObject 对象内部只有一个成员变量，即指针 isa，所以只使用了8个字节的空间（64bit环境下，可以通过 class_getInstanceSize 函数获得）。\n\n* 创建的实例对象的大小至少16个字节.\n\n\n# 查看实例变量的内存的方法\n\n## 通过 Xcode 工具查看对象内存。  \n打开 Debug -> Debug Workflow -> View Memory，在 Address 输入对象的地址。  \n![OC对象的本质03](OC对象的本质/OC对象的本质03.png)\n\n\n## 常用LLDB指令\n### print、p：打印\n```\n(lldb) print obj\n(NSObject *) $0 = 0x000000010380ef00\n(lldb) p obj\n(NSObject *) $1 = 0x000000010380ef00\n```\n\n### po：打印对象\n```\n(lldb) po obj\n<NSObject: 0x10380ef00>\n```\n\n### 格式  \nx是16进制，f是浮点，d是10进制\n\n### 字节大小  \nb：byte 1字节，h：half word 2字节  \nw：word 4字节，g：giant word 8字节\n\n### 读取内存  \nmemory read/数量格式字节数  内存地址\n```\n(lldb) memory read 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ ....... \n```\n\nx/数量格式字节数  内存地址\n```\n(lldb) x 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) x/3xg 0x10380ef00\n0x10380ef00: 0x001dffff9a8b8141 0x0000000000000000\n0x10380ef10: 0x000000010380efe0\n(lldb) x/4xg 0x10380ef00\n0x10380ef00: 0x001dffff9a8b8141 0x0000000000000000\n0x10380ef10: 0x000000010380efe0 0x000000010380f220\n(lldb) x/4xw 0x10380ef00\n0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000\n(lldb) x/4dw 0x10380ef00\n0x10380ef00: -1702133439\n0x10380ef04: 1966079\n0x10380ef08: 0\n0x10380ef0c: 0\n```\n\n打印结果中， x/3xg 0x10380ef00 打印的 0x001dffff9a8b8141 0x0000000000000000 部分是属于 obj 的内存。x/4xw 0x10380ef00 打印的 0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000 部分属于 obj 的内存。\n\n### 修改内存中的值  \nmemory  write  内存地址  数值  \n将内存中的第6个字节改成06：\n```\n(lldb) po obj\n<NSObject: 0x10380ef00>\n\n(lldb) memory read 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) memory write 0x10380ef06 6\n(lldb) x 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 06 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) \n```\n\npo obj 获取到对象地址 0x10380ef00，所以第6个字节的地址就是 0x10380ef06。通过 memory write 0x10380ef06 6，将 0x10380ef06 处的字节改为 6。上面👆 x 0x10380ef00 打印出的结果中可以看到，第 6 个字节成功被修改为 06。\n\n\n# Student 的本质\n定义一个继承 NSObject 的类 Student：\n```\n@interface Student : NSObject {\n    @public\n    int _no;\n    int _age;\n}\n@end\n\n@implementation Student\n@end\n```\n\n创建一个 Student 的实例对象：\n```\nStudent *stu = [[Student alloc] init];\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Student 的实现：\n```\nstruct Student_IMPL {\n    struct NSObject_IMPL NSObject_IVARS;\n    int _no;\n    int _age;\n};\n```\n\n因为 NSObject_IMPL 内部只有一个成员变量指针 isa，所以上面👆的代码可以写成：\n```\nstruct Student_IMPL {\n    Class isa;\n    int _no;\n    int _age;\n};\n```\n\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶03.png)  \n\n结构体 Student_IMPL 的成员变量大小是16字节。  \nisa（8字节）+ _no（4字节）+ _age（4字节）= Student_IMPL（16字节）。  \n\n根据地址也可以看出成员变量的大小：  \n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶01.png)  \n\n如图，指针 stu 指向的地址就是 isa 指向的地址（参考理解：数组首元素的地址就是数组的地址）。指针 isa 8字节，所以 _no 的地址在 isa 的地址基础上加8个字节。_no 是 Int 类型4字节，所以 _age 的地址在 _no 地址的基础上加4个字节。实例变量内部的成员变量的地址，在堆中依次往后加。\n\n打开内存图：\nDebug -> Debug Workflow -> View Memory\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶02.png)  \n因为 iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。_no 是 0x00000004，_age 是 0x00000005：\n```\n(lldb) x/4xw 0x103a085d0\n0x103a085d0: 0x000011c9 0x001d8001 0x00000004 0x00000005\n```\n\n通过修改内存中的值的方式来修改 _no：\n```\n(lldb) x 0x103a085d0\n0x103a085d0: c9 11 00 00 01 80 1d 00 04 00 00 00 05 00 00 00  ................\n0x103a085e0: b0 86 a0 03 01 00 00 00 f0 88 a0 03 01 00 00 00  ................\n(lldb) memory write 0x103a085d8 9\n(lldb) x 0x103a085d0\n0x103a085d0: c9 11 00 00 01 80 1d 00 09 00 00 00 05 00 00 00  ................\n0x103a085e0: b0 86 a0 03 01 00 00 00 f0 88 a0 03 01 00 00 00  ................\n(lldb) p stu->_no\n(int) $3 = 9\n```\n\n上面👆通过 memory write 将实例对象的第8个字节 04 给为 09，打印 _no = 9。\n\n## 小结\n* iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。\n\n* 使用 memory write，可以通过修改内存中的值的方式来修改成员变量的值。\n\n# 更复杂的继承关系\n\n## 定义 Person、Student\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation Person\n@end\n\n@interface Student : Person\n{\n    int _no;\n}\n@end\n\n@implementation Student\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person、Student 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n}; // 16 内存对齐：结构体的大小必须是最大成员大小的倍数\n\nstruct Student_IMPL {\n    struct Person_IMPL Person_IVARS; // 16\n    int _no; // 4\n}; // 16\n```\n继承关系图解：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶04.png)  \n\n## Person、Student 的内存大小\n\n打印 Person、Student 实例变量的大小：  \n```\nStudent *stu = [[Student alloc] init];\nNSLog(@\"stu - %zd\", class_getInstanceSize([Student class])); //打印结果 16\nNSLog(@\"stu - %zd\", malloc_size((__bridge const void *)stu)); //打印结果 16\n\nPerson *person = [[Person alloc] init];\nNSLog(@\"person - %zd\", class_getInstanceSize([Person class])); //打印结果 16\nNSLog(@\"person - %zd\", malloc_size((__bridge const void *)person)); //打印结果 16\n```\n\n虽然 Student 比 Person 多了一个成员变量 _no（4字节），但是 Student 和 Person 打印出来的内存大小都是16字节。\n\nPerson、Student 的内存分配图解：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶05.png)  \n\nPerson 的成员变量的内存之和是12个字节，根据内存对齐的规则，Person 的内存大小必须是内存最大的成员变量 isa（8字节）的倍数，所以分配了16字节的内存给 Person。Student 的成员变量之和是20字节，但是 Person 中有多余的4字节，所以成员变量 _no 的内存被放到了 Person 多余的内存空间里，最终分配给 Student 的内存大小为16字节。  \n\n## @property 定义属性的内存分配\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@property (nonatomic, assign) int height;\n@end\n\n@implementation Person\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n    int _height; //4\n}; // 16 \n```\n\n## 小结\n* 内存对齐原则：结构体的大小必须是最大成员大小的倍数。\n\n* 子类在分配内存时，如果父类的内存空间有剩余，优先使用父类的内存空间。\n\n* 创建出来的实列对象的内存中只存有成员变量，不包含方法。以 Person 为例，不同的 Person 实例对象的方法是相同的，所以方法放到类对象的方法列表里，供不同的 Person 实例对象调用。\n\n\n# 窥视 alignedInstanceSize\nclass_getInstanceSize 获取内存大小调用的是 alignedInstanceSize：\n```\n// Class's ivar size rounded up to a pointer-size boundary.\nuint32_t alignedInstanceSize() const {\n    return word_align(unalignedInstanceSize());\n}\n```\n\nalign：对齐。word_align(unalignedInstanceSize())：传入一个未对齐（unaligned）的内存，word_align 将其对齐后返回。\n\n\n# Person 对象的内存分配\n\n## 定义 Person\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _height;\n    int _no;\n}\n@end\n\n@implementation Person\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n    int _height; //4\n    int _no; //4\n}; // 24\n```\n\n## 创建 Person 实例变量，打印内存大小：\n```\nPerson *person = [[Person alloc] init];\nNSLog(@\"person - %zd\", sizeof(struct Person_IMPL)); //24\nNSLog(@\"person - %zd\", class_getInstanceSize([Person class])); //24\nNSLog(@\"person - %zd\", malloc_size((__bridge const void *)person)); //32\n```\n\nPerson 内的成员变量的从内存图中可以确认，Person 分配的内存是32：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶06.png) \n\n## 窥视 _class_createInstanceFromZone\nalloc -> allocWithZoone -> _objc_rootAllocWithZone -> class_createInstance -> _class_createInstanceFromZone\n\n_class_createInstanceFromZone 实现：\n```\n//创建 cls 的实例对象\nstatic ALWAYS_INLINE id\n_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,\n                              int construct_flags = OBJECT_CONSTRUCT_NONE,\n                              bool cxxConstruct = true,\n                              size_t *outAllocatedSize = nil)\n{\n    ASSERT(cls->isRealized());\n\n    // Read class's info bits all at once for performance\n    bool hasCxxCtor = cxxConstruct && cls->hasCxxCtor();\n    bool hasCxxDtor = cls->hasCxxDtor();\n    bool fast = cls->canAllocNonpointer();\n    size_t size;\n\n    size = cls->instanceSize(extraBytes); //分配空间\n    if (outAllocatedSize) *outAllocatedSize = size;\n\n    id obj;\n    if (zone) {\n        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);\n    } else {\n        obj = (id)calloc(1, size); //c语言分配内存的函数，需要分配的内存大小：size\n    }\n    if (slowpath(!obj)) {\n        if (construct_flags & OBJECT_CONSTRUCT_CALL_BADALLOC) {\n            return _objc_callBadAllocHandler(cls);\n        }\n        return nil;\n    }\n\n    if (!zone && fast) {\n        obj->initInstanceIsa(cls, hasCxxDtor);\n    } else {\n        // Use raw pointer isa on the assumption that they might be\n        // doing something weird with the zone or RR.\n        obj->initIsa(cls);\n    }\n\n    if (fastpath(!hasCxxCtor)) {\n        return obj;\n    }\n\n    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;\n    return object_cxxConstructFromClass(obj, cls, construct_flags);\n}\n```\n\n可以看出，代码最终是调用 obj = (id)calloc(1, size); 创建的实列对象。而 size = cls->instanceSize(extraBytes); 是根据成员变量大小计算出来的需要开辟的内存大小。instanceSize(extraBytes) 的参数 extraBytes 来自 _objc_rootAllocWithZone，_objc_rootAllocWithZone 传入的 extraBytes = 0：\n```\nid\n_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone)\n{\n    id obj;\n\n    if (fastpath(!zone)) {\n        obj = class_createInstance(cls, 0);\n    } else {\n        obj = class_createInstanceFromZone(cls, 0, zone);\n    }\n\n    if (slowpath(!obj)) obj = _objc_callBadAllocHandler(cls);\n    return obj;\n}\n```\n\n排查完 instanceSize(extraBytes) 后，可以确定 class_getInstanceSize() 与 malloc_size() 获取到的内存大小不同的原因来自 calloc。\n\n# 窥视 calloc\ncalloc 是 c 语言的标准库，需要下载 [libmalloc](https://opensource.apple.com/tarballs/libmalloc/)（libmalloc-283 文件里没有 malloc.c 文件了，这里下的是 libmalloc-166.200.60.tar.gz）。\n\n打开 libmalloc 项目找到 malloc.c 文件，再找到 calloc 方法：\n```\nvoid *\ncalloc(size_t num_items, size_t size)\n{\n\tvoid *retval;\n\tretval = malloc_zone_calloc(default_zone, num_items, size);\n\tif (retval == NULL) {\n\t\terrno = ENOMEM;\n\t}\n\treturn retval;\n}\n```\n\nJump to Definition -> malloc_zone_calloc\n```\nvoid *\nmalloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)\n{\n\tvoid *ptr;\n\tsize_t alloc_size;\n\tif (malloc_check_start && (malloc_check_counter++ >= malloc_check_start)) {\n\t\tinternal_check();\n\t}\n\tif (os_mul_overflow(num_items, size, &alloc_size) || alloc_size > MALLOC_ABSOLUTE_MAX_SIZE){\n\t\terrno = ENOMEM;\n\t\treturn NULL;\n\t}\n\n\tptr = zone->calloc(zone, num_items, size);\n\t\n\tif (malloc_logger) {\n\t\tmalloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE | MALLOC_LOG_TYPE_CLEARED, (uintptr_t)zone,\n\t\t\t\t(uintptr_t)(num_items * size), 0, (uintptr_t)ptr, 0);\n\t}\n\treturn ptr;\n}\n```\n\nmalloc_zone_calloc 中就是系统分配内存的具体实现。另外，在系统分配内存时有一个 NANO_MAX_SIZE：\n```\n#define NANO_MAX_SIZE\t\t\t256 /* Buckets sized {16, 32, 48, 64, 80, 96, 112, ...} */\n```\n\nBuckets sized：iOS 堆空间里内存分为一块一块的内存空间，大小都是16的倍数，最大的内存空间块是256。\n\nmalloc_zone_calloc 这里也存在内存对齐原则。前面在生成结构体的时候提到过，根据内存对齐原则，结构体的大小必须是最大成员大小的倍数。而在这里，系统在分配内存时，分配的内存必须是16的倍数。因为 ios 系统为了提升内存分配的速度，固定了需要分配的内存空间块（Buckets sized）。在需要分配内存的时候，会找到最合适的内存空间块们来分配给实例对象。\n\n## 小结\n* 创建一个实例对象，至少需要多少内存?\n```\n#import <objc/runtime.h>\nclass_getInstanceSize([NSObject class]);\n```\n\n* 创建一个实例对象，实际上分配了多少内存？\n```\n#import <malloc/malloc.h>\nmalloc_size((__bridge const void *)obj);\n```\n\n* sizeof() 是运算符，计算类型的大小，是在编译的时候就确定的。\n\n* 内存对齐原则，结构体的大小必须是最大成员大小的倍数，系统分配内存的大小必须是固定的大小（16的倍数）。\n","source":"_posts/OC底层/原理/OC对象的本质.md","raw":"---\ntitle: OC对象的本质\ndate: 2020-05-06 14:36:30\ntags: OC底层原理\n---\n\n* Objective-C 代码的底层实现其实是 C\\C++ 代码\n* Objective-C 的面向对象是基于 C\\C++ 的数据结构(结构体)实现的\n\n![ObjectiveC_C_C++_汇编语言_机器语言](OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png)\n\n<!-- more -->\n\n# Objective-C的本质\n\n## 将 Objective-C 代码转换为 C\\C++ 代码\n\n### 创建一个项目\n![OC对象的本质](OC对象的本质/OC对象的本质.png)\n\n在终端打开 main.m 的位置，输入下面的命令生成 main.cpp 文件。因为要生成的代码包括c/c++，所以使用 main.cpp 文件，main.cpp 文件是 c++ 文件，支持 c/c++。\n\n### 生成 main.cpp\n```\n$ clang -rewrite-objc main.m -o main.cpp\n```\n没有指定平台，默认生成的是多个平台的代码，代码量太大。\n\n### 指定生成 iphoneos 平台、arm64 架构的 main.cpp  \n指定平台，不同平台支持的代码不一样，如 Windows、mac、iOS。  \n指定框架，不同框架支持的代码也不一样，模拟器(i386)、32bit(armv7)、64bit（arm64）。\n```\n$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp\n```\nxcrun -sdk iphoneos：指定 iphoneos。\n-arch arm64：指定 arm64 架构。\n\n报错：xcrun: error: SDK \"iphoneos\" cannot be located  \n解决1：给Xcode命令行工具指定路径↓\n```\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/\n```\n\n（如果需要链接其他框架，使用-framework参数。比如-framework UIKit。(未验证)）\n```\n$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp -framework UIKit\n```\n\n### 取消 Xcode 对 main-arm64.cpp 的文件编译  \n生成的 main-arm64.cpp 文件添加到项目后，运行会报错。main-arm64.cpp 是临时生成的，内部有一个 main 函数，没做适配。 \n\n解决：删除 Build Phases -> Compile Sources -> main-arm64.cpp\n![main-arm64](OC对象的本质/取消编译main_arm64_cpp.png)\n\n\n\n\n# NSObject 的底层实现\n\n* 思考：一个OC对象在内存中是如何布局的？\n\n## NSObject 在 OC 中的定义：\n```\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n//简化后：\n@interface NSObject {\n    Class isa;\n}\n```\n\n## 在 c++ 中的定义：\n```\nstruct NSObject_IMPL {\n    Class isa; // 8个字节\n};\n```\nClass 是指向结构体的指针：typedef struct objc_class *Class。IMPL 是 implementation 的简写。结构体中只有一个成员变量，所以这个结构体在内存中占用的大小就是指针 isa 的大小。\n\n![OC对象的本质02](OC对象的本质/OC对象的本质02.png)\n\n## 打印 NSObject 实例对象的成员变量所占用的大小 >> 8\n```\n//1.导入头文件\n#import <objc/runtime.h>\n\n//2.打印，结果 8\nNSLog(@\"%zd\", class_getInstanceSize([NSObject class]));\n```\n\n## 打印 obj 指针所指向内存的大小 >> 16\n```\n//1.导入头文件\n#import <malloc/malloc.h>\n\n//2.打印，结果 16\nNSLog(@\"%zd\", malloc_size((__bridge const void *)obj));\n```\n__bridge 可以实现 Objective-C 与 C 语言变量 和 Objective-C 与 Core Foundation 对象之间的互相转换。  \n\n\n## 窥视 class_getInstanceSize\n下载 runtime 源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/)。  \n打开源码搜索 class_getInstanceSize，找到 objc-class.mm 文件中 class_getInstanceSize 的实现代码。\n```\nsize_t class_getInstanceSize(Class cls)\n{\n    if (!cls) return 0;\n    return cls->alignedInstanceSize();\n}\n```\nJump to Definition -> alignedInstanceSize：\n```\n// Class's ivar size rounded up to a pointer-size boundary.\nuint32_t alignedInstanceSize() const {\n    return word_align(unalignedInstanceSize());\n}\n```\n翻译过来就是，class_getInstanceSize 内部根据成员变量的大小，根据内存对齐原则得到 NSObject 实例对象里成员变量所占用的内存大小。\n\n## 窥视 alloc\nalloc 的内部实现是 allocWithZone，在源码中搜索 allocWithZone：\n```\nid\n_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone)\n{\n    id obj;\n\n    if (fastpath(!zone)) {\n        obj = class_createInstance(cls, 0); //额外空间0\n    } else {\n        obj = class_createInstanceFromZone(cls, 0, zone);\n    }\n\n    if (slowpath(!obj)) obj = _objc_callBadAllocHandler(cls);\n    return obj;\n}\n```\nJump to Definition -> class_createInstance：\n```\nid\nclass_createInstance(Class cls, size_t extraBytes)\n{\n    if (!cls) return nil;\n    return _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\nJump to Definition -> _class_createInstanceFromZone：\n```\n//创建 cls 的实例对象\nstatic ALWAYS_INLINE id\n_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,\n                              int construct_flags = OBJECT_CONSTRUCT_NONE,\n                              bool cxxConstruct = true,\n                              size_t *outAllocatedSize = nil)\n{\n    ASSERT(cls->isRealized());\n\n    // Read class's info bits all at once for performance\n    bool hasCxxCtor = cxxConstruct && cls->hasCxxCtor();\n    bool hasCxxDtor = cls->hasCxxDtor();\n    bool fast = cls->canAllocNonpointer();\n    size_t size;\n\n    size = cls->instanceSize(extraBytes); //分配空间\n    if (outAllocatedSize) *outAllocatedSize = size;\n\n    id obj;\n    if (zone) {\n        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);\n    } else {\n        obj = (id)calloc(1, size); //c语言分配内存的函数，分配空间：size\n    }\n    if (slowpath(!obj)) {\n        if (construct_flags & OBJECT_CONSTRUCT_CALL_BADALLOC) {\n            return _objc_callBadAllocHandler(cls);\n        }\n        return nil;\n    }\n\n    if (!zone && fast) {\n        obj->initInstanceIsa(cls, hasCxxDtor);\n    } else {\n        // Use raw pointer isa on the assumption that they might be\n        // doing something weird with the zone or RR.\n        obj->initIsa(cls);\n    }\n\n    if (fastpath(!hasCxxCtor)) {\n        return obj;\n    }\n\n    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;\n    return object_cxxConstructFromClass(obj, cls, construct_flags);\n}\n```\n\nJump to Definition -> instanceSize：\n```\nsize_t instanceSize(size_t extraBytes) const {\n    if (fastpath(cache.hasFastInstanceSize(extraBytes))) {\n        return cache.fastInstanceSize(extraBytes);\n    }\n\n    size_t size = alignedInstanceSize() + extraBytes;\n    // CF requires all objects be at least 16 bytes.\n    if (size < 16) size = 16;\n    return size;\n}\n```\n可以看到，创建的实例对象的大小至少16个字节。CoreFoundation 框架内部就是这么硬性规定的。\n\n## 小结：  \n```\nNSObject *obj = [[NSObject alloc] init];\n```\n* 上面👆这句代码实际上是在内存中生成了一个 c 语言定义的结构体，结构体内有一个类型为 Class 的 isa 指针，结构体的大小 8 个字节。Class 是一个指向结构体的指针。\n\n* 一个NSObject对象占用多少内存？  \nalloc 方法让系统分配了16个字节给 NSObject 对象（可以通过 malloc_size 函数获取）。  \nNSObject 对象内部只有一个成员变量，即指针 isa，所以只使用了8个字节的空间（64bit环境下，可以通过 class_getInstanceSize 函数获得）。\n\n* 创建的实例对象的大小至少16个字节.\n\n\n# 查看实例变量的内存的方法\n\n## 通过 Xcode 工具查看对象内存。  \n打开 Debug -> Debug Workflow -> View Memory，在 Address 输入对象的地址。  \n![OC对象的本质03](OC对象的本质/OC对象的本质03.png)\n\n\n## 常用LLDB指令\n### print、p：打印\n```\n(lldb) print obj\n(NSObject *) $0 = 0x000000010380ef00\n(lldb) p obj\n(NSObject *) $1 = 0x000000010380ef00\n```\n\n### po：打印对象\n```\n(lldb) po obj\n<NSObject: 0x10380ef00>\n```\n\n### 格式  \nx是16进制，f是浮点，d是10进制\n\n### 字节大小  \nb：byte 1字节，h：half word 2字节  \nw：word 4字节，g：giant word 8字节\n\n### 读取内存  \nmemory read/数量格式字节数  内存地址\n```\n(lldb) memory read 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ ....... \n```\n\nx/数量格式字节数  内存地址\n```\n(lldb) x 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) x/3xg 0x10380ef00\n0x10380ef00: 0x001dffff9a8b8141 0x0000000000000000\n0x10380ef10: 0x000000010380efe0\n(lldb) x/4xg 0x10380ef00\n0x10380ef00: 0x001dffff9a8b8141 0x0000000000000000\n0x10380ef10: 0x000000010380efe0 0x000000010380f220\n(lldb) x/4xw 0x10380ef00\n0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000\n(lldb) x/4dw 0x10380ef00\n0x10380ef00: -1702133439\n0x10380ef04: 1966079\n0x10380ef08: 0\n0x10380ef0c: 0\n```\n\n打印结果中， x/3xg 0x10380ef00 打印的 0x001dffff9a8b8141 0x0000000000000000 部分是属于 obj 的内存。x/4xw 0x10380ef00 打印的 0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000 部分属于 obj 的内存。\n\n### 修改内存中的值  \nmemory  write  内存地址  数值  \n将内存中的第6个字节改成06：\n```\n(lldb) po obj\n<NSObject: 0x10380ef00>\n\n(lldb) memory read 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 1d 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) memory write 0x10380ef06 6\n(lldb) x 0x10380ef00\n0x10380ef00: 41 81 8b 9a ff ff 06 00 00 00 00 00 00 00 00 00  A...............\n0x10380ef10: e0 ef 80 03 01 00 00 00 20 f2 80 03 01 00 00 00  ........ .......\n(lldb) \n```\n\npo obj 获取到对象地址 0x10380ef00，所以第6个字节的地址就是 0x10380ef06。通过 memory write 0x10380ef06 6，将 0x10380ef06 处的字节改为 6。上面👆 x 0x10380ef00 打印出的结果中可以看到，第 6 个字节成功被修改为 06。\n\n\n# Student 的本质\n定义一个继承 NSObject 的类 Student：\n```\n@interface Student : NSObject {\n    @public\n    int _no;\n    int _age;\n}\n@end\n\n@implementation Student\n@end\n```\n\n创建一个 Student 的实例对象：\n```\nStudent *stu = [[Student alloc] init];\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Student 的实现：\n```\nstruct Student_IMPL {\n    struct NSObject_IMPL NSObject_IVARS;\n    int _no;\n    int _age;\n};\n```\n\n因为 NSObject_IMPL 内部只有一个成员变量指针 isa，所以上面👆的代码可以写成：\n```\nstruct Student_IMPL {\n    Class isa;\n    int _no;\n    int _age;\n};\n```\n\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶03.png)  \n\n结构体 Student_IMPL 的成员变量大小是16字节。  \nisa（8字节）+ _no（4字节）+ _age（4字节）= Student_IMPL（16字节）。  \n\n根据地址也可以看出成员变量的大小：  \n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶01.png)  \n\n如图，指针 stu 指向的地址就是 isa 指向的地址（参考理解：数组首元素的地址就是数组的地址）。指针 isa 8字节，所以 _no 的地址在 isa 的地址基础上加8个字节。_no 是 Int 类型4字节，所以 _age 的地址在 _no 地址的基础上加4个字节。实例变量内部的成员变量的地址，在堆中依次往后加。\n\n打开内存图：\nDebug -> Debug Workflow -> View Memory\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶02.png)  \n因为 iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。_no 是 0x00000004，_age 是 0x00000005：\n```\n(lldb) x/4xw 0x103a085d0\n0x103a085d0: 0x000011c9 0x001d8001 0x00000004 0x00000005\n```\n\n通过修改内存中的值的方式来修改 _no：\n```\n(lldb) x 0x103a085d0\n0x103a085d0: c9 11 00 00 01 80 1d 00 04 00 00 00 05 00 00 00  ................\n0x103a085e0: b0 86 a0 03 01 00 00 00 f0 88 a0 03 01 00 00 00  ................\n(lldb) memory write 0x103a085d8 9\n(lldb) x 0x103a085d0\n0x103a085d0: c9 11 00 00 01 80 1d 00 09 00 00 00 05 00 00 00  ................\n0x103a085e0: b0 86 a0 03 01 00 00 00 f0 88 a0 03 01 00 00 00  ................\n(lldb) p stu->_no\n(int) $3 = 9\n```\n\n上面👆通过 memory write 将实例对象的第8个字节 04 给为 09，打印 _no = 9。\n\n## 小结\n* iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。\n\n* 使用 memory write，可以通过修改内存中的值的方式来修改成员变量的值。\n\n# 更复杂的继承关系\n\n## 定义 Person、Student\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@end\n\n@implementation Person\n@end\n\n@interface Student : Person\n{\n    int _no;\n}\n@end\n\n@implementation Student\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person、Student 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n}; // 16 内存对齐：结构体的大小必须是最大成员大小的倍数\n\nstruct Student_IMPL {\n    struct Person_IMPL Person_IVARS; // 16\n    int _no; // 4\n}; // 16\n```\n继承关系图解：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶04.png)  \n\n## Person、Student 的内存大小\n\n打印 Person、Student 实例变量的大小：  \n```\nStudent *stu = [[Student alloc] init];\nNSLog(@\"stu - %zd\", class_getInstanceSize([Student class])); //打印结果 16\nNSLog(@\"stu - %zd\", malloc_size((__bridge const void *)stu)); //打印结果 16\n\nPerson *person = [[Person alloc] init];\nNSLog(@\"person - %zd\", class_getInstanceSize([Person class])); //打印结果 16\nNSLog(@\"person - %zd\", malloc_size((__bridge const void *)person)); //打印结果 16\n```\n\n虽然 Student 比 Person 多了一个成员变量 _no（4字节），但是 Student 和 Person 打印出来的内存大小都是16字节。\n\nPerson、Student 的内存分配图解：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶05.png)  \n\nPerson 的成员变量的内存之和是12个字节，根据内存对齐的规则，Person 的内存大小必须是内存最大的成员变量 isa（8字节）的倍数，所以分配了16字节的内存给 Person。Student 的成员变量之和是20字节，但是 Person 中有多余的4字节，所以成员变量 _no 的内存被放到了 Person 多余的内存空间里，最终分配给 Student 的内存大小为16字节。  \n\n## @property 定义属性的内存分配\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@property (nonatomic, assign) int height;\n@end\n\n@implementation Person\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n    int _height; //4\n}; // 16 \n```\n\n## 小结\n* 内存对齐原则：结构体的大小必须是最大成员大小的倍数。\n\n* 子类在分配内存时，如果父类的内存空间有剩余，优先使用父类的内存空间。\n\n* 创建出来的实列对象的内存中只存有成员变量，不包含方法。以 Person 为例，不同的 Person 实例对象的方法是相同的，所以方法放到类对象的方法列表里，供不同的 Person 实例对象调用。\n\n\n# 窥视 alignedInstanceSize\nclass_getInstanceSize 获取内存大小调用的是 alignedInstanceSize：\n```\n// Class's ivar size rounded up to a pointer-size boundary.\nuint32_t alignedInstanceSize() const {\n    return word_align(unalignedInstanceSize());\n}\n```\n\nalign：对齐。word_align(unalignedInstanceSize())：传入一个未对齐（unaligned）的内存，word_align 将其对齐后返回。\n\n\n# Person 对象的内存分配\n\n## 定义 Person\n```\n@interface Person : NSObject\n{\n    @public\n    int _age;\n    int _height;\n    int _no;\n}\n@end\n\n@implementation Person\n@end\n```\n\n将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：\n```\nstruct Person_IMPL {\n    struct NSObject_IMPL NSObject_IVARS; // 8\n    int _age; // 4\n    int _height; //4\n    int _no; //4\n}; // 24\n```\n\n## 创建 Person 实例变量，打印内存大小：\n```\nPerson *person = [[Person alloc] init];\nNSLog(@\"person - %zd\", sizeof(struct Person_IMPL)); //24\nNSLog(@\"person - %zd\", class_getInstanceSize([Person class])); //24\nNSLog(@\"person - %zd\", malloc_size((__bridge const void *)person)); //32\n```\n\nPerson 内的成员变量的从内存图中可以确认，Person 分配的内存是32：\n![OC对象的本质进阶01](OC对象的本质/OC对象的本质进阶06.png) \n\n## 窥视 _class_createInstanceFromZone\nalloc -> allocWithZoone -> _objc_rootAllocWithZone -> class_createInstance -> _class_createInstanceFromZone\n\n_class_createInstanceFromZone 实现：\n```\n//创建 cls 的实例对象\nstatic ALWAYS_INLINE id\n_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,\n                              int construct_flags = OBJECT_CONSTRUCT_NONE,\n                              bool cxxConstruct = true,\n                              size_t *outAllocatedSize = nil)\n{\n    ASSERT(cls->isRealized());\n\n    // Read class's info bits all at once for performance\n    bool hasCxxCtor = cxxConstruct && cls->hasCxxCtor();\n    bool hasCxxDtor = cls->hasCxxDtor();\n    bool fast = cls->canAllocNonpointer();\n    size_t size;\n\n    size = cls->instanceSize(extraBytes); //分配空间\n    if (outAllocatedSize) *outAllocatedSize = size;\n\n    id obj;\n    if (zone) {\n        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);\n    } else {\n        obj = (id)calloc(1, size); //c语言分配内存的函数，需要分配的内存大小：size\n    }\n    if (slowpath(!obj)) {\n        if (construct_flags & OBJECT_CONSTRUCT_CALL_BADALLOC) {\n            return _objc_callBadAllocHandler(cls);\n        }\n        return nil;\n    }\n\n    if (!zone && fast) {\n        obj->initInstanceIsa(cls, hasCxxDtor);\n    } else {\n        // Use raw pointer isa on the assumption that they might be\n        // doing something weird with the zone or RR.\n        obj->initIsa(cls);\n    }\n\n    if (fastpath(!hasCxxCtor)) {\n        return obj;\n    }\n\n    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;\n    return object_cxxConstructFromClass(obj, cls, construct_flags);\n}\n```\n\n可以看出，代码最终是调用 obj = (id)calloc(1, size); 创建的实列对象。而 size = cls->instanceSize(extraBytes); 是根据成员变量大小计算出来的需要开辟的内存大小。instanceSize(extraBytes) 的参数 extraBytes 来自 _objc_rootAllocWithZone，_objc_rootAllocWithZone 传入的 extraBytes = 0：\n```\nid\n_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone)\n{\n    id obj;\n\n    if (fastpath(!zone)) {\n        obj = class_createInstance(cls, 0);\n    } else {\n        obj = class_createInstanceFromZone(cls, 0, zone);\n    }\n\n    if (slowpath(!obj)) obj = _objc_callBadAllocHandler(cls);\n    return obj;\n}\n```\n\n排查完 instanceSize(extraBytes) 后，可以确定 class_getInstanceSize() 与 malloc_size() 获取到的内存大小不同的原因来自 calloc。\n\n# 窥视 calloc\ncalloc 是 c 语言的标准库，需要下载 [libmalloc](https://opensource.apple.com/tarballs/libmalloc/)（libmalloc-283 文件里没有 malloc.c 文件了，这里下的是 libmalloc-166.200.60.tar.gz）。\n\n打开 libmalloc 项目找到 malloc.c 文件，再找到 calloc 方法：\n```\nvoid *\ncalloc(size_t num_items, size_t size)\n{\n\tvoid *retval;\n\tretval = malloc_zone_calloc(default_zone, num_items, size);\n\tif (retval == NULL) {\n\t\terrno = ENOMEM;\n\t}\n\treturn retval;\n}\n```\n\nJump to Definition -> malloc_zone_calloc\n```\nvoid *\nmalloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)\n{\n\tvoid *ptr;\n\tsize_t alloc_size;\n\tif (malloc_check_start && (malloc_check_counter++ >= malloc_check_start)) {\n\t\tinternal_check();\n\t}\n\tif (os_mul_overflow(num_items, size, &alloc_size) || alloc_size > MALLOC_ABSOLUTE_MAX_SIZE){\n\t\terrno = ENOMEM;\n\t\treturn NULL;\n\t}\n\n\tptr = zone->calloc(zone, num_items, size);\n\t\n\tif (malloc_logger) {\n\t\tmalloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE | MALLOC_LOG_TYPE_CLEARED, (uintptr_t)zone,\n\t\t\t\t(uintptr_t)(num_items * size), 0, (uintptr_t)ptr, 0);\n\t}\n\treturn ptr;\n}\n```\n\nmalloc_zone_calloc 中就是系统分配内存的具体实现。另外，在系统分配内存时有一个 NANO_MAX_SIZE：\n```\n#define NANO_MAX_SIZE\t\t\t256 /* Buckets sized {16, 32, 48, 64, 80, 96, 112, ...} */\n```\n\nBuckets sized：iOS 堆空间里内存分为一块一块的内存空间，大小都是16的倍数，最大的内存空间块是256。\n\nmalloc_zone_calloc 这里也存在内存对齐原则。前面在生成结构体的时候提到过，根据内存对齐原则，结构体的大小必须是最大成员大小的倍数。而在这里，系统在分配内存时，分配的内存必须是16的倍数。因为 ios 系统为了提升内存分配的速度，固定了需要分配的内存空间块（Buckets sized）。在需要分配内存的时候，会找到最合适的内存空间块们来分配给实例对象。\n\n## 小结\n* 创建一个实例对象，至少需要多少内存?\n```\n#import <objc/runtime.h>\nclass_getInstanceSize([NSObject class]);\n```\n\n* 创建一个实例对象，实际上分配了多少内存？\n```\n#import <malloc/malloc.h>\nmalloc_size((__bridge const void *)obj);\n```\n\n* sizeof() 是运算符，计算类型的大小，是在编译的时候就确定的。\n\n* 内存对齐原则，结构体的大小必须是最大成员大小的倍数，系统分配内存的大小必须是固定的大小（16的倍数）。\n","slug":"OC底层/原理/OC对象的本质","published":1,"updated":"2020-05-13T07:08:26.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40ar2000ote0363wn07sa","content":"<ul>\n<li>Objective-C 代码的底层实现其实是 C\\C++ 代码</li>\n<li>Objective-C 的面向对象是基于 C\\C++ 的数据结构(结构体)实现的</li>\n</ul>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png\" alt=\"ObjectiveC_C_C++_汇编语言_机器语言\"></p>\n<a id=\"more\"></a>\n<h1 id=\"Objective-C的本质\"><a href=\"#Objective-C的本质\" class=\"headerlink\" title=\"Objective-C的本质\"></a>Objective-C的本质</h1><h2 id=\"将-Objective-C-代码转换为-C-C-代码\"><a href=\"#将-Objective-C-代码转换为-C-C-代码\" class=\"headerlink\" title=\"将 Objective-C 代码转换为 C\\C++ 代码\"></a>将 Objective-C 代码转换为 C\\C++ 代码</h2><h3 id=\"创建一个项目\"><a href=\"#创建一个项目\" class=\"headerlink\" title=\"创建一个项目\"></a>创建一个项目</h3><p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质.png\" alt=\"OC对象的本质\"></p>\n<p>在终端打开 main.m 的位置，输入下面的命令生成 main.cpp 文件。因为要生成的代码包括c/c++，所以使用 main.cpp 文件，main.cpp 文件是 c++ 文件，支持 c/c++。</p>\n<h3 id=\"生成-main-cpp\"><a href=\"#生成-main-cpp\" class=\"headerlink\" title=\"生成 main.cpp\"></a>生成 main.cpp</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> clang -rewrite-objc main.m -o main.cpp</span></div></pre></td></tr></table></figure>\n<p>没有指定平台，默认生成的是多个平台的代码，代码量太大。</p>\n<h3 id=\"指定生成-iphoneos-平台、arm64-架构的-main-cpp\"><a href=\"#指定生成-iphoneos-平台、arm64-架构的-main-cpp\" class=\"headerlink\" title=\"指定生成 iphoneos 平台、arm64 架构的 main.cpp\"></a>指定生成 iphoneos 平台、arm64 架构的 main.cpp</h3><p>指定平台，不同平台支持的代码不一样，如 Windows、mac、iOS。<br>指定框架，不同框架支持的代码也不一样，模拟器(i386)、32bit(armv7)、64bit（arm64）。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp</span></div></pre></td></tr></table></figure></p>\n<p>xcrun -sdk iphoneos：指定 iphoneos。<br>-arch arm64：指定 arm64 架构。</p>\n<p>报错：xcrun: error: SDK “iphoneos” cannot be located<br>解决1：给Xcode命令行工具指定路径↓<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo xcode-select --<span class=\"keyword\">switch</span> <span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>（如果需要链接其他框架，使用-framework参数。比如-framework UIKit。(未验证)）<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main<span class=\"selector-class\">.m</span> -o main-arm64<span class=\"selector-class\">.cpp</span> -framework UIKit</div></pre></td></tr></table></figure></p>\n<h3 id=\"取消-Xcode-对-main-arm64-cpp-的文件编译\"><a href=\"#取消-Xcode-对-main-arm64-cpp-的文件编译\" class=\"headerlink\" title=\"取消 Xcode 对 main-arm64.cpp 的文件编译\"></a>取消 Xcode 对 main-arm64.cpp 的文件编译</h3><p>生成的 main-arm64.cpp 文件添加到项目后，运行会报错。main-arm64.cpp 是临时生成的，内部有一个 main 函数，没做适配。 </p>\n<p>解决：删除 Build Phases -&gt; Compile Sources -&gt; main-arm64.cpp<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/取消编译main_arm64_cpp.png\" alt=\"main-arm64\"></p>\n<h1 id=\"NSObject-的底层实现\"><a href=\"#NSObject-的底层实现\" class=\"headerlink\" title=\"NSObject 的底层实现\"></a>NSObject 的底层实现</h1><ul>\n<li>思考：一个OC对象在内存中是如何布局的？</li>\n</ul>\n<h2 id=\"NSObject-在-OC-中的定义：\"><a href=\"#NSObject-在-OC-中的定义：\" class=\"headerlink\" title=\"NSObject 在 OC 中的定义：\"></a>NSObject 在 OC 中的定义：</h2><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSObject</span>&gt; &#123;</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>  <span class=\"title\">OBJC_ISA_AVAILABILITY</span>;</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//简化后：</div><div class=\"line\">@<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NSObject</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在-c-中的定义：\"><a href=\"#在-c-中的定义：\" class=\"headerlink\" title=\"在 c++ 中的定义：\"></a>在 c++ 中的定义：</h2><figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> </span>&#123;</div><div class=\"line\">    Class isa; <span class=\"comment\">// 8个字节</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Class 是指向结构体的指针：typedef struct objc_class *Class。IMPL 是 implementation 的简写。结构体中只有一个成员变量，所以这个结构体在内存中占用的大小就是指针 isa 的大小。</p>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质02.png\" alt=\"OC对象的本质02\"></p>\n<h2 id=\"打印-NSObject-实例对象的成员变量所占用的大小-gt-gt-8\"><a href=\"#打印-NSObject-实例对象的成员变量所占用的大小-gt-gt-8\" class=\"headerlink\" title=\"打印 NSObject 实例对象的成员变量所占用的大小 &gt;&gt; 8\"></a>打印 NSObject 实例对象的成员变量所占用的大小 &gt;&gt; 8</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.导入头文件</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.打印，结果 8</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zd\"</span>, class_getInstanceSize([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]));</div></pre></td></tr></table></figure>\n<h2 id=\"打印-obj-指针所指向内存的大小-gt-gt-16\"><a href=\"#打印-obj-指针所指向内存的大小-gt-gt-16\" class=\"headerlink\" title=\"打印 obj 指针所指向内存的大小 &gt;&gt; 16\"></a>打印 obj 指针所指向内存的大小 &gt;&gt; 16</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.导入头文件</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;malloc/malloc.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.打印，结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)obj));</div></pre></td></tr></table></figure>\n<p>__bridge 可以实现 Objective-C 与 C 语言变量 和 Objective-C 与 Core Foundation 对象之间的互相转换。  </p>\n<h2 id=\"窥视-class-getInstanceSize\"><a href=\"#窥视-class-getInstanceSize\" class=\"headerlink\" title=\"窥视 class_getInstanceSize\"></a>窥视 class_getInstanceSize</h2><p>下载 runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>。<br>打开源码搜索 class_getInstanceSize，找到 objc-class.mm 文件中 class_getInstanceSize 的实现代码。<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t class_getInstanceSize(Class <span class=\"keyword\">cls</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">cls</span>-&gt;alignedInstanceSize();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; alignedInstanceSize：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Class's ivar size rounded up to a pointer-size boundary.</span></div><div class=\"line\"><span class=\"keyword\">uint32_t</span> alignedInstanceSize() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>翻译过来就是，class_getInstanceSize 内部根据成员变量的大小，根据内存对齐原则得到 NSObject 实例对象里成员变量所占用的内存大小。</p>\n<h2 id=\"窥视-alloc\"><a href=\"#窥视-alloc\" class=\"headerlink\" title=\"窥视 alloc\"></a>窥视 alloc</h2><p>alloc 的内部实现是 allocWithZone，在源码中搜索 allocWithZone：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">_objc_rootAllocWithZone(Class <span class=\"keyword\">cls</span>, malloc_zone_t *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!zone)) &#123;</div><div class=\"line\">        obj = class_createInstance(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>); <span class=\"comment\">//额外空间0</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = class_createInstanceFromZone(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>, zone);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) obj = _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; class_createInstance：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">class_createInstance(Class <span class=\"keyword\">cls</span>, size_t extraBytes)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    <span class=\"keyword\">return</span> _class_createInstanceFromZone(<span class=\"keyword\">cls</span>, extraBytes, nil);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; _class_createInstanceFromZone：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 cls 的实例对象</span></div><div class=\"line\">static ALWAYS_INLINE id</div><div class=\"line\">_class_createInstanceFromZone(Class <span class=\"keyword\">cls</span>, size_t extraBytes, void *zone,</div><div class=\"line\">                              int construct_flags = OBJECT_CONSTRUCT_NONE,</div><div class=\"line\">                              <span class=\"keyword\">bool</span> cxxConstruct = true,</div><div class=\"line\">                              size_t *outAllocatedSize = nil)</div><div class=\"line\">&#123;</div><div class=\"line\">    ASSERT(<span class=\"keyword\">cls</span>-&gt;isRealized());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read class's info bits all at once for performance</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxCtor = cxxConstruct &amp;&amp; <span class=\"keyword\">cls</span>-&gt;hasCxxCtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxDtor = <span class=\"keyword\">cls</span>-&gt;hasCxxDtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> fast = <span class=\"keyword\">cls</span>-&gt;canAllocNonpointer();</div><div class=\"line\">    size_t size;</div><div class=\"line\"></div><div class=\"line\">    size = <span class=\"keyword\">cls</span>-&gt;instanceSize(extraBytes); <span class=\"comment\">//分配空间</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (outAllocatedSize) *outAllocatedSize = size;</div><div class=\"line\"></div><div class=\"line\">    id obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (zone) &#123;</div><div class=\"line\">        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, <span class=\"number\">1</span>, size);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = (id)calloc(<span class=\"number\">1</span>, size); <span class=\"comment\">//c语言分配内存的函数，分配空间：size</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!zone &amp;&amp; fast) &#123;</div><div class=\"line\">        obj-&gt;initInstanceIsa(<span class=\"keyword\">cls</span>, hasCxxDtor);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Use raw pointer isa on the assumption that they might be</span></div><div class=\"line\">        <span class=\"comment\">// doing something weird with the zone or RR.</span></div><div class=\"line\">        obj-&gt;initIsa(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!hasCxxCtor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;</div><div class=\"line\">    <span class=\"keyword\">return</span> object_cxxConstructFromClass(obj, <span class=\"keyword\">cls</span>, construct_flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; instanceSize：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t instanceSize(size_t extraBytes) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span> (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> cache.fastInstanceSize(extraBytes);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    size_t <span class=\"built_in\">size</span> = alignedInstanceSize() + extraBytes;</div><div class=\"line\">    <span class=\"comment\">// CF requires all objects be at least 16 bytes.</span></div><div class=\"line\">    <span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &lt; <span class=\"number\">16</span>) <span class=\"built_in\">size</span> = <span class=\"number\">16</span>;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">size</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，创建的实例对象的大小至少16个字节。CoreFoundation 框架内部就是这么硬性规定的。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSObject *obj = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>上面👆这句代码实际上是在内存中生成了一个 c 语言定义的结构体，结构体内有一个类型为 Class 的 isa 指针，结构体的大小 8 个字节。Class 是一个指向结构体的指针。</p>\n</li>\n<li><p>一个NSObject对象占用多少内存？<br>alloc 方法让系统分配了16个字节给 NSObject 对象（可以通过 malloc_size 函数获取）。<br>NSObject 对象内部只有一个成员变量，即指针 isa，所以只使用了8个字节的空间（64bit环境下，可以通过 class_getInstanceSize 函数获得）。</p>\n</li>\n<li><p>创建的实例对象的大小至少16个字节.</p>\n</li>\n</ul>\n<h1 id=\"查看实例变量的内存的方法\"><a href=\"#查看实例变量的内存的方法\" class=\"headerlink\" title=\"查看实例变量的内存的方法\"></a>查看实例变量的内存的方法</h1><h2 id=\"通过-Xcode-工具查看对象内存。\"><a href=\"#通过-Xcode-工具查看对象内存。\" class=\"headerlink\" title=\"通过 Xcode 工具查看对象内存。\"></a>通过 Xcode 工具查看对象内存。</h2><p>打开 Debug -&gt; Debug Workflow -&gt; View Memory，在 Address 输入对象的地址。<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质03.png\" alt=\"OC对象的本质03\"></p>\n<h2 id=\"常用LLDB指令\"><a href=\"#常用LLDB指令\" class=\"headerlink\" title=\"常用LLDB指令\"></a>常用LLDB指令</h2><h3 id=\"print、p：打印\"><a href=\"#print、p：打印\" class=\"headerlink\" title=\"print、p：打印\"></a>print、p：打印</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) print obj</div><div class=\"line\">(NSObject *) $<span class=\"number\">0</span> = <span class=\"number\">0x000000010380ef00</span></div><div class=\"line\">(lldb) p obj</div><div class=\"line\">(NSObject *) $<span class=\"number\">1</span> = <span class=\"number\">0x000000010380ef00</span></div></pre></td></tr></table></figure>\n<h3 id=\"po：打印对象\"><a href=\"#po：打印对象\" class=\"headerlink\" title=\"po：打印对象\"></a>po：打印对象</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) <span class=\"keyword\">po</span> obj</div><div class=\"line\">&lt;NSObjec<span class=\"variable\">t:</span> <span class=\"number\">0</span>x10380ef00&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>x是16进制，f是浮点，d是10进制</p>\n<h3 id=\"字节大小\"><a href=\"#字节大小\" class=\"headerlink\" title=\"字节大小\"></a>字节大小</h3><p>b：byte 1字节，h：half word 2字节<br>w：word 4字节，g：giant word 8字节</p>\n<h3 id=\"读取内存\"><a href=\"#读取内存\" class=\"headerlink\" title=\"读取内存\"></a>读取内存</h3><p>memory read/数量格式字节数  内存地址<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) memory read <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div></pre></td></tr></table></figure></p>\n<p>x/数量格式字节数  内存地址<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> 8b 9a ff ff <span class=\"number\">1d</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb) x/3xg <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x001dffff9a8b8141</span> <span class=\"number\">0x0000000000000000</span></div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: <span class=\"number\">0x000000010380efe0</span></div><div class=\"line\">(lldb) x/4xg <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x001dffff9a8b8141</span> <span class=\"number\">0x0000000000000000</span></div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: <span class=\"number\">0x000000010380efe0</span> <span class=\"number\">0x000000010380f220</span></div><div class=\"line\">(lldb) x/4xw <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x9a8b8141</span> <span class=\"number\">0x001dffff</span> <span class=\"number\">0x00000000</span> <span class=\"number\">0x00000000</span></div><div class=\"line\">(lldb) x/4<span class=\"built_in\">dw</span> <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: -<span class=\"number\">1702133439</span></div><div class=\"line\"><span class=\"number\">0x10380ef04</span>: <span class=\"number\">1966079</span></div><div class=\"line\"><span class=\"number\">0x10380ef08</span>: <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">0x10380ef0c</span>: <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>打印结果中， x/3xg 0x10380ef00 打印的 0x001dffff9a8b8141 0x0000000000000000 部分是属于 obj 的内存。x/4xw 0x10380ef00 打印的 0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000 部分属于 obj 的内存。</p>\n<h3 id=\"修改内存中的值\"><a href=\"#修改内存中的值\" class=\"headerlink\" title=\"修改内存中的值\"></a>修改内存中的值</h3><p>memory  write  内存地址  数值<br>将内存中的第6个字节改成06：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po obj</div><div class=\"line\">&lt;NSObject: <span class=\"number\">0x10380ef00</span>&gt;</div><div class=\"line\"></div><div class=\"line\">(lldb) memory read <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb) memory write <span class=\"number\">0x10380ef06</span> <span class=\"number\">6</span></div><div class=\"line\">(lldb) x <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">06</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb)</div></pre></td></tr></table></figure></p>\n<p>po obj 获取到对象地址 0x10380ef00，所以第6个字节的地址就是 0x10380ef06。通过 memory write 0x10380ef06 6，将 0x10380ef06 处的字节改为 6。上面👆 x 0x10380ef00 打印出的结果中可以看到，第 6 个字节成功被修改为 06。</p>\n<h1 id=\"Student-的本质\"><a href=\"#Student-的本质\" class=\"headerlink\" title=\"Student 的本质\"></a>Student 的本质</h1><p>定义一个继承 NSObject 的类 Student：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>创建一个 Student 的实例对象：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student *stu = <span class=\"comment\">[<span class=\"comment\">[Student alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Student 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>因为 NSObject_IMPL 内部只有一个成员变量指针 isa，所以上面👆的代码可以写成：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Student_IMPL &#123;</div><div class=\"line\">    Class isa<span class=\"comment\">;</span></div><div class=\"line\">    int _no<span class=\"comment\">;</span></div><div class=\"line\">    int _age<span class=\"comment\">;</span></div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶03.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>结构体 Student_IMPL 的成员变量大小是16字节。<br>isa（8字节）+ _no（4字节）+ _age（4字节）= Student_IMPL（16字节）。  </p>\n<p>根据地址也可以看出成员变量的大小：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶01.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>如图，指针 stu 指向的地址就是 isa 指向的地址（参考理解：数组首元素的地址就是数组的地址）。指针 isa 8字节，所以 _no 的地址在 isa 的地址基础上加8个字节。_no 是 Int 类型4字节，所以 _age 的地址在 _no 地址的基础上加4个字节。实例变量内部的成员变量的地址，在堆中依次往后加。</p>\n<p>打开内存图：<br>Debug -&gt; Debug Workflow -&gt; View Memory<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶02.png\" alt=\"OC对象的本质进阶01\"><br>因为 iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。_no 是 0x00000004，_age 是 0x00000005：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x/<span class=\"number\">4</span>xw <span class=\"number\">0</span>x<span class=\"number\">103a085d0</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">103a085d0</span>: <span class=\"number\">0</span>x<span class=\"number\">000011c9</span> <span class=\"number\">0</span>x<span class=\"number\">001d8001</span> <span class=\"number\">0x00000004</span> <span class=\"number\">0x00000005</span></div></pre></td></tr></table></figure></p>\n<p>通过修改内存中的值的方式来修改 _no：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x <span class=\"number\">0x103a085d0</span></div><div class=\"line\"><span class=\"number\">0x103a085d0</span>: c9 <span class=\"number\">11</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">80</span> <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">04</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\"><span class=\"number\">0x103a085e0</span>: b0 <span class=\"number\">86</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> f0 <span class=\"number\">88</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\">(lldb) memory write <span class=\"number\">0x103a085d8</span> <span class=\"number\">9</span></div><div class=\"line\">(lldb) x <span class=\"number\">0x103a085d0</span></div><div class=\"line\"><span class=\"number\">0x103a085d0</span>: c9 <span class=\"number\">11</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">80</span> <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">09</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\"><span class=\"number\">0x103a085e0</span>: b0 <span class=\"number\">86</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> f0 <span class=\"number\">88</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\">(lldb) p stu-&gt;_no</div><div class=\"line\">(int) $<span class=\"number\">3</span> = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>上面👆通过 memory write 将实例对象的第8个字节 04 给为 09，打印 _no = 9。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。</p>\n</li>\n<li><p>使用 memory write，可以通过修改内存中的值的方式来修改成员变量的值。</p>\n</li>\n</ul>\n<h1 id=\"更复杂的继承关系\"><a href=\"#更复杂的继承关系\" class=\"headerlink\" title=\"更复杂的继承关系\"></a>更复杂的继承关系</h1><h2 id=\"定义-Person、Student\"><a href=\"#定义-Person、Student\" class=\"headerlink\" title=\"定义 Person、Student\"></a>定义 Person、Student</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Student </span>: Person</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">int</span> <span class=\"selector-tag\">_no</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div><div class=\"line\"></div><div class=\"line\">@<span class=\"selector-tag\">implementation</span> <span class=\"selector-tag\">Student</span></div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person、Student 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16 内存对齐：结构体的大小必须是最大成员大小的倍数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> <span class=\"title\">Person_IVARS</span>;</span> <span class=\"comment\">// 16</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no; <span class=\"comment\">// 4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>继承关系图解：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶04.png\" alt=\"OC对象的本质进阶01\">  </p>\n<h2 id=\"Person、Student-的内存大小\"><a href=\"#Person、Student-的内存大小\" class=\"headerlink\" title=\"Person、Student 的内存大小\"></a>Person、Student 的内存大小</h2><p>打印 Person、Student 实例变量的大小：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student *stu = [[Student alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"stu - %zd\"</span>, class_getInstanceSize([Student <span class=\"keyword\">class</span>])); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"stu - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)stu)); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"></div><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, class_getInstanceSize([Person <span class=\"keyword\">class</span>])); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)person)); <span class=\"comment\">//打印结果 16</span></div></pre></td></tr></table></figure></p>\n<p>虽然 Student 比 Person 多了一个成员变量 _no（4字节），但是 Student 和 Person 打印出来的内存大小都是16字节。</p>\n<p>Person、Student 的内存分配图解：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶05.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>Person 的成员变量的内存之和是12个字节，根据内存对齐的规则，Person 的内存大小必须是内存最大的成员变量 isa（8字节）的倍数，所以分配了16字节的内存给 Person。Student 的成员变量之和是20字节，但是 Person 中有多余的4字节，所以成员变量 _no 的内存被放到了 Person 多余的内存空间里，最终分配给 Student 的内存大小为16字节。  </p>\n<h2 id=\"property-定义属性的内存分配\"><a href=\"#property-定义属性的内存分配\" class=\"headerlink\" title=\"@property 定义属性的内存分配\"></a>@property 定义属性的内存分配</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@property</span> (nonatomic, assign) int height;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _height; <span class=\"comment\">//4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>内存对齐原则：结构体的大小必须是最大成员大小的倍数。</p>\n</li>\n<li><p>子类在分配内存时，如果父类的内存空间有剩余，优先使用父类的内存空间。</p>\n</li>\n<li><p>创建出来的实列对象的内存中只存有成员变量，不包含方法。以 Person 为例，不同的 Person 实例对象的方法是相同的，所以方法放到类对象的方法列表里，供不同的 Person 实例对象调用。</p>\n</li>\n</ul>\n<h1 id=\"窥视-alignedInstanceSize\"><a href=\"#窥视-alignedInstanceSize\" class=\"headerlink\" title=\"窥视 alignedInstanceSize\"></a>窥视 alignedInstanceSize</h1><p>class_getInstanceSize 获取内存大小调用的是 alignedInstanceSize：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Class's ivar size rounded up to a pointer-size boundary.</span></div><div class=\"line\"><span class=\"keyword\">uint32_t</span> alignedInstanceSize() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>align：对齐。word_align(unalignedInstanceSize())：传入一个未对齐（unaligned）的内存，word_align 将其对齐后返回。</p>\n<h1 id=\"Person-对象的内存分配\"><a href=\"#Person-对象的内存分配\" class=\"headerlink\" title=\"Person 对象的内存分配\"></a>Person 对象的内存分配</h1><h2 id=\"定义-Person\"><a href=\"#定义-Person\" class=\"headerlink\" title=\"定义 Person\"></a>定义 Person</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _height;</div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _height; <span class=\"comment\">//4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no; <span class=\"comment\">//4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 24</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建-Person-实例变量，打印内存大小：\"><a href=\"#创建-Person-实例变量，打印内存大小：\" class=\"headerlink\" title=\"创建 Person 实例变量，打印内存大小：\"></a>创建 Person 实例变量，打印内存大小：</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> Person_IMPL)); <span class=\"comment\">//24</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, class_getInstanceSize([Person <span class=\"keyword\">class</span>])); <span class=\"comment\">//24</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)person)); <span class=\"comment\">//32</span></div></pre></td></tr></table></figure>\n<p>Person 内的成员变量的从内存图中可以确认，Person 分配的内存是32：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶06.png\" alt=\"OC对象的本质进阶01\"> </p>\n<h2 id=\"窥视-class-createInstanceFromZone\"><a href=\"#窥视-class-createInstanceFromZone\" class=\"headerlink\" title=\"窥视 _class_createInstanceFromZone\"></a>窥视 _class_createInstanceFromZone</h2><p>alloc -&gt; allocWithZoone -&gt; _objc_rootAllocWithZone -&gt; class_createInstance -&gt; _class_createInstanceFromZone</p>\n<p>_class_createInstanceFromZone 实现：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 cls 的实例对象</span></div><div class=\"line\">static ALWAYS_INLINE id</div><div class=\"line\">_class_createInstanceFromZone(Class <span class=\"keyword\">cls</span>, size_t extraBytes, void *zone,</div><div class=\"line\">                              int construct_flags = OBJECT_CONSTRUCT_NONE,</div><div class=\"line\">                              <span class=\"keyword\">bool</span> cxxConstruct = true,</div><div class=\"line\">                              size_t *outAllocatedSize = nil)</div><div class=\"line\">&#123;</div><div class=\"line\">    ASSERT(<span class=\"keyword\">cls</span>-&gt;isRealized());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read class's info bits all at once for performance</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxCtor = cxxConstruct &amp;&amp; <span class=\"keyword\">cls</span>-&gt;hasCxxCtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxDtor = <span class=\"keyword\">cls</span>-&gt;hasCxxDtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> fast = <span class=\"keyword\">cls</span>-&gt;canAllocNonpointer();</div><div class=\"line\">    size_t size;</div><div class=\"line\"></div><div class=\"line\">    size = <span class=\"keyword\">cls</span>-&gt;instanceSize(extraBytes); <span class=\"comment\">//分配空间</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (outAllocatedSize) *outAllocatedSize = size;</div><div class=\"line\"></div><div class=\"line\">    id obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (zone) &#123;</div><div class=\"line\">        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, <span class=\"number\">1</span>, size);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = (id)calloc(<span class=\"number\">1</span>, size); <span class=\"comment\">//c语言分配内存的函数，需要分配的内存大小：size</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!zone &amp;&amp; fast) &#123;</div><div class=\"line\">        obj-&gt;initInstanceIsa(<span class=\"keyword\">cls</span>, hasCxxDtor);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Use raw pointer isa on the assumption that they might be</span></div><div class=\"line\">        <span class=\"comment\">// doing something weird with the zone or RR.</span></div><div class=\"line\">        obj-&gt;initIsa(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!hasCxxCtor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;</div><div class=\"line\">    <span class=\"keyword\">return</span> object_cxxConstructFromClass(obj, <span class=\"keyword\">cls</span>, construct_flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，代码最终是调用 obj = (id)calloc(1, size); 创建的实列对象。而 size = cls-&gt;instanceSize(extraBytes); 是根据成员变量大小计算出来的需要开辟的内存大小。instanceSize(extraBytes) 的参数 extraBytes 来自 _objc_rootAllocWithZone，_objc_rootAllocWithZone 传入的 extraBytes = 0：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">_objc_rootAllocWithZone(Class <span class=\"keyword\">cls</span>, malloc_zone_t *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!zone)) &#123;</div><div class=\"line\">        obj = class_createInstance(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = class_createInstanceFromZone(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>, zone);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) obj = _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>排查完 instanceSize(extraBytes) 后，可以确定 class_getInstanceSize() 与 malloc_size() 获取到的内存大小不同的原因来自 calloc。</p>\n<h1 id=\"窥视-calloc\"><a href=\"#窥视-calloc\" class=\"headerlink\" title=\"窥视 calloc\"></a>窥视 calloc</h1><p>calloc 是 c 语言的标准库，需要下载 <a href=\"https://opensource.apple.com/tarballs/libmalloc/\" target=\"_blank\" rel=\"external\">libmalloc</a>（libmalloc-283 文件里没有 malloc.c 文件了，这里下的是 libmalloc-166.200.60.tar.gz）。</p>\n<p>打开 libmalloc 项目找到 malloc.c 文件，再找到 calloc 方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> *</div><div class=\"line\"><span class=\"built_in\">calloc</span>(<span class=\"keyword\">size_t</span> num_items, <span class=\"keyword\">size_t</span> size)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span> *retval;</div><div class=\"line\">\tretval = malloc_zone_calloc(default_zone, num_items, size);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (retval == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\terrno = ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> retval;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; malloc_zone_calloc<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *</div><div class=\"line\">malloc_zone_calloc(<span class=\"name\">malloc_zone_t</span> *zone, size_t num_items, size_t size)</div><div class=\"line\">&#123;</div><div class=\"line\">\tvoid *ptr<span class=\"comment\">;</span></div><div class=\"line\">\tsize_t alloc_size<span class=\"comment\">;</span></div><div class=\"line\">\tif (<span class=\"name\">malloc_check_start</span> <span class=\"symbol\">&amp;&amp;</span> (<span class=\"name\">malloc_check_counter++</span> &gt;= malloc_check_start)) &#123;</div><div class=\"line\">\t\tinternal_check()<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (<span class=\"name\">os_mul_overflow</span>(<span class=\"name\">num_items</span>, size, <span class=\"symbol\">&amp;alloc_size</span>) || alloc_size &gt; MALLOC_ABSOLUTE_MAX_SIZE)&#123;</div><div class=\"line\">\t\terrno = ENOMEM<span class=\"comment\">;</span></div><div class=\"line\">\t\treturn NULL<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tptr = zone-&gt;calloc(<span class=\"name\">zone</span>, num_items, size)<span class=\"comment\">;</span></div><div class=\"line\">\t</div><div class=\"line\">\tif (<span class=\"name\">malloc_logger</span>) &#123;</div><div class=\"line\">\t\tmalloc_logger(<span class=\"name\">MALLOC_LOG_TYPE_ALLOCATE</span> | MALLOC_LOG_TYPE_HAS_ZONE | MALLOC_LOG_TYPE_CLEARED, (<span class=\"name\">uintptr_t</span>)zone,</div><div class=\"line\">\t\t\t\t(<span class=\"name\">uintptr_t</span>)(<span class=\"name\">num_items</span> * size), 0, (uintptr_t)ptr, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn ptr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>malloc_zone_calloc 中就是系统分配内存的具体实现。另外，在系统分配内存时有一个 NANO_MAX_SIZE：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NANO_MAX_SIZE\t\t\t256 <span class=\"comment\">/* Buckets sized &#123;16, 32, 48, 64, 80, 96, 112, ...&#125; */</span></span></div></pre></td></tr></table></figure></p>\n<p>Buckets sized：iOS 堆空间里内存分为一块一块的内存空间，大小都是16的倍数，最大的内存空间块是256。</p>\n<p>malloc_zone_calloc 这里也存在内存对齐原则。前面在生成结构体的时候提到过，根据内存对齐原则，结构体的大小必须是最大成员大小的倍数。而在这里，系统在分配内存时，分配的内存必须是16的倍数。因为 ios 系统为了提升内存分配的速度，固定了需要分配的内存空间块（Buckets sized）。在需要分配内存的时候，会找到最合适的内存空间块们来分配给实例对象。</p>\n<h2 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>创建一个实例对象，至少需要多少内存?</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\">class_getInstanceSize([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个实例对象，实际上分配了多少内存？</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;malloc/malloc.h&gt;</span></span></div><div class=\"line\">malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)obj);</div></pre></td></tr></table></figure>\n</li>\n<li><p>sizeof() 是运算符，计算类型的大小，是在编译的时候就确定的。</p>\n</li>\n<li><p>内存对齐原则，结构体的大小必须是最大成员大小的倍数，系统分配内存的大小必须是固定的大小（16的倍数）。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>Objective-C 代码的底层实现其实是 C\\C++ 代码</li>\n<li>Objective-C 的面向对象是基于 C\\C++ 的数据结构(结构体)实现的</li>\n</ul>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png\" alt=\"ObjectiveC_C_C++_汇编语言_机器语言\"></p>","more":"<h1 id=\"Objective-C的本质\"><a href=\"#Objective-C的本质\" class=\"headerlink\" title=\"Objective-C的本质\"></a>Objective-C的本质</h1><h2 id=\"将-Objective-C-代码转换为-C-C-代码\"><a href=\"#将-Objective-C-代码转换为-C-C-代码\" class=\"headerlink\" title=\"将 Objective-C 代码转换为 C\\C++ 代码\"></a>将 Objective-C 代码转换为 C\\C++ 代码</h2><h3 id=\"创建一个项目\"><a href=\"#创建一个项目\" class=\"headerlink\" title=\"创建一个项目\"></a>创建一个项目</h3><p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质.png\" alt=\"OC对象的本质\"></p>\n<p>在终端打开 main.m 的位置，输入下面的命令生成 main.cpp 文件。因为要生成的代码包括c/c++，所以使用 main.cpp 文件，main.cpp 文件是 c++ 文件，支持 c/c++。</p>\n<h3 id=\"生成-main-cpp\"><a href=\"#生成-main-cpp\" class=\"headerlink\" title=\"生成 main.cpp\"></a>生成 main.cpp</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> clang -rewrite-objc main.m -o main.cpp</span></div></pre></td></tr></table></figure>\n<p>没有指定平台，默认生成的是多个平台的代码，代码量太大。</p>\n<h3 id=\"指定生成-iphoneos-平台、arm64-架构的-main-cpp\"><a href=\"#指定生成-iphoneos-平台、arm64-架构的-main-cpp\" class=\"headerlink\" title=\"指定生成 iphoneos 平台、arm64 架构的 main.cpp\"></a>指定生成 iphoneos 平台、arm64 架构的 main.cpp</h3><p>指定平台，不同平台支持的代码不一样，如 Windows、mac、iOS。<br>指定框架，不同框架支持的代码也不一样，模拟器(i386)、32bit(armv7)、64bit（arm64）。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp</span></div></pre></td></tr></table></figure></p>\n<p>xcrun -sdk iphoneos：指定 iphoneos。<br>-arch arm64：指定 arm64 架构。</p>\n<p>报错：xcrun: error: SDK “iphoneos” cannot be located<br>解决1：给Xcode命令行工具指定路径↓<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo xcode-select --<span class=\"keyword\">switch</span> <span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>（如果需要链接其他框架，使用-framework参数。比如-framework UIKit。(未验证)）<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main<span class=\"selector-class\">.m</span> -o main-arm64<span class=\"selector-class\">.cpp</span> -framework UIKit</div></pre></td></tr></table></figure></p>\n<h3 id=\"取消-Xcode-对-main-arm64-cpp-的文件编译\"><a href=\"#取消-Xcode-对-main-arm64-cpp-的文件编译\" class=\"headerlink\" title=\"取消 Xcode 对 main-arm64.cpp 的文件编译\"></a>取消 Xcode 对 main-arm64.cpp 的文件编译</h3><p>生成的 main-arm64.cpp 文件添加到项目后，运行会报错。main-arm64.cpp 是临时生成的，内部有一个 main 函数，没做适配。 </p>\n<p>解决：删除 Build Phases -&gt; Compile Sources -&gt; main-arm64.cpp<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/取消编译main_arm64_cpp.png\" alt=\"main-arm64\"></p>\n<h1 id=\"NSObject-的底层实现\"><a href=\"#NSObject-的底层实现\" class=\"headerlink\" title=\"NSObject 的底层实现\"></a>NSObject 的底层实现</h1><ul>\n<li>思考：一个OC对象在内存中是如何布局的？</li>\n</ul>\n<h2 id=\"NSObject-在-OC-中的定义：\"><a href=\"#NSObject-在-OC-中的定义：\" class=\"headerlink\" title=\"NSObject 在 OC 中的定义：\"></a>NSObject 在 OC 中的定义：</h2><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSObject</span>&gt; &#123;</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>  <span class=\"title\">OBJC_ISA_AVAILABILITY</span>;</span></div><div class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//简化后：</div><div class=\"line\">@<span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NSObject</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在-c-中的定义：\"><a href=\"#在-c-中的定义：\" class=\"headerlink\" title=\"在 c++ 中的定义：\"></a>在 c++ 中的定义：</h2><figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> </span>&#123;</div><div class=\"line\">    Class isa; <span class=\"comment\">// 8个字节</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Class 是指向结构体的指针：typedef struct objc_class *Class。IMPL 是 implementation 的简写。结构体中只有一个成员变量，所以这个结构体在内存中占用的大小就是指针 isa 的大小。</p>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质02.png\" alt=\"OC对象的本质02\"></p>\n<h2 id=\"打印-NSObject-实例对象的成员变量所占用的大小-gt-gt-8\"><a href=\"#打印-NSObject-实例对象的成员变量所占用的大小-gt-gt-8\" class=\"headerlink\" title=\"打印 NSObject 实例对象的成员变量所占用的大小 &gt;&gt; 8\"></a>打印 NSObject 实例对象的成员变量所占用的大小 &gt;&gt; 8</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.导入头文件</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.打印，结果 8</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zd\"</span>, class_getInstanceSize([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]));</div></pre></td></tr></table></figure>\n<h2 id=\"打印-obj-指针所指向内存的大小-gt-gt-16\"><a href=\"#打印-obj-指针所指向内存的大小-gt-gt-16\" class=\"headerlink\" title=\"打印 obj 指针所指向内存的大小 &gt;&gt; 16\"></a>打印 obj 指针所指向内存的大小 &gt;&gt; 16</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.导入头文件</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;malloc/malloc.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.打印，结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)obj));</div></pre></td></tr></table></figure>\n<p>__bridge 可以实现 Objective-C 与 C 语言变量 和 Objective-C 与 Core Foundation 对象之间的互相转换。  </p>\n<h2 id=\"窥视-class-getInstanceSize\"><a href=\"#窥视-class-getInstanceSize\" class=\"headerlink\" title=\"窥视 class_getInstanceSize\"></a>窥视 class_getInstanceSize</h2><p>下载 runtime 源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a>。<br>打开源码搜索 class_getInstanceSize，找到 objc-class.mm 文件中 class_getInstanceSize 的实现代码。<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t class_getInstanceSize(Class <span class=\"keyword\">cls</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">cls</span>-&gt;alignedInstanceSize();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; alignedInstanceSize：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Class's ivar size rounded up to a pointer-size boundary.</span></div><div class=\"line\"><span class=\"keyword\">uint32_t</span> alignedInstanceSize() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>翻译过来就是，class_getInstanceSize 内部根据成员变量的大小，根据内存对齐原则得到 NSObject 实例对象里成员变量所占用的内存大小。</p>\n<h2 id=\"窥视-alloc\"><a href=\"#窥视-alloc\" class=\"headerlink\" title=\"窥视 alloc\"></a>窥视 alloc</h2><p>alloc 的内部实现是 allocWithZone，在源码中搜索 allocWithZone：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">_objc_rootAllocWithZone(Class <span class=\"keyword\">cls</span>, malloc_zone_t *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!zone)) &#123;</div><div class=\"line\">        obj = class_createInstance(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>); <span class=\"comment\">//额外空间0</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = class_createInstanceFromZone(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>, zone);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) obj = _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; class_createInstance：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">class_createInstance(Class <span class=\"keyword\">cls</span>, size_t extraBytes)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">cls</span>) <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    <span class=\"keyword\">return</span> _class_createInstanceFromZone(<span class=\"keyword\">cls</span>, extraBytes, nil);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; _class_createInstanceFromZone：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 cls 的实例对象</span></div><div class=\"line\">static ALWAYS_INLINE id</div><div class=\"line\">_class_createInstanceFromZone(Class <span class=\"keyword\">cls</span>, size_t extraBytes, void *zone,</div><div class=\"line\">                              int construct_flags = OBJECT_CONSTRUCT_NONE,</div><div class=\"line\">                              <span class=\"keyword\">bool</span> cxxConstruct = true,</div><div class=\"line\">                              size_t *outAllocatedSize = nil)</div><div class=\"line\">&#123;</div><div class=\"line\">    ASSERT(<span class=\"keyword\">cls</span>-&gt;isRealized());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read class's info bits all at once for performance</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxCtor = cxxConstruct &amp;&amp; <span class=\"keyword\">cls</span>-&gt;hasCxxCtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxDtor = <span class=\"keyword\">cls</span>-&gt;hasCxxDtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> fast = <span class=\"keyword\">cls</span>-&gt;canAllocNonpointer();</div><div class=\"line\">    size_t size;</div><div class=\"line\"></div><div class=\"line\">    size = <span class=\"keyword\">cls</span>-&gt;instanceSize(extraBytes); <span class=\"comment\">//分配空间</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (outAllocatedSize) *outAllocatedSize = size;</div><div class=\"line\"></div><div class=\"line\">    id obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (zone) &#123;</div><div class=\"line\">        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, <span class=\"number\">1</span>, size);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = (id)calloc(<span class=\"number\">1</span>, size); <span class=\"comment\">//c语言分配内存的函数，分配空间：size</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!zone &amp;&amp; fast) &#123;</div><div class=\"line\">        obj-&gt;initInstanceIsa(<span class=\"keyword\">cls</span>, hasCxxDtor);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Use raw pointer isa on the assumption that they might be</span></div><div class=\"line\">        <span class=\"comment\">// doing something weird with the zone or RR.</span></div><div class=\"line\">        obj-&gt;initIsa(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!hasCxxCtor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;</div><div class=\"line\">    <span class=\"keyword\">return</span> object_cxxConstructFromClass(obj, <span class=\"keyword\">cls</span>, construct_flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; instanceSize：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t instanceSize(size_t extraBytes) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span> (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> cache.fastInstanceSize(extraBytes);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    size_t <span class=\"built_in\">size</span> = alignedInstanceSize() + extraBytes;</div><div class=\"line\">    <span class=\"comment\">// CF requires all objects be at least 16 bytes.</span></div><div class=\"line\">    <span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &lt; <span class=\"number\">16</span>) <span class=\"built_in\">size</span> = <span class=\"number\">16</span>;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">size</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，创建的实例对象的大小至少16个字节。CoreFoundation 框架内部就是这么硬性规定的。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSObject *obj = <span class=\"comment\">[<span class=\"comment\">[NSObject alloc]</span> init]</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>上面👆这句代码实际上是在内存中生成了一个 c 语言定义的结构体，结构体内有一个类型为 Class 的 isa 指针，结构体的大小 8 个字节。Class 是一个指向结构体的指针。</p>\n</li>\n<li><p>一个NSObject对象占用多少内存？<br>alloc 方法让系统分配了16个字节给 NSObject 对象（可以通过 malloc_size 函数获取）。<br>NSObject 对象内部只有一个成员变量，即指针 isa，所以只使用了8个字节的空间（64bit环境下，可以通过 class_getInstanceSize 函数获得）。</p>\n</li>\n<li><p>创建的实例对象的大小至少16个字节.</p>\n</li>\n</ul>\n<h1 id=\"查看实例变量的内存的方法\"><a href=\"#查看实例变量的内存的方法\" class=\"headerlink\" title=\"查看实例变量的内存的方法\"></a>查看实例变量的内存的方法</h1><h2 id=\"通过-Xcode-工具查看对象内存。\"><a href=\"#通过-Xcode-工具查看对象内存。\" class=\"headerlink\" title=\"通过 Xcode 工具查看对象内存。\"></a>通过 Xcode 工具查看对象内存。</h2><p>打开 Debug -&gt; Debug Workflow -&gt; View Memory，在 Address 输入对象的地址。<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质03.png\" alt=\"OC对象的本质03\"></p>\n<h2 id=\"常用LLDB指令\"><a href=\"#常用LLDB指令\" class=\"headerlink\" title=\"常用LLDB指令\"></a>常用LLDB指令</h2><h3 id=\"print、p：打印\"><a href=\"#print、p：打印\" class=\"headerlink\" title=\"print、p：打印\"></a>print、p：打印</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) print obj</div><div class=\"line\">(NSObject *) $<span class=\"number\">0</span> = <span class=\"number\">0x000000010380ef00</span></div><div class=\"line\">(lldb) p obj</div><div class=\"line\">(NSObject *) $<span class=\"number\">1</span> = <span class=\"number\">0x000000010380ef00</span></div></pre></td></tr></table></figure>\n<h3 id=\"po：打印对象\"><a href=\"#po：打印对象\" class=\"headerlink\" title=\"po：打印对象\"></a>po：打印对象</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) <span class=\"keyword\">po</span> obj</div><div class=\"line\">&lt;NSObjec<span class=\"variable\">t:</span> <span class=\"number\">0</span>x10380ef00&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>x是16进制，f是浮点，d是10进制</p>\n<h3 id=\"字节大小\"><a href=\"#字节大小\" class=\"headerlink\" title=\"字节大小\"></a>字节大小</h3><p>b：byte 1字节，h：half word 2字节<br>w：word 4字节，g：giant word 8字节</p>\n<h3 id=\"读取内存\"><a href=\"#读取内存\" class=\"headerlink\" title=\"读取内存\"></a>读取内存</h3><p>memory read/数量格式字节数  内存地址<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) memory read <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div></pre></td></tr></table></figure></p>\n<p>x/数量格式字节数  内存地址<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> 8b 9a ff ff <span class=\"number\">1d</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb) x/3xg <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x001dffff9a8b8141</span> <span class=\"number\">0x0000000000000000</span></div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: <span class=\"number\">0x000000010380efe0</span></div><div class=\"line\">(lldb) x/4xg <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x001dffff9a8b8141</span> <span class=\"number\">0x0000000000000000</span></div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: <span class=\"number\">0x000000010380efe0</span> <span class=\"number\">0x000000010380f220</span></div><div class=\"line\">(lldb) x/4xw <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">0x9a8b8141</span> <span class=\"number\">0x001dffff</span> <span class=\"number\">0x00000000</span> <span class=\"number\">0x00000000</span></div><div class=\"line\">(lldb) x/4<span class=\"built_in\">dw</span> <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: -<span class=\"number\">1702133439</span></div><div class=\"line\"><span class=\"number\">0x10380ef04</span>: <span class=\"number\">1966079</span></div><div class=\"line\"><span class=\"number\">0x10380ef08</span>: <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">0x10380ef0c</span>: <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>打印结果中， x/3xg 0x10380ef00 打印的 0x001dffff9a8b8141 0x0000000000000000 部分是属于 obj 的内存。x/4xw 0x10380ef00 打印的 0x10380ef00: 0x9a8b8141 0x001dffff 0x00000000 0x00000000 部分属于 obj 的内存。</p>\n<h3 id=\"修改内存中的值\"><a href=\"#修改内存中的值\" class=\"headerlink\" title=\"修改内存中的值\"></a>修改内存中的值</h3><p>memory  write  内存地址  数值<br>将内存中的第6个字节改成06：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po obj</div><div class=\"line\">&lt;NSObject: <span class=\"number\">0x10380ef00</span>&gt;</div><div class=\"line\"></div><div class=\"line\">(lldb) memory read <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb) memory write <span class=\"number\">0x10380ef06</span> <span class=\"number\">6</span></div><div class=\"line\">(lldb) x <span class=\"number\">0x10380ef00</span></div><div class=\"line\"><span class=\"number\">0x10380ef00</span>: <span class=\"number\">41</span> <span class=\"number\">81</span> <span class=\"number\">8</span>b <span class=\"number\">9</span>a ff ff <span class=\"number\">06</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  A...............</div><div class=\"line\"><span class=\"number\">0x10380ef10</span>: e0 ef <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">20</span> f2 <span class=\"number\">80</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ........ .......</div><div class=\"line\">(lldb)</div></pre></td></tr></table></figure></p>\n<p>po obj 获取到对象地址 0x10380ef00，所以第6个字节的地址就是 0x10380ef06。通过 memory write 0x10380ef06 6，将 0x10380ef06 处的字节改为 6。上面👆 x 0x10380ef00 打印出的结果中可以看到，第 6 个字节成功被修改为 06。</p>\n<h1 id=\"Student-的本质\"><a href=\"#Student-的本质\" class=\"headerlink\" title=\"Student 的本质\"></a>Student 的本质</h1><p>定义一个继承 NSObject 的类 Student：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>创建一个 Student 的实例对象：<br><figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student *stu = <span class=\"comment\">[<span class=\"comment\">[Student alloc]</span> init]</span>;</div></pre></td></tr></table></figure></p>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Student 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>因为 NSObject_IMPL 内部只有一个成员变量指针 isa，所以上面👆的代码可以写成：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Student_IMPL &#123;</div><div class=\"line\">    Class isa<span class=\"comment\">;</span></div><div class=\"line\">    int _no<span class=\"comment\">;</span></div><div class=\"line\">    int _age<span class=\"comment\">;</span></div><div class=\"line\">&#125;<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶03.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>结构体 Student_IMPL 的成员变量大小是16字节。<br>isa（8字节）+ _no（4字节）+ _age（4字节）= Student_IMPL（16字节）。  </p>\n<p>根据地址也可以看出成员变量的大小：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶01.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>如图，指针 stu 指向的地址就是 isa 指向的地址（参考理解：数组首元素的地址就是数组的地址）。指针 isa 8字节，所以 _no 的地址在 isa 的地址基础上加8个字节。_no 是 Int 类型4字节，所以 _age 的地址在 _no 地址的基础上加4个字节。实例变量内部的成员变量的地址，在堆中依次往后加。</p>\n<p>打开内存图：<br>Debug -&gt; Debug Workflow -&gt; View Memory<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶02.png\" alt=\"OC对象的本质进阶01\"><br>因为 iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。_no 是 0x00000004，_age 是 0x00000005：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x/<span class=\"number\">4</span>xw <span class=\"number\">0</span>x<span class=\"number\">103a085d0</span></div><div class=\"line\"><span class=\"number\">0</span>x<span class=\"number\">103a085d0</span>: <span class=\"number\">0</span>x<span class=\"number\">000011c9</span> <span class=\"number\">0</span>x<span class=\"number\">001d8001</span> <span class=\"number\">0x00000004</span> <span class=\"number\">0x00000005</span></div></pre></td></tr></table></figure></p>\n<p>通过修改内存中的值的方式来修改 _no：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) x <span class=\"number\">0x103a085d0</span></div><div class=\"line\"><span class=\"number\">0x103a085d0</span>: c9 <span class=\"number\">11</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">80</span> <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">04</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\"><span class=\"number\">0x103a085e0</span>: b0 <span class=\"number\">86</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> f0 <span class=\"number\">88</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\">(lldb) memory write <span class=\"number\">0x103a085d8</span> <span class=\"number\">9</span></div><div class=\"line\">(lldb) x <span class=\"number\">0x103a085d0</span></div><div class=\"line\"><span class=\"number\">0x103a085d0</span>: c9 <span class=\"number\">11</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">80</span> <span class=\"number\">1</span>d <span class=\"number\">00</span> <span class=\"number\">09</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\"><span class=\"number\">0x103a085e0</span>: b0 <span class=\"number\">86</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> f0 <span class=\"number\">88</span> a0 <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</div><div class=\"line\">(lldb) p stu-&gt;_no</div><div class=\"line\">(int) $<span class=\"number\">3</span> = <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>上面👆通过 memory write 将实例对象的第8个字节 04 给为 09，打印 _no = 9。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>iOS 平台是小端模式，所以从内存中读取数据的方式是从高地址开始读取。</p>\n</li>\n<li><p>使用 memory write，可以通过修改内存中的值的方式来修改成员变量的值。</p>\n</li>\n</ul>\n<h1 id=\"更复杂的继承关系\"><a href=\"#更复杂的继承关系\" class=\"headerlink\" title=\"更复杂的继承关系\"></a>更复杂的继承关系</h1><h2 id=\"定义-Person、Student\"><a href=\"#定义-Person、Student\" class=\"headerlink\" title=\"定义 Person、Student\"></a>定义 Person、Student</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Student </span>: Person</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">int</span> <span class=\"selector-tag\">_no</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div><div class=\"line\"></div><div class=\"line\">@<span class=\"selector-tag\">implementation</span> <span class=\"selector-tag\">Student</span></div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person、Student 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16 内存对齐：结构体的大小必须是最大成员大小的倍数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> <span class=\"title\">Person_IVARS</span>;</span> <span class=\"comment\">// 16</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no; <span class=\"comment\">// 4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>继承关系图解：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶04.png\" alt=\"OC对象的本质进阶01\">  </p>\n<h2 id=\"Person、Student-的内存大小\"><a href=\"#Person、Student-的内存大小\" class=\"headerlink\" title=\"Person、Student 的内存大小\"></a>Person、Student 的内存大小</h2><p>打印 Person、Student 实例变量的大小：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Student *stu = [[Student alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"stu - %zd\"</span>, class_getInstanceSize([Student <span class=\"keyword\">class</span>])); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"stu - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)stu)); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"></div><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, class_getInstanceSize([Person <span class=\"keyword\">class</span>])); <span class=\"comment\">//打印结果 16</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)person)); <span class=\"comment\">//打印结果 16</span></div></pre></td></tr></table></figure></p>\n<p>虽然 Student 比 Person 多了一个成员变量 _no（4字节），但是 Student 和 Person 打印出来的内存大小都是16字节。</p>\n<p>Person、Student 的内存分配图解：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶05.png\" alt=\"OC对象的本质进阶01\">  </p>\n<p>Person 的成员变量的内存之和是12个字节，根据内存对齐的规则，Person 的内存大小必须是内存最大的成员变量 isa（8字节）的倍数，所以分配了16字节的内存给 Person。Student 的成员变量之和是20字节，但是 Person 中有多余的4字节，所以成员变量 _no 的内存被放到了 Person 多余的内存空间里，最终分配给 Student 的内存大小为16字节。  </p>\n<h2 id=\"property-定义属性的内存分配\"><a href=\"#property-定义属性的内存分配\" class=\"headerlink\" title=\"@property 定义属性的内存分配\"></a>@property 定义属性的内存分配</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@property</span> (nonatomic, assign) int height;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _height; <span class=\"comment\">//4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>内存对齐原则：结构体的大小必须是最大成员大小的倍数。</p>\n</li>\n<li><p>子类在分配内存时，如果父类的内存空间有剩余，优先使用父类的内存空间。</p>\n</li>\n<li><p>创建出来的实列对象的内存中只存有成员变量，不包含方法。以 Person 为例，不同的 Person 实例对象的方法是相同的，所以方法放到类对象的方法列表里，供不同的 Person 实例对象调用。</p>\n</li>\n</ul>\n<h1 id=\"窥视-alignedInstanceSize\"><a href=\"#窥视-alignedInstanceSize\" class=\"headerlink\" title=\"窥视 alignedInstanceSize\"></a>窥视 alignedInstanceSize</h1><p>class_getInstanceSize 获取内存大小调用的是 alignedInstanceSize：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Class's ivar size rounded up to a pointer-size boundary.</span></div><div class=\"line\"><span class=\"keyword\">uint32_t</span> alignedInstanceSize() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>align：对齐。word_align(unalignedInstanceSize())：传入一个未对齐（unaligned）的内存，word_align 将其对齐后返回。</p>\n<h1 id=\"Person-对象的内存分配\"><a href=\"#Person-对象的内存分配\" class=\"headerlink\" title=\"Person 对象的内存分配\"></a>Person 对象的内存分配</h1><h2 id=\"定义-Person\"><a href=\"#定义-Person\" class=\"headerlink\" title=\"定义 Person\"></a>定义 Person</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">    <span class=\"keyword\">int</span> _height;</div><div class=\"line\">    <span class=\"keyword\">int</span> _no;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>将 OC 代码转换为 C\\C++ 代码，并在生成的 C/C++ 代码中找到 Person 的实现：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person_IMPL</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NSObject_IMPL</span> <span class=\"title\">NSObject_IVARS</span>;</span> <span class=\"comment\">// 8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age; <span class=\"comment\">// 4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _height; <span class=\"comment\">//4</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _no; <span class=\"comment\">//4</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 24</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建-Person-实例变量，打印内存大小：\"><a href=\"#创建-Person-实例变量，打印内存大小：\" class=\"headerlink\" title=\"创建 Person 实例变量，打印内存大小：\"></a>创建 Person 实例变量，打印内存大小：</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> Person_IMPL)); <span class=\"comment\">//24</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, class_getInstanceSize([Person <span class=\"keyword\">class</span>])); <span class=\"comment\">//24</span></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person - %zd\"</span>, malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)person)); <span class=\"comment\">//32</span></div></pre></td></tr></table></figure>\n<p>Person 内的成员变量的从内存图中可以确认，Person 分配的内存是32：<br><img src=\"/2020/05/06/OC底层/原理/OC对象的本质/OC对象的本质进阶06.png\" alt=\"OC对象的本质进阶01\"> </p>\n<h2 id=\"窥视-class-createInstanceFromZone\"><a href=\"#窥视-class-createInstanceFromZone\" class=\"headerlink\" title=\"窥视 _class_createInstanceFromZone\"></a>窥视 _class_createInstanceFromZone</h2><p>alloc -&gt; allocWithZoone -&gt; _objc_rootAllocWithZone -&gt; class_createInstance -&gt; _class_createInstanceFromZone</p>\n<p>_class_createInstanceFromZone 实现：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 cls 的实例对象</span></div><div class=\"line\">static ALWAYS_INLINE id</div><div class=\"line\">_class_createInstanceFromZone(Class <span class=\"keyword\">cls</span>, size_t extraBytes, void *zone,</div><div class=\"line\">                              int construct_flags = OBJECT_CONSTRUCT_NONE,</div><div class=\"line\">                              <span class=\"keyword\">bool</span> cxxConstruct = true,</div><div class=\"line\">                              size_t *outAllocatedSize = nil)</div><div class=\"line\">&#123;</div><div class=\"line\">    ASSERT(<span class=\"keyword\">cls</span>-&gt;isRealized());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read class's info bits all at once for performance</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxCtor = cxxConstruct &amp;&amp; <span class=\"keyword\">cls</span>-&gt;hasCxxCtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> hasCxxDtor = <span class=\"keyword\">cls</span>-&gt;hasCxxDtor();</div><div class=\"line\">    <span class=\"keyword\">bool</span> fast = <span class=\"keyword\">cls</span>-&gt;canAllocNonpointer();</div><div class=\"line\">    size_t size;</div><div class=\"line\"></div><div class=\"line\">    size = <span class=\"keyword\">cls</span>-&gt;instanceSize(extraBytes); <span class=\"comment\">//分配空间</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (outAllocatedSize) *outAllocatedSize = size;</div><div class=\"line\"></div><div class=\"line\">    id obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (zone) &#123;</div><div class=\"line\">        obj = (id)malloc_zone_calloc((malloc_zone_t *)zone, <span class=\"number\">1</span>, size);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = (id)calloc(<span class=\"number\">1</span>, size); <span class=\"comment\">//c语言分配内存的函数，需要分配的内存大小：size</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!zone &amp;&amp; fast) &#123;</div><div class=\"line\">        obj-&gt;initInstanceIsa(<span class=\"keyword\">cls</span>, hasCxxDtor);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Use raw pointer isa on the assumption that they might be</span></div><div class=\"line\">        <span class=\"comment\">// doing something weird with the zone or RR.</span></div><div class=\"line\">        obj-&gt;initIsa(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!hasCxxCtor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;</div><div class=\"line\">    <span class=\"keyword\">return</span> object_cxxConstructFromClass(obj, <span class=\"keyword\">cls</span>, construct_flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，代码最终是调用 obj = (id)calloc(1, size); 创建的实列对象。而 size = cls-&gt;instanceSize(extraBytes); 是根据成员变量大小计算出来的需要开辟的内存大小。instanceSize(extraBytes) 的参数 extraBytes 来自 _objc_rootAllocWithZone，_objc_rootAllocWithZone 传入的 extraBytes = 0：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">id</div><div class=\"line\">_objc_rootAllocWithZone(Class <span class=\"keyword\">cls</span>, malloc_zone_t *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!zone)) &#123;</div><div class=\"line\">        obj = class_createInstance(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        obj = class_createInstanceFromZone(<span class=\"keyword\">cls</span>, <span class=\"number\">0</span>, zone);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (slowpath(!obj)) obj = _objc_callBadAllocHandler(<span class=\"keyword\">cls</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>排查完 instanceSize(extraBytes) 后，可以确定 class_getInstanceSize() 与 malloc_size() 获取到的内存大小不同的原因来自 calloc。</p>\n<h1 id=\"窥视-calloc\"><a href=\"#窥视-calloc\" class=\"headerlink\" title=\"窥视 calloc\"></a>窥视 calloc</h1><p>calloc 是 c 语言的标准库，需要下载 <a href=\"https://opensource.apple.com/tarballs/libmalloc/\" target=\"_blank\" rel=\"external\">libmalloc</a>（libmalloc-283 文件里没有 malloc.c 文件了，这里下的是 libmalloc-166.200.60.tar.gz）。</p>\n<p>打开 libmalloc 项目找到 malloc.c 文件，再找到 calloc 方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> *</div><div class=\"line\"><span class=\"built_in\">calloc</span>(<span class=\"keyword\">size_t</span> num_items, <span class=\"keyword\">size_t</span> size)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">void</span> *retval;</div><div class=\"line\">\tretval = malloc_zone_calloc(default_zone, num_items, size);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (retval == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\terrno = ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> retval;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Jump to Definition -&gt; malloc_zone_calloc<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *</div><div class=\"line\">malloc_zone_calloc(<span class=\"name\">malloc_zone_t</span> *zone, size_t num_items, size_t size)</div><div class=\"line\">&#123;</div><div class=\"line\">\tvoid *ptr<span class=\"comment\">;</span></div><div class=\"line\">\tsize_t alloc_size<span class=\"comment\">;</span></div><div class=\"line\">\tif (<span class=\"name\">malloc_check_start</span> <span class=\"symbol\">&amp;&amp;</span> (<span class=\"name\">malloc_check_counter++</span> &gt;= malloc_check_start)) &#123;</div><div class=\"line\">\t\tinternal_check()<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (<span class=\"name\">os_mul_overflow</span>(<span class=\"name\">num_items</span>, size, <span class=\"symbol\">&amp;alloc_size</span>) || alloc_size &gt; MALLOC_ABSOLUTE_MAX_SIZE)&#123;</div><div class=\"line\">\t\terrno = ENOMEM<span class=\"comment\">;</span></div><div class=\"line\">\t\treturn NULL<span class=\"comment\">;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tptr = zone-&gt;calloc(<span class=\"name\">zone</span>, num_items, size)<span class=\"comment\">;</span></div><div class=\"line\">\t</div><div class=\"line\">\tif (<span class=\"name\">malloc_logger</span>) &#123;</div><div class=\"line\">\t\tmalloc_logger(<span class=\"name\">MALLOC_LOG_TYPE_ALLOCATE</span> | MALLOC_LOG_TYPE_HAS_ZONE | MALLOC_LOG_TYPE_CLEARED, (<span class=\"name\">uintptr_t</span>)zone,</div><div class=\"line\">\t\t\t\t(<span class=\"name\">uintptr_t</span>)(<span class=\"name\">num_items</span> * size), 0, (uintptr_t)ptr, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn ptr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>malloc_zone_calloc 中就是系统分配内存的具体实现。另外，在系统分配内存时有一个 NANO_MAX_SIZE：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NANO_MAX_SIZE\t\t\t256 <span class=\"comment\">/* Buckets sized &#123;16, 32, 48, 64, 80, 96, 112, ...&#125; */</span></span></div></pre></td></tr></table></figure></p>\n<p>Buckets sized：iOS 堆空间里内存分为一块一块的内存空间，大小都是16的倍数，最大的内存空间块是256。</p>\n<p>malloc_zone_calloc 这里也存在内存对齐原则。前面在生成结构体的时候提到过，根据内存对齐原则，结构体的大小必须是最大成员大小的倍数。而在这里，系统在分配内存时，分配的内存必须是16的倍数。因为 ios 系统为了提升内存分配的速度，固定了需要分配的内存空间块（Buckets sized）。在需要分配内存的时候，会找到最合适的内存空间块们来分配给实例对象。</p>\n<h2 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>创建一个实例对象，至少需要多少内存?</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\">class_getInstanceSize([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个实例对象，实际上分配了多少内存？</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;malloc/malloc.h&gt;</span></span></div><div class=\"line\">malloc_size((__bridge <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)obj);</div></pre></td></tr></table></figure>\n</li>\n<li><p>sizeof() 是运算符，计算类型的大小，是在编译的时候就确定的。</p>\n</li>\n<li><p>内存对齐原则，结构体的大小必须是最大成员大小的倍数，系统分配内存的大小必须是固定的大小（16的倍数）。</p>\n</li>\n</ul>"},{"title":"isa和superclass","date":"2020-05-11T06:35:58.000Z","_content":"\n![isa和superclass](isa和superclass/isa和superclass01.png)\n\n<!-- more -->\n\n* instance 的 isa 指向 class\n* class 的 isa 指向 meta-class\n* meta-class 的 isa 指向基类的 meta-class\n* class 的 superclass 指向父类的 class，如果没有父类，superclass 指针为nil\n* meta-class 的 superclass 指向父类的 meta-class，基类的 meta-class 的 superclass 指向基类的 class\n* instance 调用对象方法的轨迹：isa 找到 class，方法不存在，就通过 superclass 找父类\n* class 调用类方法的轨迹：isa 找 meta-class，方法不存在，就通过 superclass 找父类\n\n# isa\n\n* 思考：对象的 isa 指针指向哪里？\n\n## instance 对象、class 对象 和 meta-class 对象之间的 isa 关系\n![isa和superclass](isa和superclass/isa和superclass02.png)\n\n### 定义 Person\n```\n@interface Person : NSObject <NSCopying>\n{\n    @public\n    int _age;\n}\n@property (nonatomic, assign) int no;\n- (void)personInstanceMethod;\n+ (void)personClassMethod;\n@end\n\n@implementation Person\n@end\n```\n\n创建 Person 的实例对象\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n        Person *person = [[Person alloc] init];\n        \n        person->_age = 10;\n\n        [person personInstanceMethod];\n        \n        [Person personClassMethod];\n        \n    }\n    return 0;\n}\n```\n\n### 将 OC 代码转换为 C\\C++ 代码\n找到 main.m 所在文件，在终端输入：\n```\n$ xcrun -sdk iphoneos clang -arch arm64  -rewrite-objc main.m\n```\n\n没有通过 ‘-o’ 生成指定文件时，默认生成 main.cpp 文件，打开 main.cpp 文件。找到 main 函数：\n```\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\n        Person *person = ((Person *(*)(id, SEL))(void *)objc_msgSend)((id)((Person *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"alloc\")), sel_registerName(\"init\"));\n\n        (*(int *)((char *)person + OBJC_IVAR_$_Person$_age)) = 10;\n\n        ((void (*)(id, SEL))(void *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));\n\n        ((void (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n\n    }\n    return 0;\n}\n```\n\n找到 objc_msgSend：\n```\n((void (*)(id, SEL))(void *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));\n\n((void (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n\n//简化后：\nobjc_msgSend(person, sel_registerName(\"personInstanceMethod\"));\n\nobjc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n```\n\n[person personInstanceMethod] 的具体实现是 objc_msgSend(person, sel_registerName(\"personInstanceMethod\"))。  \n即在实例对象 person 调用 -(void)personInstanceMethod 对象方法的时候，向实例对象 person 发送一条 \"personInstanceMethod\" 消息。  \n\n[Person personClassMethod] 的具体实现是 objc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"))。  \n即在类对象 Person 调用 +(void)personClassMethod 类方法的时候，向类对象 Person 发送一条 \"personClassMethod\" 消息。  \n\n### 方法调用与对象的关系\n```\n[person personInstanceMethod];\n[Person personClassMethod];\n```\n\n上面👆两个方法调用表现出来的是，实例对象 person 可以调用存在 Person 类对象里的对象方法， Person 类对象可以调用存储在 Person 元类对象里的类方法。\n\n### 小结\n* instance 对象的 isa 指针指向 class 对象。当调用对象方法时，通过 instance 对象的 isa 指针找到 class 对象，最后找到对象方法的实现进行调用。\n\n* class 对象的 isa 指针指向 meta-class 对象。当调用类方法时，通过 class 对象的 isa 指针找到 meta-class对象，最后找到类方法的实现进行调用。\n\n## ISA_MASK\n\n<!-- ![isa和superclass](isa和superclass/isa和superclass10.png) -->\n\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n        Person *person = [[Person alloc] init];\n        \n        Class personClass = [Person class];\n\n        Class personMetaClass = object_getClass(personClass);\n\n        NSLog(@\"%p %p %p\", person, personClass, personMetaClass);\n    }\n    return 0;\n}\n```\n### 实例对象的 isa 指针\n打印 Person->isa、personClass：\n```\n(lldb) p/x (long)person->isa //指针地址格式设置16进制\n(long) $2 = 0x001d8001000014f1\n(lldb) p/x personClass\n(Class) $3 = 0x00000001000014f0 Person\n```\n\n上面👆的打印结果可以看到，Person 的类对象地址是 0x00000001000014f0，而 Person 的实例对象的 isa 指针的地址是 0x001d8001000014f1。\n\n在 64bit 之前 isa 指针的地址等于被指向对象的地址。从 64bit 开始，isa 需要进行一次位运算，才能计算出真实地址：\n![isa和superclass](isa和superclass/isa和superclass09.png)\n\nISA_MASK 在源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/) 中的定义：\n```\n# if __arm64__\n#   define ISA_MASK        0x0000000ffffffff8ULL\n#   define ISA_MAGIC_MASK  0x000003f000000001ULL\n#   define ISA_MAGIC_VALUE 0x000001a000000001ULL\n#   define ISA_BITFIELD                                                      \\\n      uintptr_t nonpointer        : 1;                                       \\\n      uintptr_t has_assoc         : 1;                                       \\\n      uintptr_t has_cxx_dtor      : 1;                                       \\\n      uintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\\n      uintptr_t magic             : 6;                                       \\\n      uintptr_t weakly_referenced : 1;                                       \\\n      uintptr_t deallocating      : 1;                                       \\\n      uintptr_t has_sidetable_rc  : 1;                                       \\\n      uintptr_t extra_rc          : 19\n#   define RC_ONE   (1ULL<<45)\n#   define RC_HALF  (1ULL<<18)\n\n# elif __x86_64__\n#   define ISA_MASK        0x00007ffffffffff8ULL\n#   define ISA_MAGIC_MASK  0x001f800000000001ULL\n#   define ISA_MAGIC_VALUE 0x001d800000000001ULL\n#   define ISA_BITFIELD                                                        \\\n      uintptr_t nonpointer        : 1;                                         \\\n      uintptr_t has_assoc         : 1;                                         \\\n      uintptr_t has_cxx_dtor      : 1;                                         \\\n      uintptr_t shiftcls          : 44; /*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/ \\\n      uintptr_t magic             : 6;                                         \\\n      uintptr_t weakly_referenced : 1;                                         \\\n      uintptr_t deallocating      : 1;                                         \\\n      uintptr_t has_sidetable_rc  : 1;                                         \\\n      uintptr_t extra_rc          : 8\n#   define RC_ONE   (1ULL<<56)\n#   define RC_HALF  (1ULL<<7)\n```\n\niPhoneOS 是 __arm64__ 架构，ISA_MASK：0x0000000ffffffff8。  \nMacOS 是 __x86_64__ 架构，ISA_MASK：0x00007ffffffffff8ULL。  \n\n打印 person->isa & ISA_MASK\n```\n(lldb) p/x 0x001d8001000014f1 & 0x00007ffffffffff8\n(long) $4 = 0x00000001000014f0\n```\n\n上面👆的打印结果可以看出，Person 实例对象的 isa 指针 & ISA_MASK 就是 Person 类对象的地址。\n\n\n### 类对象的 isa 指针\n类对象的类型 Class 是一个指向结构体 objc_class 的指针：\n```\ntypedef struct objc_class *Class;\n```\n\nJump TO Definition -> objc_class：\n```\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n```\n\n👆objc_class 的 isa 是不支持外部访问的，所以 personClass->isa 获取不到 isa 指针地址，所以要自定义一个结构体：\n```\nstruct test_objc_class {\n    Class isa;\n    Class superclass;\n};\n```\n\n将 personClass 的类型强转为 test_objc_class 类型：\n```\nClass personClass = [Person class];\n\nstruct test_objc_class *personClass2 = (__bridge struct test_objc_class *)(personClass);\n```\n\n因为 personClass 是 OC 对象，所以需要桥接 (__bridge struct test_objc_class *)。  \n\n打印 personClass2->isa、personMetaClass 和 personClass2->isa & ISA_MASK：\n```\n(lldb) p/x personClass2->isa\n(Class) $5 = 0x001d8001000014c9\n(lldb) p/x personMetaClass\n(Class) $6 = 0x00000001000014c8\n(lldb) p/x 0x001d8001000014c9 & 0x00007ffffffffff8\n(long) $7 = 0x00000001000014c8\n```\n\n上面👆的打印结果可以看出，Person 类对象的 isa 指针 & ISA_MASK 就是 Person 元类对象的地址。\n\n\n## 小结\n\n* 对象的 isa 指针指向哪里？  \ninstance 对象的 isa 指向 class 对象  \nclass 对象的 isa 指向 meta-class 对象  \nmeta-class 对象的 isa 指向基类的 meta-class 对象\n\n\n\n\n# superclass\n\n## 定义 Studen 继承自 Person\n```\n@interface Student : Person <NSCoding>\n{\n    @public\n    int _weight;\n}\n@property (nonatomic, assign) int height;\n- (void)studentInstanceMethod;\n+ (void)studentClassMethod;\n@end\n\n@implementation Student\n- (void)studentInstanceMethod\n{\n    \n}\n+ (void)studentClassMethod\n{\n    \n}\n- (id)initWithCoder:(NSCoder *)aDecoder\n{\n    return nil;\n}\n- (void)encodeWithCoder:(NSCoder *)aCoder\n{\n    \n}\n@end\n```\n\n创建 Student 的实例对象\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n         Student *student = [[Student alloc] init];\n         \n         [student personInstanceMethod];\n         \n         [student init];\n         \n         [Student studentClassMethod];\n         \n         [Student personClassMethod];\n         \n         [Student load];\n    }\n    return 0;\n}\n```\n\n## class 对象的 superclass 指针\n\n### Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系\n![isa和superclass](isa和superclass/isa和superclass03.png)\n\n获取 test_objc_class 类型的 Person 类对象和 Student 类对象：\n```\nstruct mj_objc_class *personClass = (__bridge struct test_objc_class *)([Person class]);\n\nstruct mj_objc_class *studentClass = (__bridge struct test_objc_class *)([Student class]);\n```\n\n打印 personClass、studentClass 和 studentClass->superclass：\n```\n(lldb) p personClass\n(test_objc_class *) $0 = 0x00000001000014b8\n(lldb) p studentClass\n(test_objc_class *) $1 = 0x0000000100001508\n(lldb) p/x studentClass->superclass\n(Class) $2 = 0x00000001000014b8 Person\n```\n\n上面👆的打印结果可以看出，Student 类对象的 superclass 指针地址就是 Person 类对象的地址。\n\n### Student 的实例对象调用父类 Person 里的对象方法：\n```\n[student personInstanceMethod];\n```\n\n对象方法 -(void)personInstanceMethod 方法保存在 Person 的类对象里，[student personInstanceMethod] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，最后在 Person 类对象里找到了对象方法 -(void)personInstanceMethod。\n\n### Student 的实例对象调用父类 NSObject 里的对象方法：\n```\n[student init];\n```\n\n对象方法 -(void)init 方法保存在 NSObject 的类对象里，[student init] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，再通过 Person 类对象里的 superclass 找到 NSObject 的类对象，最后在 NSObject 类对象里找到了对象方法 -(void)init。\n\n### 小结\n* 具有继承关系的不同的类之间，是通过 superlass 指针连接的。有了 superlass 指针的连接，子类就实现了调用父类方法的逻辑。\n\n* 当 Student 的 instance 对象要调用 Person 的对象方法时，会先通过 isa 找到 Student 的 class，然后通过 superclass 找到 Person 的 class，最后找到对象方法的实现进行调用。\n\n\n## meta-class 对象的 superclass 指针\n\n### Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：\n![isa和superclass](isa和superclass/isa和superclass04.png)\n\n### Student 类对象调用 Student 元类对象里的类方法：\n```\n[Student studentClassMethod];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，最终在 Student 元类对象里找到类方法 +(void)studentClassMethod。\n\n### Student 类对象调用父类 Person 元类对象里的类方法：\n```\n[Student personClassMethod];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，最终在 Person 元类对象里找到类方法 +(void)personClassMethod。\n\n### Student 类对象调用父类 NSObject 元类对象里的类方法：\n```\n[Student load];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，再通过 Person 元类对象里的 superclass 找到 NSObject 元类对象，最终在 NSObject 元类对象里找到类方法 +(void)load。\n\n\n# instance 对象调用对象方法流程\n\n## 流程图\n![isa和superclass](isa和superclass/isa和superclass05.png)\n\n## unrecoginzed selector sent to instance\n\n```\n[student unrecoginzedSelector];\n```\n\n向实例对象 student 发送一条 \"unrecoginzedSelector\" 消息。student 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)unrecoginzedSelector 。如果没有，Student 类对象会通过 superclass 指针找到 Student 父类的类对象，并在父类的类对象里查找对象方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的类对象。以此往复，直找到基类 NSObject 的类对象。如果在 NSObject 的类对象里也没有查找到对象方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to instance’错误。\n\n## 子类重写父类的对象方法\n\n```\n@interface Person : NSObject <NSCopying>\n- (void)test;\n@end\n\n@implementation Person\n- (void)test \n{\n\n}\n@end\n\n@interface Student : Person <NSCoding>\n@end\n\n@implementation Student\n- (void)test\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n         Student *student = [[Student alloc] init];\n         \n         [student test];\n    }\n    return 0;\n}\n```\n\n向实例对象 student 发送一条 \"test\" 消息。studnet 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)test，找到后返回，不在查找父类的类对象。\n\n# class 对象调用类方法流程\n\n## 流程图\n![isa和superclass](isa和superclass/isa和superclass06.png)\n\n## unrecoginzed selector sent to class\n```\n[Student unrecoginzedSelector];\n```\n\n向类对象 Student 发送一条 \"unrecoginzedSelector\" 消息。Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 -(void)unrecoginzedSelector 。如果没有，Student 元类对象会通过 superclass 指针找到 Student 父类的元类对象，并在父类的元类对象里查找类方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的元类对象。以此往复，直找到基类 NSObject 的元类对象。如果在 NSObject 的元类对象里也没有查找到类方法 -(void)unrecoginzedSelector，就会通过 superclass 指针找到 NSObject 的类对象，如果在 NSObject 的类对象里也没找到类方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to class’错误。\n\n## 子类重写父类的类方法\n\n```\n@interface Person : NSObject <NSCopying>\n+ (void)test;\n@end\n\n@implementation Person\n+ (void)test \n{\n\n}\n@end\n\n@interface Student : Person <NSCoding>\n@end\n\n@implementation Student\n+ (void)test\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         \n         [Student test];\n    }\n    return 0;\n}\n```\n\n向类对象 Student 发送一条 \"test\" Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 +(void)test，找到后返回，不在查找父类的元类对象。\n\n# class 对象调用对象方法流程\n\n## 定义 NSObject+test\n```\n@interface NSObject (Test)\n+ (void)test;\n@end\n\n@implementation NSObject (Test)\n- (void)test\n{\n    NSLog(@\"-[NSObject test] - %p\", self);\n}\n@end\n\n@interface Person : NSObject <NSCopying>\n@end\n\n@implementation Person\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        NSLog(@\"[Person class] - %p\", [Person class]);\n        NSLog(@\"[NSObject class] - %p\", [NSObject class]);\n        \n        [Person test];\n        [NSObject test];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\n[Person class] - 0x1000011e0\n[NSObject class] - 0x7fffaa791140\n[NSObject test] - 0x1000011e0\n[NSObject test] - 0x7fffaa791140\n```\n\n## [Person test]\n\n### 流程图\n![isa和superclass](isa和superclass/isa和superclass07.png)\n\n```\n//打印结果：[NSObject test] - 0x1000011e0\n[Person test];\n```\n\n向类对象 Person 发送一条 \"test\" 消息。Person 通过 isa 指针找到 Person 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，Person 元类对象会通过 superclass 指针找到 NSObject 的元类对象，并在 NSObject 的元类对象里查找类方法 +(void)test。如果还是没有找到，再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  \n\nNSObject+test 里打印的 self，是 objc_msgSend() 里的对象，即接收‘test’消息的对象。[Person test] 中，因为是想 Person 发送了一条‘test’消息，所以打印的 self 是 Person 的类对象。\n\n### + (void)test 与 - (void)test 同时存在\n\n```\n@interface NSObject (Test)\n+ (void)test;\n@end\n\n@implementation NSObject (Test)\n+ (void)test\n{\n    NSLog(@\"+[NSObject test] - %p\", self);\n}\n- (void)test\n{\n    NSLog(@\"-[NSObject test] - %p\", self);\n}\n@end\n```\n\n此时 [Person test] 调用的就是类方法 + (void)test 了。因为 + (void)test 存储在 NSObject 元类对象里，而 - (void)test 存储在 NSObject 类对象里。查找类方法 + (void)test 时，会优先找到 NSObject 源对象，在元类对象里找到类方法 + (void)test 后返回，不再到类对象里找了。\n\n## [NSObject test]\n\n### 流程图\n![isa和superclass](isa和superclass/isa和superclass08.png)\n\n```\n//打印结果：[NSObject test] - 0x7fffaa791140\n[NSObject test];\n```\n\n向类对象 NSObject 发送一条 \"test\" 消息。NSObject 通过 isa 指针找到 NSObject 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，NSObject 元类对象再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  \n\n## class 对象调用对象方法的可能性\n\n```\n[Person test];\n```\n\n上面👆这句代码的本质是：\n```\nobjc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"test\"));\n```\n\n向类对象 Person 发送一条 \"test\" 消息，这条消息里并没有包含方法的类型，即不区分类方法和对象方法。\n\n\n# 窥探 struct objc_class 的结构\n\n## 废弃的 struct objc_class\n\n```\nClass personClass = [Person class];\n\nClass personMetaClass = object_getClass(personClass);\n```\n\n在上面👆类对象的 isa 处提到过，类对象和元类对象的类型 Class 是一个指向结构体 objc_class 的指针：\n```\ntypedef struct objc_class *Class;\n```\n\n![isa和superclass](isa和superclass/isa和superclass12.png)\n\nJump TO Definition -> objc_class：\n```\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n```\n\n代码中包含以下代码：\n```\n#if !__OBJC2__\n\n#endif\n\nOBJC2_UNAVAILABLE\n```\n\n说明，结构体 struct objc_class 在 __OBJC2__ 里被废弃掉了。\n\n## 新版 struct objc_class\n\n可以在 [objc4-781](https://opensource.apple.com/tarballs/objc4/) 找到最新的源码，打开 objc-runtime-new.h :\n\nobjc_class：\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // 方法缓存\n    class_data_bits_t bits;    // 用于获取具体的类信息\n\n    class_rw_t *data() const {\n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n    ...\n    ...\n    ... 一堆方法\n};\n```\n\nobjc_object：\n```\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n```\n\nclass_rw_ext_t、class_rw_t：\n```\nstruct class_rw_ext_t {\n    const class_ro_t *ro;\n    method_array_t methods; //方法列表\n    property_array_t properties; //属性列表\n    protocol_array_t protocols; //协议列表\n    char *demangledName;\n    uint32_t version;\n};\n\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint16_t witness;\n#if SUPPORT_INDEXED_ISA\n    uint16_t index;\n#endif\n\n    explicit_atomic<uintptr_t> ro_or_rw_ext;\n\n    Class firstSubclass;\n    Class nextSiblingClass;\n\nprivate:\n    using ro_or_rw_ext_t = objc::PointerUnion<const class_ro_t *, class_rw_ext_t *>;\n\n    const ro_or_rw_ext_t get_ro_or_rwe() const {\n        return ro_or_rw_ext_t{ro_or_rw_ext};\n    }\n\n    void set_ro_or_rwe(const class_ro_t *ro) {\n        ro_or_rw_ext_t{ro}.storeAt(ro_or_rw_ext, memory_order_relaxed);\n    }\n\n    void set_ro_or_rwe(class_rw_ext_t *rwe, const class_ro_t *ro) {\n        // the release barrier is so that the class_rw_ext_t::ro initialization\n        // is visible to lockless readers\n        rwe->ro = ro;\n        ro_or_rw_ext_t{rwe}.storeAt(ro_or_rw_ext, memory_order_release);\n    }\n\n    class_rw_ext_t *extAlloc(const class_ro_t *ro, bool deep = false);\n\npublic:\n    void setFlags(uint32_t set)\n    {\n        __c11_atomic_fetch_or((_Atomic(uint32_t) *)&flags, set, __ATOMIC_RELAXED);\n    }\n    ...\n    ...\n    ... 一堆方法\n};\n```\n\nclass_rw_t 可以翻译为 class_readWrite_table，即读写表。在 objc4 的旧版本里，class_rw_ext_t 里的成员变量是直接定义在 class_rw_t 里的。\n\nclass_ro_t：\n```\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize; // instance 对象占用的内存空间\n#ifdef __LP64__\n    uint32_t reserved;\n#endif\n\n    const uint8_t * ivarLayout;\n    \n    const char * name; //类名\n    method_list_t * baseMethodList; //方法列表\n    protocol_list_t * baseProtocols; //协议列表\n    const ivar_list_t * ivars; //成员变量列表\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties; //属性列表\n\n    // This field exists only when RO_HAS_SWIFT_INITIALIZER is set.\n    _objc_swiftMetadataInitializer __ptrauth_objc_method_list_imp _swiftMetadataInitializer_NEVER_USE[0];\n\n    _objc_swiftMetadataInitializer swiftMetadataInitializer() const {\n        if (flags & RO_HAS_SWIFT_INITIALIZER) {\n            return _swiftMetadataInitializer_NEVER_USE[0];\n        } else {\n            return nil;\n        }\n    }\n\n    method_list_t *baseMethods() const {\n        return baseMethodList;\n    }\n\n    class_ro_t *duplicate() const {\n        if (flags & RO_HAS_SWIFT_INITIALIZER) {\n            size_t size = sizeof(*this) + sizeof(_swiftMetadataInitializer_NEVER_USE[0]);\n            class_ro_t *ro = (class_ro_t *)memdup(this, size);\n            ro->_swiftMetadataInitializer_NEVER_USE[0] = this->_swiftMetadataInitializer_NEVER_USE[0];\n            return ro;\n        } else {\n            size_t size = sizeof(*this);\n            class_ro_t *ro = (class_ro_t *)memdup(this, size);\n            return ro;\n        }\n    }\n};\n```\n\nclass_ro_t 可以翻译为 class_readOnly_table，即只读表。\n\nclass_data_bits_t：\n```\nstruct class_data_bits_t {\n    ...\n\n    class_rw_t* data() const {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n\n    ...\n```\n\nclass_data_bits_t 内部通过 bits & FAST_DATA_MASK 找到 class_rw_t。\n\nobjc_class、class_rw_t 和 class_ro_t 之间的关系可以简化为：\n![isa和superclass](isa和superclass/isa和superclass11.png)\n\n## 查看 objc_class 对象的真实结构\n\n导入 MJClassInfo.h，定义 MJPerson、MJStudent：\n```\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h>\n#import \"MJClassInfo.h\"\n\n// MJPerson\n@interface MJPerson : NSObject <NSCopying>\n{\n@public\n    int _age;\n}\n@property (nonatomic, assign) int no;\n- (void)personInstanceMethod;\n+ (void)personClassMethod;\n@end\n\n@implementation MJPerson\n\n- (void)test\n{\n    \n}\n\n- (void)personInstanceMethod\n{\n    \n}\n+ (void)personClassMethod\n{\n    \n}\n- (id)copyWithZone:(NSZone *)zone\n{\n    return nil;\n}\n@end\n\n// MJStudent\n@interface MJStudent : MJPerson <NSCoding>\n{\n@public\n    int _weight;\n}\n@property (nonatomic, assign) int height;\n- (void)studentInstanceMethod;\n+ (void)studentClassMethod;\n@end\n\n@implementation MJStudent\n- (void)test\n{\n    \n}\n- (void)studentInstanceMethod\n{\n    \n}\n+ (void)studentClassMethod\n{\n    \n}\n- (id)initWithCoder:(NSCoder *)aDecoder\n{\n    return nil;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJStudent *stu = [[MJStudent alloc] init];\n        stu->_weight = 10;\n        \n        mj_objc_class *studentClass = (__bridge mj_objc_class *)([MJStudent class]);\n        mj_objc_class *personClass = (__bridge mj_objc_class *)([MJPerson class]);\n        \n        class_rw_t *studentClassData = studentClass->data();\n        class_rw_t *personClassData = personClass->data();\n        \n        class_rw_t *studentMetaClassData = studentClass->metaClass()->data();\n        class_rw_t *personMetaClassData = personClass->metaClass()->data();\n\n        NSLog(@\"1111\");\n    }\n    return 0;\n}\n```\n\n加断点后，可以在控制栏里看到每个类内部的具体信息了。\n\nstudentClassData:\n![isa和superclass](isa和superclass/isa和superclass13.png)\n\n可以看到 Student 的类对象里存储了属性、对象方法、协议、成员变量信息。\n\nstudentMetaClassData:\n![isa和superclass](isa和superclass/isa和superclass14.png)\n\n可以看到 Student 的元类对象里存储了类方法、协议。属性、成员变量信息都为 NULL。  \n\n元类对象中存储的协议信息与类对象中存储的协议信息地址相同，所以是同一份。如何确定协议信息是存储在类对象中还是元类对象中呢？还是两个都存储了？ \n\n## 小结\n\n* OC 的类信息存放在哪里？  \n对象方法、属性、成员变量、协议信息，存放在 class 对象中；  \n类方法，存放在 meta-class 对象中；  \n成员变量的具体值，存放在 instance 对象；\n","source":"_posts/OC底层/原理/isa和superclass.md","raw":"---\ntitle: isa和superclass\ndate: 2020-05-11 14:35:58\ntags: OC底层原理\n---\n\n![isa和superclass](isa和superclass/isa和superclass01.png)\n\n<!-- more -->\n\n* instance 的 isa 指向 class\n* class 的 isa 指向 meta-class\n* meta-class 的 isa 指向基类的 meta-class\n* class 的 superclass 指向父类的 class，如果没有父类，superclass 指针为nil\n* meta-class 的 superclass 指向父类的 meta-class，基类的 meta-class 的 superclass 指向基类的 class\n* instance 调用对象方法的轨迹：isa 找到 class，方法不存在，就通过 superclass 找父类\n* class 调用类方法的轨迹：isa 找 meta-class，方法不存在，就通过 superclass 找父类\n\n# isa\n\n* 思考：对象的 isa 指针指向哪里？\n\n## instance 对象、class 对象 和 meta-class 对象之间的 isa 关系\n![isa和superclass](isa和superclass/isa和superclass02.png)\n\n### 定义 Person\n```\n@interface Person : NSObject <NSCopying>\n{\n    @public\n    int _age;\n}\n@property (nonatomic, assign) int no;\n- (void)personInstanceMethod;\n+ (void)personClassMethod;\n@end\n\n@implementation Person\n@end\n```\n\n创建 Person 的实例对象\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n        Person *person = [[Person alloc] init];\n        \n        person->_age = 10;\n\n        [person personInstanceMethod];\n        \n        [Person personClassMethod];\n        \n    }\n    return 0;\n}\n```\n\n### 将 OC 代码转换为 C\\C++ 代码\n找到 main.m 所在文件，在终端输入：\n```\n$ xcrun -sdk iphoneos clang -arch arm64  -rewrite-objc main.m\n```\n\n没有通过 ‘-o’ 生成指定文件时，默认生成 main.cpp 文件，打开 main.cpp 文件。找到 main 函数：\n```\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\n        Person *person = ((Person *(*)(id, SEL))(void *)objc_msgSend)((id)((Person *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"alloc\")), sel_registerName(\"init\"));\n\n        (*(int *)((char *)person + OBJC_IVAR_$_Person$_age)) = 10;\n\n        ((void (*)(id, SEL))(void *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));\n\n        ((void (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n\n    }\n    return 0;\n}\n```\n\n找到 objc_msgSend：\n```\n((void (*)(id, SEL))(void *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));\n\n((void (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n\n//简化后：\nobjc_msgSend(person, sel_registerName(\"personInstanceMethod\"));\n\nobjc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));\n```\n\n[person personInstanceMethod] 的具体实现是 objc_msgSend(person, sel_registerName(\"personInstanceMethod\"))。  \n即在实例对象 person 调用 -(void)personInstanceMethod 对象方法的时候，向实例对象 person 发送一条 \"personInstanceMethod\" 消息。  \n\n[Person personClassMethod] 的具体实现是 objc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"))。  \n即在类对象 Person 调用 +(void)personClassMethod 类方法的时候，向类对象 Person 发送一条 \"personClassMethod\" 消息。  \n\n### 方法调用与对象的关系\n```\n[person personInstanceMethod];\n[Person personClassMethod];\n```\n\n上面👆两个方法调用表现出来的是，实例对象 person 可以调用存在 Person 类对象里的对象方法， Person 类对象可以调用存储在 Person 元类对象里的类方法。\n\n### 小结\n* instance 对象的 isa 指针指向 class 对象。当调用对象方法时，通过 instance 对象的 isa 指针找到 class 对象，最后找到对象方法的实现进行调用。\n\n* class 对象的 isa 指针指向 meta-class 对象。当调用类方法时，通过 class 对象的 isa 指针找到 meta-class对象，最后找到类方法的实现进行调用。\n\n## ISA_MASK\n\n<!-- ![isa和superclass](isa和superclass/isa和superclass10.png) -->\n\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n        Person *person = [[Person alloc] init];\n        \n        Class personClass = [Person class];\n\n        Class personMetaClass = object_getClass(personClass);\n\n        NSLog(@\"%p %p %p\", person, personClass, personMetaClass);\n    }\n    return 0;\n}\n```\n### 实例对象的 isa 指针\n打印 Person->isa、personClass：\n```\n(lldb) p/x (long)person->isa //指针地址格式设置16进制\n(long) $2 = 0x001d8001000014f1\n(lldb) p/x personClass\n(Class) $3 = 0x00000001000014f0 Person\n```\n\n上面👆的打印结果可以看到，Person 的类对象地址是 0x00000001000014f0，而 Person 的实例对象的 isa 指针的地址是 0x001d8001000014f1。\n\n在 64bit 之前 isa 指针的地址等于被指向对象的地址。从 64bit 开始，isa 需要进行一次位运算，才能计算出真实地址：\n![isa和superclass](isa和superclass/isa和superclass09.png)\n\nISA_MASK 在源码 [objc4-781](https://opensource.apple.com/tarballs/objc4/) 中的定义：\n```\n# if __arm64__\n#   define ISA_MASK        0x0000000ffffffff8ULL\n#   define ISA_MAGIC_MASK  0x000003f000000001ULL\n#   define ISA_MAGIC_VALUE 0x000001a000000001ULL\n#   define ISA_BITFIELD                                                      \\\n      uintptr_t nonpointer        : 1;                                       \\\n      uintptr_t has_assoc         : 1;                                       \\\n      uintptr_t has_cxx_dtor      : 1;                                       \\\n      uintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\\n      uintptr_t magic             : 6;                                       \\\n      uintptr_t weakly_referenced : 1;                                       \\\n      uintptr_t deallocating      : 1;                                       \\\n      uintptr_t has_sidetable_rc  : 1;                                       \\\n      uintptr_t extra_rc          : 19\n#   define RC_ONE   (1ULL<<45)\n#   define RC_HALF  (1ULL<<18)\n\n# elif __x86_64__\n#   define ISA_MASK        0x00007ffffffffff8ULL\n#   define ISA_MAGIC_MASK  0x001f800000000001ULL\n#   define ISA_MAGIC_VALUE 0x001d800000000001ULL\n#   define ISA_BITFIELD                                                        \\\n      uintptr_t nonpointer        : 1;                                         \\\n      uintptr_t has_assoc         : 1;                                         \\\n      uintptr_t has_cxx_dtor      : 1;                                         \\\n      uintptr_t shiftcls          : 44; /*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/ \\\n      uintptr_t magic             : 6;                                         \\\n      uintptr_t weakly_referenced : 1;                                         \\\n      uintptr_t deallocating      : 1;                                         \\\n      uintptr_t has_sidetable_rc  : 1;                                         \\\n      uintptr_t extra_rc          : 8\n#   define RC_ONE   (1ULL<<56)\n#   define RC_HALF  (1ULL<<7)\n```\n\niPhoneOS 是 __arm64__ 架构，ISA_MASK：0x0000000ffffffff8。  \nMacOS 是 __x86_64__ 架构，ISA_MASK：0x00007ffffffffff8ULL。  \n\n打印 person->isa & ISA_MASK\n```\n(lldb) p/x 0x001d8001000014f1 & 0x00007ffffffffff8\n(long) $4 = 0x00000001000014f0\n```\n\n上面👆的打印结果可以看出，Person 实例对象的 isa 指针 & ISA_MASK 就是 Person 类对象的地址。\n\n\n### 类对象的 isa 指针\n类对象的类型 Class 是一个指向结构体 objc_class 的指针：\n```\ntypedef struct objc_class *Class;\n```\n\nJump TO Definition -> objc_class：\n```\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n```\n\n👆objc_class 的 isa 是不支持外部访问的，所以 personClass->isa 获取不到 isa 指针地址，所以要自定义一个结构体：\n```\nstruct test_objc_class {\n    Class isa;\n    Class superclass;\n};\n```\n\n将 personClass 的类型强转为 test_objc_class 类型：\n```\nClass personClass = [Person class];\n\nstruct test_objc_class *personClass2 = (__bridge struct test_objc_class *)(personClass);\n```\n\n因为 personClass 是 OC 对象，所以需要桥接 (__bridge struct test_objc_class *)。  \n\n打印 personClass2->isa、personMetaClass 和 personClass2->isa & ISA_MASK：\n```\n(lldb) p/x personClass2->isa\n(Class) $5 = 0x001d8001000014c9\n(lldb) p/x personMetaClass\n(Class) $6 = 0x00000001000014c8\n(lldb) p/x 0x001d8001000014c9 & 0x00007ffffffffff8\n(long) $7 = 0x00000001000014c8\n```\n\n上面👆的打印结果可以看出，Person 类对象的 isa 指针 & ISA_MASK 就是 Person 元类对象的地址。\n\n\n## 小结\n\n* 对象的 isa 指针指向哪里？  \ninstance 对象的 isa 指向 class 对象  \nclass 对象的 isa 指向 meta-class 对象  \nmeta-class 对象的 isa 指向基类的 meta-class 对象\n\n\n\n\n# superclass\n\n## 定义 Studen 继承自 Person\n```\n@interface Student : Person <NSCoding>\n{\n    @public\n    int _weight;\n}\n@property (nonatomic, assign) int height;\n- (void)studentInstanceMethod;\n+ (void)studentClassMethod;\n@end\n\n@implementation Student\n- (void)studentInstanceMethod\n{\n    \n}\n+ (void)studentClassMethod\n{\n    \n}\n- (id)initWithCoder:(NSCoder *)aDecoder\n{\n    return nil;\n}\n- (void)encodeWithCoder:(NSCoder *)aCoder\n{\n    \n}\n@end\n```\n\n创建 Student 的实例对象\n```\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n         Student *student = [[Student alloc] init];\n         \n         [student personInstanceMethod];\n         \n         [student init];\n         \n         [Student studentClassMethod];\n         \n         [Student personClassMethod];\n         \n         [Student load];\n    }\n    return 0;\n}\n```\n\n## class 对象的 superclass 指针\n\n### Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系\n![isa和superclass](isa和superclass/isa和superclass03.png)\n\n获取 test_objc_class 类型的 Person 类对象和 Student 类对象：\n```\nstruct mj_objc_class *personClass = (__bridge struct test_objc_class *)([Person class]);\n\nstruct mj_objc_class *studentClass = (__bridge struct test_objc_class *)([Student class]);\n```\n\n打印 personClass、studentClass 和 studentClass->superclass：\n```\n(lldb) p personClass\n(test_objc_class *) $0 = 0x00000001000014b8\n(lldb) p studentClass\n(test_objc_class *) $1 = 0x0000000100001508\n(lldb) p/x studentClass->superclass\n(Class) $2 = 0x00000001000014b8 Person\n```\n\n上面👆的打印结果可以看出，Student 类对象的 superclass 指针地址就是 Person 类对象的地址。\n\n### Student 的实例对象调用父类 Person 里的对象方法：\n```\n[student personInstanceMethod];\n```\n\n对象方法 -(void)personInstanceMethod 方法保存在 Person 的类对象里，[student personInstanceMethod] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，最后在 Person 类对象里找到了对象方法 -(void)personInstanceMethod。\n\n### Student 的实例对象调用父类 NSObject 里的对象方法：\n```\n[student init];\n```\n\n对象方法 -(void)init 方法保存在 NSObject 的类对象里，[student init] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，再通过 Person 类对象里的 superclass 找到 NSObject 的类对象，最后在 NSObject 类对象里找到了对象方法 -(void)init。\n\n### 小结\n* 具有继承关系的不同的类之间，是通过 superlass 指针连接的。有了 superlass 指针的连接，子类就实现了调用父类方法的逻辑。\n\n* 当 Student 的 instance 对象要调用 Person 的对象方法时，会先通过 isa 找到 Student 的 class，然后通过 superclass 找到 Person 的 class，最后找到对象方法的实现进行调用。\n\n\n## meta-class 对象的 superclass 指针\n\n### Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：\n![isa和superclass](isa和superclass/isa和superclass04.png)\n\n### Student 类对象调用 Student 元类对象里的类方法：\n```\n[Student studentClassMethod];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，最终在 Student 元类对象里找到类方法 +(void)studentClassMethod。\n\n### Student 类对象调用父类 Person 元类对象里的类方法：\n```\n[Student personClassMethod];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，最终在 Person 元类对象里找到类方法 +(void)personClassMethod。\n\n### Student 类对象调用父类 NSObject 元类对象里的类方法：\n```\n[Student load];\n```\n\n首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，再通过 Person 元类对象里的 superclass 找到 NSObject 元类对象，最终在 NSObject 元类对象里找到类方法 +(void)load。\n\n\n# instance 对象调用对象方法流程\n\n## 流程图\n![isa和superclass](isa和superclass/isa和superclass05.png)\n\n## unrecoginzed selector sent to instance\n\n```\n[student unrecoginzedSelector];\n```\n\n向实例对象 student 发送一条 \"unrecoginzedSelector\" 消息。student 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)unrecoginzedSelector 。如果没有，Student 类对象会通过 superclass 指针找到 Student 父类的类对象，并在父类的类对象里查找对象方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的类对象。以此往复，直找到基类 NSObject 的类对象。如果在 NSObject 的类对象里也没有查找到对象方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to instance’错误。\n\n## 子类重写父类的对象方法\n\n```\n@interface Person : NSObject <NSCopying>\n- (void)test;\n@end\n\n@implementation Person\n- (void)test \n{\n\n}\n@end\n\n@interface Student : Person <NSCoding>\n@end\n\n@implementation Student\n- (void)test\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        \n         Student *student = [[Student alloc] init];\n         \n         [student test];\n    }\n    return 0;\n}\n```\n\n向实例对象 student 发送一条 \"test\" 消息。studnet 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)test，找到后返回，不在查找父类的类对象。\n\n# class 对象调用类方法流程\n\n## 流程图\n![isa和superclass](isa和superclass/isa和superclass06.png)\n\n## unrecoginzed selector sent to class\n```\n[Student unrecoginzedSelector];\n```\n\n向类对象 Student 发送一条 \"unrecoginzedSelector\" 消息。Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 -(void)unrecoginzedSelector 。如果没有，Student 元类对象会通过 superclass 指针找到 Student 父类的元类对象，并在父类的元类对象里查找类方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的元类对象。以此往复，直找到基类 NSObject 的元类对象。如果在 NSObject 的元类对象里也没有查找到类方法 -(void)unrecoginzedSelector，就会通过 superclass 指针找到 NSObject 的类对象，如果在 NSObject 的类对象里也没找到类方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to class’错误。\n\n## 子类重写父类的类方法\n\n```\n@interface Person : NSObject <NSCopying>\n+ (void)test;\n@end\n\n@implementation Person\n+ (void)test \n{\n\n}\n@end\n\n@interface Student : Person <NSCoding>\n@end\n\n@implementation Student\n+ (void)test\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         \n         [Student test];\n    }\n    return 0;\n}\n```\n\n向类对象 Student 发送一条 \"test\" Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 +(void)test，找到后返回，不在查找父类的元类对象。\n\n# class 对象调用对象方法流程\n\n## 定义 NSObject+test\n```\n@interface NSObject (Test)\n+ (void)test;\n@end\n\n@implementation NSObject (Test)\n- (void)test\n{\n    NSLog(@\"-[NSObject test] - %p\", self);\n}\n@end\n\n@interface Person : NSObject <NSCopying>\n@end\n\n@implementation Person\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        NSLog(@\"[Person class] - %p\", [Person class]);\n        NSLog(@\"[NSObject class] - %p\", [NSObject class]);\n        \n        [Person test];\n        [NSObject test];\n    }\n    return 0;\n}\n```\n\n打印结果：\n```\n[Person class] - 0x1000011e0\n[NSObject class] - 0x7fffaa791140\n[NSObject test] - 0x1000011e0\n[NSObject test] - 0x7fffaa791140\n```\n\n## [Person test]\n\n### 流程图\n![isa和superclass](isa和superclass/isa和superclass07.png)\n\n```\n//打印结果：[NSObject test] - 0x1000011e0\n[Person test];\n```\n\n向类对象 Person 发送一条 \"test\" 消息。Person 通过 isa 指针找到 Person 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，Person 元类对象会通过 superclass 指针找到 NSObject 的元类对象，并在 NSObject 的元类对象里查找类方法 +(void)test。如果还是没有找到，再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  \n\nNSObject+test 里打印的 self，是 objc_msgSend() 里的对象，即接收‘test’消息的对象。[Person test] 中，因为是想 Person 发送了一条‘test’消息，所以打印的 self 是 Person 的类对象。\n\n### + (void)test 与 - (void)test 同时存在\n\n```\n@interface NSObject (Test)\n+ (void)test;\n@end\n\n@implementation NSObject (Test)\n+ (void)test\n{\n    NSLog(@\"+[NSObject test] - %p\", self);\n}\n- (void)test\n{\n    NSLog(@\"-[NSObject test] - %p\", self);\n}\n@end\n```\n\n此时 [Person test] 调用的就是类方法 + (void)test 了。因为 + (void)test 存储在 NSObject 元类对象里，而 - (void)test 存储在 NSObject 类对象里。查找类方法 + (void)test 时，会优先找到 NSObject 源对象，在元类对象里找到类方法 + (void)test 后返回，不再到类对象里找了。\n\n## [NSObject test]\n\n### 流程图\n![isa和superclass](isa和superclass/isa和superclass08.png)\n\n```\n//打印结果：[NSObject test] - 0x7fffaa791140\n[NSObject test];\n```\n\n向类对象 NSObject 发送一条 \"test\" 消息。NSObject 通过 isa 指针找到 NSObject 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，NSObject 元类对象再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  \n\n## class 对象调用对象方法的可能性\n\n```\n[Person test];\n```\n\n上面👆这句代码的本质是：\n```\nobjc_msgSend(objc_getClass(\"Person\"), sel_registerName(\"test\"));\n```\n\n向类对象 Person 发送一条 \"test\" 消息，这条消息里并没有包含方法的类型，即不区分类方法和对象方法。\n\n\n# 窥探 struct objc_class 的结构\n\n## 废弃的 struct objc_class\n\n```\nClass personClass = [Person class];\n\nClass personMetaClass = object_getClass(personClass);\n```\n\n在上面👆类对象的 isa 处提到过，类对象和元类对象的类型 Class 是一个指向结构体 objc_class 的指针：\n```\ntypedef struct objc_class *Class;\n```\n\n![isa和superclass](isa和superclass/isa和superclass12.png)\n\nJump TO Definition -> objc_class：\n```\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n```\n\n代码中包含以下代码：\n```\n#if !__OBJC2__\n\n#endif\n\nOBJC2_UNAVAILABLE\n```\n\n说明，结构体 struct objc_class 在 __OBJC2__ 里被废弃掉了。\n\n## 新版 struct objc_class\n\n可以在 [objc4-781](https://opensource.apple.com/tarballs/objc4/) 找到最新的源码，打开 objc-runtime-new.h :\n\nobjc_class：\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // 方法缓存\n    class_data_bits_t bits;    // 用于获取具体的类信息\n\n    class_rw_t *data() const {\n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n    ...\n    ...\n    ... 一堆方法\n};\n```\n\nobjc_object：\n```\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n```\n\nclass_rw_ext_t、class_rw_t：\n```\nstruct class_rw_ext_t {\n    const class_ro_t *ro;\n    method_array_t methods; //方法列表\n    property_array_t properties; //属性列表\n    protocol_array_t protocols; //协议列表\n    char *demangledName;\n    uint32_t version;\n};\n\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint16_t witness;\n#if SUPPORT_INDEXED_ISA\n    uint16_t index;\n#endif\n\n    explicit_atomic<uintptr_t> ro_or_rw_ext;\n\n    Class firstSubclass;\n    Class nextSiblingClass;\n\nprivate:\n    using ro_or_rw_ext_t = objc::PointerUnion<const class_ro_t *, class_rw_ext_t *>;\n\n    const ro_or_rw_ext_t get_ro_or_rwe() const {\n        return ro_or_rw_ext_t{ro_or_rw_ext};\n    }\n\n    void set_ro_or_rwe(const class_ro_t *ro) {\n        ro_or_rw_ext_t{ro}.storeAt(ro_or_rw_ext, memory_order_relaxed);\n    }\n\n    void set_ro_or_rwe(class_rw_ext_t *rwe, const class_ro_t *ro) {\n        // the release barrier is so that the class_rw_ext_t::ro initialization\n        // is visible to lockless readers\n        rwe->ro = ro;\n        ro_or_rw_ext_t{rwe}.storeAt(ro_or_rw_ext, memory_order_release);\n    }\n\n    class_rw_ext_t *extAlloc(const class_ro_t *ro, bool deep = false);\n\npublic:\n    void setFlags(uint32_t set)\n    {\n        __c11_atomic_fetch_or((_Atomic(uint32_t) *)&flags, set, __ATOMIC_RELAXED);\n    }\n    ...\n    ...\n    ... 一堆方法\n};\n```\n\nclass_rw_t 可以翻译为 class_readWrite_table，即读写表。在 objc4 的旧版本里，class_rw_ext_t 里的成员变量是直接定义在 class_rw_t 里的。\n\nclass_ro_t：\n```\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize; // instance 对象占用的内存空间\n#ifdef __LP64__\n    uint32_t reserved;\n#endif\n\n    const uint8_t * ivarLayout;\n    \n    const char * name; //类名\n    method_list_t * baseMethodList; //方法列表\n    protocol_list_t * baseProtocols; //协议列表\n    const ivar_list_t * ivars; //成员变量列表\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties; //属性列表\n\n    // This field exists only when RO_HAS_SWIFT_INITIALIZER is set.\n    _objc_swiftMetadataInitializer __ptrauth_objc_method_list_imp _swiftMetadataInitializer_NEVER_USE[0];\n\n    _objc_swiftMetadataInitializer swiftMetadataInitializer() const {\n        if (flags & RO_HAS_SWIFT_INITIALIZER) {\n            return _swiftMetadataInitializer_NEVER_USE[0];\n        } else {\n            return nil;\n        }\n    }\n\n    method_list_t *baseMethods() const {\n        return baseMethodList;\n    }\n\n    class_ro_t *duplicate() const {\n        if (flags & RO_HAS_SWIFT_INITIALIZER) {\n            size_t size = sizeof(*this) + sizeof(_swiftMetadataInitializer_NEVER_USE[0]);\n            class_ro_t *ro = (class_ro_t *)memdup(this, size);\n            ro->_swiftMetadataInitializer_NEVER_USE[0] = this->_swiftMetadataInitializer_NEVER_USE[0];\n            return ro;\n        } else {\n            size_t size = sizeof(*this);\n            class_ro_t *ro = (class_ro_t *)memdup(this, size);\n            return ro;\n        }\n    }\n};\n```\n\nclass_ro_t 可以翻译为 class_readOnly_table，即只读表。\n\nclass_data_bits_t：\n```\nstruct class_data_bits_t {\n    ...\n\n    class_rw_t* data() const {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n\n    ...\n```\n\nclass_data_bits_t 内部通过 bits & FAST_DATA_MASK 找到 class_rw_t。\n\nobjc_class、class_rw_t 和 class_ro_t 之间的关系可以简化为：\n![isa和superclass](isa和superclass/isa和superclass11.png)\n\n## 查看 objc_class 对象的真实结构\n\n导入 MJClassInfo.h，定义 MJPerson、MJStudent：\n```\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h>\n#import \"MJClassInfo.h\"\n\n// MJPerson\n@interface MJPerson : NSObject <NSCopying>\n{\n@public\n    int _age;\n}\n@property (nonatomic, assign) int no;\n- (void)personInstanceMethod;\n+ (void)personClassMethod;\n@end\n\n@implementation MJPerson\n\n- (void)test\n{\n    \n}\n\n- (void)personInstanceMethod\n{\n    \n}\n+ (void)personClassMethod\n{\n    \n}\n- (id)copyWithZone:(NSZone *)zone\n{\n    return nil;\n}\n@end\n\n// MJStudent\n@interface MJStudent : MJPerson <NSCoding>\n{\n@public\n    int _weight;\n}\n@property (nonatomic, assign) int height;\n- (void)studentInstanceMethod;\n+ (void)studentClassMethod;\n@end\n\n@implementation MJStudent\n- (void)test\n{\n    \n}\n- (void)studentInstanceMethod\n{\n    \n}\n+ (void)studentClassMethod\n{\n    \n}\n- (id)initWithCoder:(NSCoder *)aDecoder\n{\n    return nil;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder\n{\n    \n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MJStudent *stu = [[MJStudent alloc] init];\n        stu->_weight = 10;\n        \n        mj_objc_class *studentClass = (__bridge mj_objc_class *)([MJStudent class]);\n        mj_objc_class *personClass = (__bridge mj_objc_class *)([MJPerson class]);\n        \n        class_rw_t *studentClassData = studentClass->data();\n        class_rw_t *personClassData = personClass->data();\n        \n        class_rw_t *studentMetaClassData = studentClass->metaClass()->data();\n        class_rw_t *personMetaClassData = personClass->metaClass()->data();\n\n        NSLog(@\"1111\");\n    }\n    return 0;\n}\n```\n\n加断点后，可以在控制栏里看到每个类内部的具体信息了。\n\nstudentClassData:\n![isa和superclass](isa和superclass/isa和superclass13.png)\n\n可以看到 Student 的类对象里存储了属性、对象方法、协议、成员变量信息。\n\nstudentMetaClassData:\n![isa和superclass](isa和superclass/isa和superclass14.png)\n\n可以看到 Student 的元类对象里存储了类方法、协议。属性、成员变量信息都为 NULL。  \n\n元类对象中存储的协议信息与类对象中存储的协议信息地址相同，所以是同一份。如何确定协议信息是存储在类对象中还是元类对象中呢？还是两个都存储了？ \n\n## 小结\n\n* OC 的类信息存放在哪里？  \n对象方法、属性、成员变量、协议信息，存放在 class 对象中；  \n类方法，存放在 meta-class 对象中；  \n成员变量的具体值，存放在 instance 对象；\n","slug":"OC底层/原理/isa和superclass","published":1,"updated":"2020-05-13T07:08:33.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckae40ar4000pte03f5q3rx3e","content":"<p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass01.png\" alt=\"isa和superclass\"></p>\n<a id=\"more\"></a>\n<ul>\n<li>instance 的 isa 指向 class</li>\n<li>class 的 isa 指向 meta-class</li>\n<li>meta-class 的 isa 指向基类的 meta-class</li>\n<li>class 的 superclass 指向父类的 class，如果没有父类，superclass 指针为nil</li>\n<li>meta-class 的 superclass 指向父类的 meta-class，基类的 meta-class 的 superclass 指向基类的 class</li>\n<li>instance 调用对象方法的轨迹：isa 找到 class，方法不存在，就通过 superclass 找父类</li>\n<li>class 调用类方法的轨迹：isa 找 meta-class，方法不存在，就通过 superclass 找父类</li>\n</ul>\n<h1 id=\"isa\"><a href=\"#isa\" class=\"headerlink\" title=\"isa\"></a>isa</h1><ul>\n<li>思考：对象的 isa 指针指向哪里？</li>\n</ul>\n<h2 id=\"instance-对象、class-对象-和-meta-class-对象之间的-isa-关系\"><a href=\"#instance-对象、class-对象-和-meta-class-对象之间的-isa-关系\" class=\"headerlink\" title=\"instance 对象、class 对象 和 meta-class 对象之间的 isa 关系\"></a>instance 对象、class 对象 和 meta-class 对象之间的 isa 关系</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass02.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"定义-Person\"><a href=\"#定义-Person\" class=\"headerlink\" title=\"定义 Person\"></a>定义 Person</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject &lt;NSCopying&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@property</span> (nonatomic, assign) int no;</div><div class=\"line\"><span class=\"selector-tag\">-</span> (void)<span class=\"selector-tag\">personInstanceMethod</span>;</div><div class=\"line\">+ (void)<span class=\"selector-tag\">personClassMethod</span>;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div><div class=\"line\"></div><div class=\"line\">@<span class=\"selector-tag\">implementation</span> <span class=\"selector-tag\">Person</span></div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>创建 Person 的实例对象<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span>(<span class=\"params\"><span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]</span>) </span>&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        </div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        person-&gt;_age = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        [<span class=\"meta\">person personInstanceMethod</span>];</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"meta\">Person personClassMethod</span>];</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将-OC-代码转换为-C-C-代码\"><a href=\"#将-OC-代码转换为-C-C-代码\" class=\"headerlink\" title=\"将 OC 代码转换为 C\\C++ 代码\"></a>将 OC 代码转换为 C\\C++ 代码</h3><p>找到 main.m 所在文件，在终端输入：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xcrun -sdk iphoneos clang -arch arm64  -rewrite-objc main.m</span></div></pre></td></tr></table></figure></p>\n<p>没有通过 ‘-o’ 生成指定文件时，默认生成 main.cpp 文件，打开 main.cpp 文件。找到 main 函数：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main(<span class=\"name\">int</span> argc, const char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\"></div><div class=\"line\">        Person *person = ((<span class=\"name\">Person</span> *(*)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)((Person *(<span class=\"name\">*</span>)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"alloc\")), sel_registerName(\"init\"));</div><div class=\"line\"></div><div class=\"line\">        (*(<span class=\"name\">int</span> *)((char *)person + OBJC_IVAR_$_Person$_age)) = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">        ((<span class=\"name\">void</span> (<span class=\"name\">*</span>)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));</div><div class=\"line\"></div><div class=\"line\">        ((void (*)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>找到 objc_msgSend：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)person, sel_registerName(<span class=\"string\">\"personInstanceMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\">((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)objc_getClass(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"personClassMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化后：</span></div><div class=\"line\">objc_msgSend(person, sel_registerName(<span class=\"string\">\"personInstanceMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\">objc_msgSend(objc_getClass(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"personClassMethod\"</span>));</div></pre></td></tr></table></figure></p>\n<p>[person personInstanceMethod] 的具体实现是 objc_msgSend(person, sel_registerName(“personInstanceMethod”))。<br>即在实例对象 person 调用 -(void)personInstanceMethod 对象方法的时候，向实例对象 person 发送一条 “personInstanceMethod” 消息。  </p>\n<p>[Person personClassMethod] 的具体实现是 objc_msgSend(objc_getClass(“Person”), sel_registerName(“personClassMethod”))。<br>即在类对象 Person 调用 +(void)personClassMethod 类方法的时候，向类对象 Person 发送一条 “personClassMethod” 消息。  </p>\n<h3 id=\"方法调用与对象的关系\"><a href=\"#方法调用与对象的关系\" class=\"headerlink\" title=\"方法调用与对象的关系\"></a>方法调用与对象的关系</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[person personInstanceMethod]</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"section\">[Person personClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上面👆两个方法调用表现出来的是，实例对象 person 可以调用存在 Person 类对象里的对象方法， Person 类对象可以调用存储在 Person 元类对象里的类方法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>instance 对象的 isa 指针指向 class 对象。当调用对象方法时，通过 instance 对象的 isa 指针找到 class 对象，最后找到对象方法的实现进行调用。</p>\n</li>\n<li><p>class 对象的 isa 指针指向 meta-class 对象。当调用类方法时，通过 class 对象的 isa 指针找到 meta-class对象，最后找到类方法的实现进行调用。</p>\n</li>\n</ul>\n<h2 id=\"ISA-MASK\"><a href=\"#ISA-MASK\" class=\"headerlink\" title=\"ISA_MASK\"></a>ISA_MASK</h2><!-- ![isa和superclass](isa和superclass/isa和superclass10.png) -->\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        Class personClass = [Person <span class=\"keyword\">class</span>];</div><div class=\"line\"></div><div class=\"line\">        Class personMetaClass = object_getClass(personClass);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%p %p %p\"</span>, person, personClass, personMetaClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实例对象的-isa-指针\"><a href=\"#实例对象的-isa-指针\" class=\"headerlink\" title=\"实例对象的 isa 指针\"></a>实例对象的 isa 指针</h3><p>打印 Person-&gt;isa、personClass：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x (long)person-&gt;isa <span class=\"comment\">//指针地址格式设置16进制</span></div><div class=\"line\">(long) $<span class=\"number\">2</span> = <span class=\"number\">0x001d8001000014f1</span></div><div class=\"line\">(lldb) p/x personClass</div><div class=\"line\">(Class) $<span class=\"number\">3</span> = <span class=\"number\">0x00000001000014f0</span> Person</div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看到，Person 的类对象地址是 0x00000001000014f0，而 Person 的实例对象的 isa 指针的地址是 0x001d8001000014f1。</p>\n<p>在 64bit 之前 isa 指针的地址等于被指向对象的地址。从 64bit 开始，isa 需要进行一次位运算，才能计算出真实地址：<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass09.png\" alt=\"isa和superclass\"></p>\n<p>ISA_MASK 在源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a> 中的定义：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># if __arm64__</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MASK        0x0000000ffffffff8ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_MASK  0x000003f000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_VALUE 0x000001a000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_BITFIELD                                                      \\</span></div><div class=\"line\">      uintptr_t nonpointer        : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_assoc         : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_cxx_dtor      : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">shiftcls </span>         : <span class=\"number\">33</span><span class=\"comment\">; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\</span></div><div class=\"line\">      uintptr_t magic             : <span class=\"number\">6</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t weakly_referenced : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t deallocating      : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_sidetable_rc  : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">extra_rc </span>         : <span class=\"number\">19</span></div><div class=\"line\"><span class=\"comment\">#   define RC_ONE   (1ULL&lt;&lt;45)</span></div><div class=\"line\"><span class=\"comment\">#   define RC_HALF  (1ULL&lt;&lt;18)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># elif __x86_64__</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MASK        0x00007ffffffffff8ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_MASK  0x001f800000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_VALUE 0x001d800000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_BITFIELD                                                        \\</span></div><div class=\"line\">      uintptr_t nonpointer        : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_assoc         : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_cxx_dtor      : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">shiftcls </span>         : <span class=\"number\">44</span><span class=\"comment\">; /*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/ \\</span></div><div class=\"line\">      uintptr_t magic             : <span class=\"number\">6</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t weakly_referenced : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t deallocating      : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_sidetable_rc  : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">extra_rc </span>         : <span class=\"number\">8</span></div><div class=\"line\"><span class=\"comment\">#   define RC_ONE   (1ULL&lt;&lt;56)</span></div><div class=\"line\"><span class=\"comment\">#   define RC_HALF  (1ULL&lt;&lt;7)</span></div></pre></td></tr></table></figure></p>\n<p>iPhoneOS 是 <strong>arm64</strong> 架构，ISA_MASK：0x0000000ffffffff8。<br>MacOS 是 <strong>x86_64</strong> 架构，ISA_MASK：0x00007ffffffffff8ULL。  </p>\n<p>打印 person-&gt;isa &amp; ISA_MASK<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x <span class=\"number\">0x001d8001000014f1</span> &amp; <span class=\"number\">0x00007ffffffffff8</span></div><div class=\"line\">(long) $<span class=\"number\">4</span> = <span class=\"number\">0x00000001000014f0</span></div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Person 实例对象的 isa 指针 &amp; ISA_MASK 就是 Person 类对象的地址。</p>\n<h3 id=\"类对象的-isa-指针\"><a href=\"#类对象的-isa-指针\" class=\"headerlink\" title=\"类对象的 isa 指针\"></a>类对象的 isa 指针</h3><p>类对象的类型 Class 是一个指向结构体 objc_class 的指针：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> *<span class=\"title\">Class</span>;</span></div></pre></td></tr></table></figure></p>\n<p>Jump TO Definition -&gt; objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !__OBJC2__</span></div><div class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure></p>\n<p>👆objc_class 的 isa 是不支持外部访问的，所以 personClass-&gt;isa 获取不到 isa 指针地址，所以要自定义一个结构体：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct test_objc_class &#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">superclass</span>;</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>将 personClass 的类型强转为 test_objc_class 类型：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Class</span> personClass = [<span class=\"type\">Person</span> <span class=\"class\"><span class=\"keyword\">class</span>];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> test_objc_class *personClass2 = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)(personClass);</div></pre></td></tr></table></figure></p>\n<p>因为 personClass 是 OC 对象，所以需要桥接 (__bridge struct test_objc_class *)。  </p>\n<p>打印 personClass2-&gt;isa、personMetaClass 和 personClass2-&gt;isa &amp; ISA_MASK：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x personClass2-&gt;isa</div><div class=\"line\">(Class) $<span class=\"number\">5</span> = <span class=\"number\">0x001d8001000014c9</span></div><div class=\"line\">(lldb) p/x personMetaClass</div><div class=\"line\">(Class) $<span class=\"number\">6</span> = <span class=\"number\">0x00000001000014c8</span></div><div class=\"line\">(lldb) p/x <span class=\"number\">0x001d8001000014c9</span> &amp; <span class=\"number\">0x00007ffffffffff8</span></div><div class=\"line\">(long) $<span class=\"number\">7</span> = <span class=\"number\">0x00000001000014c8</span></div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Person 类对象的 isa 指针 &amp; ISA_MASK 就是 Person 元类对象的地址。</p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>对象的 isa 指针指向哪里？<br>instance 对象的 isa 指向 class 对象<br>class 对象的 isa 指向 meta-class 对象<br>meta-class 对象的 isa 指向基类的 meta-class 对象</li>\n</ul>\n<h1 id=\"superclass\"><a href=\"#superclass\" class=\"headerlink\" title=\"superclass\"></a>superclass</h1><h2 id=\"定义-Studen-继承自-Person\"><a href=\"#定义-Studen-继承自-Person\" class=\"headerlink\" title=\"定义 Studen 继承自 Person\"></a>定义 Studen 继承自 Person</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _weight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> height;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>创建 Student 的实例对象<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span>(<span class=\"params\"><span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]</span>) </span>&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        </div><div class=\"line\">         Student *student = [[Student alloc] init];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">student personInstanceMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">student init</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student studentClassMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student personClassMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student load</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"class-对象的-superclass-指针\"><a href=\"#class-对象的-superclass-指针\" class=\"headerlink\" title=\"class 对象的 superclass 指针\"></a>class 对象的 superclass 指针</h2><h3 id=\"Student-类对象、Person-类对象-和-NSObject-类对象之间的-superclass-关系\"><a href=\"#Student-类对象、Person-类对象-和-NSObject-类对象之间的-superclass-关系\" class=\"headerlink\" title=\"Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系\"></a>Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass03.png\" alt=\"isa和superclass\"></p>\n<p>获取 test_objc_class 类型的 Person 类对象和 Student 类对象：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> mj_objc_class *personClass = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)([<span class=\"type\">Person</span> <span class=\"class\"><span class=\"keyword\">class</span>]);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> mj_objc_class *studentClass = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)([<span class=\"type\">Student</span> <span class=\"class\"><span class=\"keyword\">class</span>]);</span></div></pre></td></tr></table></figure></p>\n<p>打印 personClass、studentClass 和 studentClass-&gt;superclass：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p personClass</div><div class=\"line\">(test_objc_class *) $<span class=\"number\">0</span> = <span class=\"number\">0x00000001000014b8</span></div><div class=\"line\">(lldb) p studentClass</div><div class=\"line\">(test_objc_class *) $<span class=\"number\">1</span> = <span class=\"number\">0x0000000100001508</span></div><div class=\"line\">(lldb) p/x studentClass-&gt;superclass</div><div class=\"line\">(Class) $<span class=\"number\">2</span> = <span class=\"number\">0x00000001000014b8</span> Person</div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Student 类对象的 superclass 指针地址就是 Person 类对象的地址。</p>\n<h3 id=\"Student-的实例对象调用父类-Person-里的对象方法：\"><a href=\"#Student-的实例对象调用父类-Person-里的对象方法：\" class=\"headerlink\" title=\"Student 的实例对象调用父类 Person 里的对象方法：\"></a>Student 的实例对象调用父类 Person 里的对象方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student personInstanceMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>对象方法 -(void)personInstanceMethod 方法保存在 Person 的类对象里，[student personInstanceMethod] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，最后在 Person 类对象里找到了对象方法 -(void)personInstanceMethod。</p>\n<h3 id=\"Student-的实例对象调用父类-NSObject-里的对象方法：\"><a href=\"#Student-的实例对象调用父类-NSObject-里的对象方法：\" class=\"headerlink\" title=\"Student 的实例对象调用父类 NSObject 里的对象方法：\"></a>Student 的实例对象调用父类 NSObject 里的对象方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student init]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>对象方法 -(void)init 方法保存在 NSObject 的类对象里，[student init] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，再通过 Person 类对象里的 superclass 找到 NSObject 的类对象，最后在 NSObject 类对象里找到了对象方法 -(void)init。</p>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>具有继承关系的不同的类之间，是通过 superlass 指针连接的。有了 superlass 指针的连接，子类就实现了调用父类方法的逻辑。</p>\n</li>\n<li><p>当 Student 的 instance 对象要调用 Person 的对象方法时，会先通过 isa 找到 Student 的 class，然后通过 superclass 找到 Person 的 class，最后找到对象方法的实现进行调用。</p>\n</li>\n</ul>\n<h2 id=\"meta-class-对象的-superclass-指针\"><a href=\"#meta-class-对象的-superclass-指针\" class=\"headerlink\" title=\"meta-class 对象的 superclass 指针\"></a>meta-class 对象的 superclass 指针</h2><h3 id=\"Student-元类对象、Person-元类对象-和-NSObject-元类对象之间的-superclass-关系：\"><a href=\"#Student-元类对象、Person-元类对象-和-NSObject-元类对象之间的-superclass-关系：\" class=\"headerlink\" title=\"Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：\"></a>Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass04.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"Student-类对象调用-Student-元类对象里的类方法：\"><a href=\"#Student-类对象调用-Student-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用 Student 元类对象里的类方法：\"></a>Student 类对象调用 Student 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student studentClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，最终在 Student 元类对象里找到类方法 +(void)studentClassMethod。</p>\n<h3 id=\"Student-类对象调用父类-Person-元类对象里的类方法：\"><a href=\"#Student-类对象调用父类-Person-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用父类 Person 元类对象里的类方法：\"></a>Student 类对象调用父类 Person 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student personClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，最终在 Person 元类对象里找到类方法 +(void)personClassMethod。</p>\n<h3 id=\"Student-类对象调用父类-NSObject-元类对象里的类方法：\"><a href=\"#Student-类对象调用父类-NSObject-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用父类 NSObject 元类对象里的类方法：\"></a>Student 类对象调用父类 NSObject 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student load]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，再通过 Person 元类对象里的 superclass 找到 NSObject 元类对象，最终在 NSObject 元类对象里找到类方法 +(void)load。</p>\n<h1 id=\"instance-对象调用对象方法流程\"><a href=\"#instance-对象调用对象方法流程\" class=\"headerlink\" title=\"instance 对象调用对象方法流程\"></a>instance 对象调用对象方法流程</h1><h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass05.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"unrecoginzed-selector-sent-to-instance\"><a href=\"#unrecoginzed-selector-sent-to-instance\" class=\"headerlink\" title=\"unrecoginzed selector sent to instance\"></a>unrecoginzed selector sent to instance</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student unrecoginzedSelector]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向实例对象 student 发送一条 “unrecoginzedSelector” 消息。student 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)unrecoginzedSelector 。如果没有，Student 类对象会通过 superclass 指针找到 Student 父类的类对象，并在父类的类对象里查找对象方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的类对象。以此往复，直找到基类 NSObject 的类对象。如果在 NSObject 的类对象里也没有查找到对象方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to instance’错误。</p>\n<h2 id=\"子类重写父类的对象方法\"><a href=\"#子类重写父类的对象方法\" class=\"headerlink\" title=\"子类重写父类的对象方法\"></a>子类重写父类的对象方法</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test </div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">         Student *student = [[Student alloc] init];</div><div class=\"line\">         </div><div class=\"line\">         [student test];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>向实例对象 student 发送一条 “test” 消息。studnet 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)test，找到后返回，不在查找父类的类对象。</p>\n<h1 id=\"class-对象调用类方法流程\"><a href=\"#class-对象调用类方法流程\" class=\"headerlink\" title=\"class 对象调用类方法流程\"></a>class 对象调用类方法流程</h1><h2 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass06.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"unrecoginzed-selector-sent-to-class\"><a href=\"#unrecoginzed-selector-sent-to-class\" class=\"headerlink\" title=\"unrecoginzed selector sent to class\"></a>unrecoginzed selector sent to class</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student unrecoginzedSelector]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 Student 发送一条 “unrecoginzedSelector” 消息。Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 -(void)unrecoginzedSelector 。如果没有，Student 元类对象会通过 superclass 指针找到 Student 父类的元类对象，并在父类的元类对象里查找类方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的元类对象。以此往复，直找到基类 NSObject 的元类对象。如果在 NSObject 的元类对象里也没有查找到类方法 -(void)unrecoginzedSelector，就会通过 superclass 指针找到 NSObject 的类对象，如果在 NSObject 的类对象里也没找到类方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to class’错误。</p>\n<h2 id=\"子类重写父类的类方法\"><a href=\"#子类重写父类的类方法\" class=\"headerlink\" title=\"子类重写父类的类方法\"></a>子类重写父类的类方法</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject &lt;NSCopying&gt;</div><div class=\"line\">+ (void)test;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\">+ (void)test </div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Student </span>: Person &lt;NSCoding&gt;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Student</div><div class=\"line\">+ (void)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    <span class=\"variable\">@autoreleasepool</span> &#123;</div><div class=\"line\">         </div><div class=\"line\">         <span class=\"selector-attr\">[Student test]</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>向类对象 Student 发送一条 “test” Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 +(void)test，找到后返回，不在查找父类的元类对象。</p>\n<h1 id=\"class-对象调用对象方法流程\"><a href=\"#class-对象调用对象方法流程\" class=\"headerlink\" title=\"class 对象调用对象方法流程\"></a>class 对象调用对象方法流程</h1><h2 id=\"定义-NSObject-test\"><a href=\"#定义-NSObject-test\" class=\"headerlink\" title=\"定义 NSObject+test\"></a>定义 NSObject+test</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"-[NSObject test] - %p\"</span>, <span class=\"keyword\">self</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"[Person class] - %p\"</span>, [Person <span class=\"keyword\">class</span>]);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"[NSObject class] - %p\"</span>, [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]);</div><div class=\"line\">        </div><div class=\"line\">        [Person test];</div><div class=\"line\">        [<span class=\"built_in\">NSObject</span> test];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印结果：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Person class] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[NSObject class] - <span class=\"number\">0x7fffaa791140</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x7fffaa791140</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Person-test\"><a href=\"#Person-test\" class=\"headerlink\" title=\"[Person test]\"></a>[Person test]</h2><h3 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass07.png\" alt=\"isa和superclass\"></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//打印结果：[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[Person <span class=\"keyword\">test</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 Person 发送一条 “test” 消息。Person 通过 isa 指针找到 Person 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，Person 元类对象会通过 superclass 指针找到 NSObject 的元类对象，并在 NSObject 的元类对象里查找类方法 +(void)test。如果还是没有找到，再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  </p>\n<p>NSObject+test 里打印的 self，是 objc_msgSend() 里的对象，即接收‘test’消息的对象。[Person test] 中，因为是想 Person 发送了一条‘test’消息，所以打印的 self 是 Person 的类对象。</p>\n<h3 id=\"void-test-与-void-test-同时存在\"><a href=\"#void-test-与-void-test-同时存在\" class=\"headerlink\" title=\"+ (void)test 与 - (void)test 同时存在\"></a>+ (void)test 与 - (void)test 同时存在</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> NSObject (Test)</div><div class=\"line\">+ (void)test;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> NSObject (Test)</div><div class=\"line\">+ (void)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"+[NSObject test] - %p\"</span>, self);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">-</span> (void)<span class=\"selector-tag\">test</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"-[NSObject test] - %p\"</span>, self);</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>此时 [Person test] 调用的就是类方法 + (void)test 了。因为 + (void)test 存储在 NSObject 元类对象里，而 - (void)test 存储在 NSObject 类对象里。查找类方法 + (void)test 时，会优先找到 NSObject 源对象，在元类对象里找到类方法 + (void)test 后返回，不再到类对象里找了。</p>\n<h2 id=\"NSObject-test\"><a href=\"#NSObject-test\" class=\"headerlink\" title=\"[NSObject test]\"></a>[NSObject test]</h2><h3 id=\"流程图-3\"><a href=\"#流程图-3\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass08.png\" alt=\"isa和superclass\"></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//打印结果：[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x7fffaa791140</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 NSObject 发送一条 “test” 消息。NSObject 通过 isa 指针找到 NSObject 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，NSObject 元类对象再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  </p>\n<h2 id=\"class-对象调用对象方法的可能性\"><a href=\"#class-对象调用对象方法的可能性\" class=\"headerlink\" title=\"class 对象调用对象方法的可能性\"></a>class 对象调用对象方法的可能性</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Person test]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上面👆这句代码的本质是：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"name\">objc_getClass</span>(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"test\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>向类对象 Person 发送一条 “test” 消息，这条消息里并没有包含方法的类型，即不区分类方法和对象方法。</p>\n<h1 id=\"窥探-struct-objc-class-的结构\"><a href=\"#窥探-struct-objc-class-的结构\" class=\"headerlink\" title=\"窥探 struct objc_class 的结构\"></a>窥探 struct objc_class 的结构</h1><h2 id=\"废弃的-struct-objc-class\"><a href=\"#废弃的-struct-objc-class\" class=\"headerlink\" title=\"废弃的 struct objc_class\"></a>废弃的 struct objc_class</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class personClass</span> = [Person class];</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">Class personMetaClass</span> = object_getClass(personClass);</div></pre></td></tr></table></figure>\n<p>在上面👆类对象的 isa 处提到过，类对象和元类对象的类型 Class 是一个指向结构体 objc_class 的指针：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> *<span class=\"title\">Class</span>;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass12.png\" alt=\"isa和superclass\"></p>\n<p>Jump TO Definition -&gt; objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !__OBJC2__</span></div><div class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure></p>\n<p>代码中包含以下代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !__OBJC2__</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\">OBJC2_UNAVAILABLE</div></pre></td></tr></table></figure></p>\n<p>说明，结构体 struct objc_class 在 <strong>OBJC2</strong> 里被废弃掉了。</p>\n<h2 id=\"新版-struct-objc-class\"><a href=\"#新版-struct-objc-class\" class=\"headerlink\" title=\"新版 struct objc_class\"></a>新版 struct objc_class</h2><p>可以在 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a> 找到最新的源码，打开 objc-runtime-new.h :</p>\n<p>objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> :</span> objc_object &#123;</div><div class=\"line\">    <span class=\"comment\">// Class ISA;</span></div><div class=\"line\">    Class superclass;</div><div class=\"line\">    <span class=\"keyword\">cache_t</span> cache;             <span class=\"comment\">// 方法缓存</span></div><div class=\"line\">    <span class=\"keyword\">class_data_bits_t</span> bits;    <span class=\"comment\">// 用于获取具体的类信息</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_t</span> *data() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bits.data();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(<span class=\"keyword\">class_rw_t</span> *newData)</span> </span>&#123;</div><div class=\"line\">        bits.setData(newData);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ... 一堆方法</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>objc_object：<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_object</span> </span>&#123;</div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_rw_ext_t、class_rw_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_rw_ext_t</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro;</div><div class=\"line\">    <span class=\"keyword\">method_array_t</span> methods; <span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">property_array_t</span> properties; <span class=\"comment\">//属性列表</span></div><div class=\"line\">    <span class=\"keyword\">protocol_array_t</span> protocols; <span class=\"comment\">//协议列表</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *demangledName;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> version;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_rw_t</span> &#123;</span></div><div class=\"line\">    <span class=\"comment\">// Be warned that Symbolication knows the layout of this structure.</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">    <span class=\"keyword\">uint16_t</span> witness;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SUPPORT_INDEXED_ISA</span></div><div class=\"line\">    <span class=\"keyword\">uint16_t</span> index;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    explicit_atomic&lt;<span class=\"keyword\">uintptr_t</span>&gt; ro_or_rw_ext;</div><div class=\"line\"></div><div class=\"line\">    Class firstSubclass;</div><div class=\"line\">    Class nextSiblingClass;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">ro_or_rw_ext_t</span> = objc::PointerUnion&lt;<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *, <span class=\"keyword\">class_rw_ext_t</span> *&gt;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> ro_or_rw_ext_t <span class=\"title\">get_ro_or_rwe</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;ro_or_rw_ext&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_ro_or_rwe</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;ro&#125;.storeAt(ro_or_rw_ext, memory_order_relaxed);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_ro_or_rwe</span><span class=\"params\">(<span class=\"keyword\">class_rw_ext_t</span> *rwe, <span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// the release barrier is so that the class_rw_ext_t::ro initialization</span></div><div class=\"line\">        <span class=\"comment\">// is visible to lockless readers</span></div><div class=\"line\">        rwe-&gt;ro = ro;</div><div class=\"line\">        <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;rwe&#125;.storeAt(ro_or_rw_ext, memory_order_release);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_ext_t</span> *extAlloc(<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro, <span class=\"keyword\">bool</span> deep = <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFlags</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> <span class=\"built_in\">set</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        __c11_atomic_fetch_or((_Atomic(<span class=\"keyword\">uint32_t</span>) *)&amp;flags, <span class=\"built_in\">set</span>, __ATOMIC_RELAXED);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ... 一堆方法</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_rw_t 可以翻译为 class_readWrite_table，即读写表。在 objc4 的旧版本里，class_rw_ext_t 里的成员变量是直接定义在 class_rw_t 里的。</p>\n<p>class_ro_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_ro_t</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> instanceStart;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> instanceSize; <span class=\"comment\">// instance 对象占用的内存空间</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> reserved;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * ivarLayout;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * name; <span class=\"comment\">//类名</span></div><div class=\"line\">    <span class=\"keyword\">method_list_t</span> * baseMethodList; <span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">protocol_list_t</span> * baseProtocols; <span class=\"comment\">//协议列表</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">ivar_list_t</span> * ivars; <span class=\"comment\">//成员变量列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * weakIvarLayout;</div><div class=\"line\">    <span class=\"keyword\">property_list_t</span> *baseProperties; <span class=\"comment\">//属性列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This field exists only when RO_HAS_SWIFT_INITIALIZER is set.</span></div><div class=\"line\">    _objc_swiftMetadataInitializer __ptrauth_objc_method_list_imp _swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">    _<span class=\"function\">objc_swiftMetadataInitializer <span class=\"title\">swiftMetadataInitializer</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">method_list_t</span> *baseMethods() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baseMethodList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_ro_t</span> *duplicate() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</div><div class=\"line\">            <span class=\"keyword\">size_t</span> size = <span class=\"keyword\">sizeof</span>(*<span class=\"keyword\">this</span>) + <span class=\"keyword\">sizeof</span>(_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">class_ro_t</span> *ro = (<span class=\"keyword\">class_ro_t</span> *)memdup(<span class=\"keyword\">this</span>, size);</div><div class=\"line\">            ro-&gt;_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>] = <span class=\"keyword\">this</span>-&gt;_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">return</span> ro;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">size_t</span> size = <span class=\"keyword\">sizeof</span>(*<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">class_ro_t</span> *ro = (<span class=\"keyword\">class_ro_t</span> *)memdup(<span class=\"keyword\">this</span>, size);</div><div class=\"line\">            <span class=\"keyword\">return</span> ro;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_ro_t 可以翻译为 class_readOnly_table，即只读表。</p>\n<p>class_data_bits_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_data_bits_t</span> &#123;</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_t</span>* data() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">class_rw_t</span> *)(bits &amp; FAST_DATA_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div></pre></td></tr></table></figure></p>\n<p>class_data_bits_t 内部通过 bits &amp; FAST_DATA_MASK 找到 class_rw_t。</p>\n<p>objc_class、class_rw_t 和 class_ro_t 之间的关系可以简化为：<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass11.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"查看-objc-class-对象的真实结构\"><a href=\"#查看-objc-class-对象的真实结构\" class=\"headerlink\" title=\"查看 objc_class 对象的真实结构\"></a>查看 objc_class 对象的真实结构</h2><p>导入 MJClassInfo.h，定义 MJPerson、MJStudent：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"MJClassInfo.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// MJPerson</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MJPerson</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> no;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)personInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)personClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MJPerson</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)personInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)personClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// MJStudent</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MJStudent</span> : <span class=\"title\">MJPerson</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _weight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> height;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MJStudent</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJStudent *stu = [[MJStudent alloc] init];</div><div class=\"line\">        stu-&gt;_weight = <span class=\"number\">10</span>;</div><div class=\"line\">        </div><div class=\"line\">        mj_objc_class *studentClass = (__bridge mj_objc_class *)([MJStudent <span class=\"keyword\">class</span>]);</div><div class=\"line\">        mj_objc_class *personClass = (__bridge mj_objc_class *)([MJPerson <span class=\"keyword\">class</span>]);</div><div class=\"line\">        </div><div class=\"line\">        class_rw_t *studentClassData = studentClass-&gt;data();</div><div class=\"line\">        class_rw_t *personClassData = personClass-&gt;data();</div><div class=\"line\">        </div><div class=\"line\">        class_rw_t *studentMetaClassData = studentClass-&gt;metaClass()-&gt;data();</div><div class=\"line\">        class_rw_t *personMetaClassData = personClass-&gt;metaClass()-&gt;data();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1111\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加断点后，可以在控制栏里看到每个类内部的具体信息了。</p>\n<p>studentClassData:<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass13.png\" alt=\"isa和superclass\"></p>\n<p>可以看到 Student 的类对象里存储了属性、对象方法、协议、成员变量信息。</p>\n<p>studentMetaClassData:<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass14.png\" alt=\"isa和superclass\"></p>\n<p>可以看到 Student 的元类对象里存储了类方法、协议。属性、成员变量信息都为 NULL。  </p>\n<p>元类对象中存储的协议信息与类对象中存储的协议信息地址相同，所以是同一份。如何确定协议信息是存储在类对象中还是元类对象中呢？还是两个都存储了？ </p>\n<h2 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>OC 的类信息存放在哪里？<br>对象方法、属性、成员变量、协议信息，存放在 class 对象中；<br>类方法，存放在 meta-class 对象中；<br>成员变量的具体值，存放在 instance 对象；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass01.png\" alt=\"isa和superclass\"></p>","more":"<ul>\n<li>instance 的 isa 指向 class</li>\n<li>class 的 isa 指向 meta-class</li>\n<li>meta-class 的 isa 指向基类的 meta-class</li>\n<li>class 的 superclass 指向父类的 class，如果没有父类，superclass 指针为nil</li>\n<li>meta-class 的 superclass 指向父类的 meta-class，基类的 meta-class 的 superclass 指向基类的 class</li>\n<li>instance 调用对象方法的轨迹：isa 找到 class，方法不存在，就通过 superclass 找父类</li>\n<li>class 调用类方法的轨迹：isa 找 meta-class，方法不存在，就通过 superclass 找父类</li>\n</ul>\n<h1 id=\"isa\"><a href=\"#isa\" class=\"headerlink\" title=\"isa\"></a>isa</h1><ul>\n<li>思考：对象的 isa 指针指向哪里？</li>\n</ul>\n<h2 id=\"instance-对象、class-对象-和-meta-class-对象之间的-isa-关系\"><a href=\"#instance-对象、class-对象-和-meta-class-对象之间的-isa-关系\" class=\"headerlink\" title=\"instance 对象、class 对象 和 meta-class 对象之间的 isa 关系\"></a>instance 对象、class 对象 和 meta-class 对象之间的 isa 关系</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass02.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"定义-Person\"><a href=\"#定义-Person\" class=\"headerlink\" title=\"定义 Person\"></a>定义 Person</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject &lt;NSCopying&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"variable\">@public</span></div><div class=\"line\">    int _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@property</span> (nonatomic, assign) int no;</div><div class=\"line\"><span class=\"selector-tag\">-</span> (void)<span class=\"selector-tag\">personInstanceMethod</span>;</div><div class=\"line\">+ (void)<span class=\"selector-tag\">personClassMethod</span>;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div><div class=\"line\"></div><div class=\"line\">@<span class=\"selector-tag\">implementation</span> <span class=\"selector-tag\">Person</span></div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>创建 Person 的实例对象<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span>(<span class=\"params\"><span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]</span>) </span>&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        </div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        person-&gt;_age = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        [<span class=\"meta\">person personInstanceMethod</span>];</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"meta\">Person personClassMethod</span>];</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将-OC-代码转换为-C-C-代码\"><a href=\"#将-OC-代码转换为-C-C-代码\" class=\"headerlink\" title=\"将 OC 代码转换为 C\\C++ 代码\"></a>将 OC 代码转换为 C\\C++ 代码</h3><p>找到 main.m 所在文件，在终端输入：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xcrun -sdk iphoneos clang -arch arm64  -rewrite-objc main.m</span></div></pre></td></tr></table></figure></p>\n<p>没有通过 ‘-o’ 生成指定文件时，默认生成 main.cpp 文件，打开 main.cpp 文件。找到 main 函数：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main(<span class=\"name\">int</span> argc, const char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\"></div><div class=\"line\">        Person *person = ((<span class=\"name\">Person</span> *(*)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)((Person *(<span class=\"name\">*</span>)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"alloc\")), sel_registerName(\"init\"));</div><div class=\"line\"></div><div class=\"line\">        (*(<span class=\"name\">int</span> *)((char *)person + OBJC_IVAR_$_Person$_age)) = <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">        ((<span class=\"name\">void</span> (<span class=\"name\">*</span>)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)person, sel_registerName(\"personInstanceMethod\"));</div><div class=\"line\"></div><div class=\"line\">        ((void (*)(<span class=\"name\">id</span>, SEL))(<span class=\"name\">void</span> *)objc_msgSend)((id)objc_getClass(\"Person\"), sel_registerName(\"personClassMethod\"));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>找到 objc_msgSend：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)person, sel_registerName(<span class=\"string\">\"personInstanceMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\">((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)objc_getClass(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"personClassMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化后：</span></div><div class=\"line\">objc_msgSend(person, sel_registerName(<span class=\"string\">\"personInstanceMethod\"</span>));</div><div class=\"line\"></div><div class=\"line\">objc_msgSend(objc_getClass(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"personClassMethod\"</span>));</div></pre></td></tr></table></figure></p>\n<p>[person personInstanceMethod] 的具体实现是 objc_msgSend(person, sel_registerName(“personInstanceMethod”))。<br>即在实例对象 person 调用 -(void)personInstanceMethod 对象方法的时候，向实例对象 person 发送一条 “personInstanceMethod” 消息。  </p>\n<p>[Person personClassMethod] 的具体实现是 objc_msgSend(objc_getClass(“Person”), sel_registerName(“personClassMethod”))。<br>即在类对象 Person 调用 +(void)personClassMethod 类方法的时候，向类对象 Person 发送一条 “personClassMethod” 消息。  </p>\n<h3 id=\"方法调用与对象的关系\"><a href=\"#方法调用与对象的关系\" class=\"headerlink\" title=\"方法调用与对象的关系\"></a>方法调用与对象的关系</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[person personInstanceMethod]</span><span class=\"comment\">;</span></div><div class=\"line\"><span class=\"section\">[Person personClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上面👆两个方法调用表现出来的是，实例对象 person 可以调用存在 Person 类对象里的对象方法， Person 类对象可以调用存储在 Person 元类对象里的类方法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>instance 对象的 isa 指针指向 class 对象。当调用对象方法时，通过 instance 对象的 isa 指针找到 class 对象，最后找到对象方法的实现进行调用。</p>\n</li>\n<li><p>class 对象的 isa 指针指向 meta-class 对象。当调用类方法时，通过 class 对象的 isa 指针找到 meta-class对象，最后找到类方法的实现进行调用。</p>\n</li>\n</ul>\n<h2 id=\"ISA-MASK\"><a href=\"#ISA-MASK\" class=\"headerlink\" title=\"ISA_MASK\"></a>ISA_MASK</h2><!-- ![isa和superclass](isa和superclass/isa和superclass10.png) -->\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        Person *person = [[Person alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        Class personClass = [Person <span class=\"keyword\">class</span>];</div><div class=\"line\"></div><div class=\"line\">        Class personMetaClass = object_getClass(personClass);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%p %p %p\"</span>, person, personClass, personMetaClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实例对象的-isa-指针\"><a href=\"#实例对象的-isa-指针\" class=\"headerlink\" title=\"实例对象的 isa 指针\"></a>实例对象的 isa 指针</h3><p>打印 Person-&gt;isa、personClass：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x (long)person-&gt;isa <span class=\"comment\">//指针地址格式设置16进制</span></div><div class=\"line\">(long) $<span class=\"number\">2</span> = <span class=\"number\">0x001d8001000014f1</span></div><div class=\"line\">(lldb) p/x personClass</div><div class=\"line\">(Class) $<span class=\"number\">3</span> = <span class=\"number\">0x00000001000014f0</span> Person</div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看到，Person 的类对象地址是 0x00000001000014f0，而 Person 的实例对象的 isa 指针的地址是 0x001d8001000014f1。</p>\n<p>在 64bit 之前 isa 指针的地址等于被指向对象的地址。从 64bit 开始，isa 需要进行一次位运算，才能计算出真实地址：<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass09.png\" alt=\"isa和superclass\"></p>\n<p>ISA_MASK 在源码 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a> 中的定义：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># if __arm64__</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MASK        0x0000000ffffffff8ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_MASK  0x000003f000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_VALUE 0x000001a000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_BITFIELD                                                      \\</span></div><div class=\"line\">      uintptr_t nonpointer        : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_assoc         : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_cxx_dtor      : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">shiftcls </span>         : <span class=\"number\">33</span><span class=\"comment\">; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \\</span></div><div class=\"line\">      uintptr_t magic             : <span class=\"number\">6</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t weakly_referenced : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t deallocating      : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t has_sidetable_rc  : <span class=\"number\">1</span><span class=\"comment\">;                                       \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">extra_rc </span>         : <span class=\"number\">19</span></div><div class=\"line\"><span class=\"comment\">#   define RC_ONE   (1ULL&lt;&lt;45)</span></div><div class=\"line\"><span class=\"comment\">#   define RC_HALF  (1ULL&lt;&lt;18)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># elif __x86_64__</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MASK        0x00007ffffffffff8ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_MASK  0x001f800000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_MAGIC_VALUE 0x001d800000000001ULL</span></div><div class=\"line\"><span class=\"comment\">#   define ISA_BITFIELD                                                        \\</span></div><div class=\"line\">      uintptr_t nonpointer        : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_assoc         : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_cxx_dtor      : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">shiftcls </span>         : <span class=\"number\">44</span><span class=\"comment\">; /*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/ \\</span></div><div class=\"line\">      uintptr_t magic             : <span class=\"number\">6</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t weakly_referenced : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t deallocating      : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t has_sidetable_rc  : <span class=\"number\">1</span><span class=\"comment\">;                                         \\</span></div><div class=\"line\">      uintptr_t <span class=\"keyword\">extra_rc </span>         : <span class=\"number\">8</span></div><div class=\"line\"><span class=\"comment\">#   define RC_ONE   (1ULL&lt;&lt;56)</span></div><div class=\"line\"><span class=\"comment\">#   define RC_HALF  (1ULL&lt;&lt;7)</span></div></pre></td></tr></table></figure></p>\n<p>iPhoneOS 是 <strong>arm64</strong> 架构，ISA_MASK：0x0000000ffffffff8。<br>MacOS 是 <strong>x86_64</strong> 架构，ISA_MASK：0x00007ffffffffff8ULL。  </p>\n<p>打印 person-&gt;isa &amp; ISA_MASK<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x <span class=\"number\">0x001d8001000014f1</span> &amp; <span class=\"number\">0x00007ffffffffff8</span></div><div class=\"line\">(long) $<span class=\"number\">4</span> = <span class=\"number\">0x00000001000014f0</span></div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Person 实例对象的 isa 指针 &amp; ISA_MASK 就是 Person 类对象的地址。</p>\n<h3 id=\"类对象的-isa-指针\"><a href=\"#类对象的-isa-指针\" class=\"headerlink\" title=\"类对象的 isa 指针\"></a>类对象的 isa 指针</h3><p>类对象的类型 Class 是一个指向结构体 objc_class 的指针：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> *<span class=\"title\">Class</span>;</span></div></pre></td></tr></table></figure></p>\n<p>Jump TO Definition -&gt; objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !__OBJC2__</span></div><div class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure></p>\n<p>👆objc_class 的 isa 是不支持外部访问的，所以 personClass-&gt;isa 获取不到 isa 指针地址，所以要自定义一个结构体：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct test_objc_class &#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">isa</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">superclass</span>;</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>将 personClass 的类型强转为 test_objc_class 类型：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Class</span> personClass = [<span class=\"type\">Person</span> <span class=\"class\"><span class=\"keyword\">class</span>];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> test_objc_class *personClass2 = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)(personClass);</div></pre></td></tr></table></figure></p>\n<p>因为 personClass 是 OC 对象，所以需要桥接 (__bridge struct test_objc_class *)。  </p>\n<p>打印 personClass2-&gt;isa、personMetaClass 和 personClass2-&gt;isa &amp; ISA_MASK：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p/x personClass2-&gt;isa</div><div class=\"line\">(Class) $<span class=\"number\">5</span> = <span class=\"number\">0x001d8001000014c9</span></div><div class=\"line\">(lldb) p/x personMetaClass</div><div class=\"line\">(Class) $<span class=\"number\">6</span> = <span class=\"number\">0x00000001000014c8</span></div><div class=\"line\">(lldb) p/x <span class=\"number\">0x001d8001000014c9</span> &amp; <span class=\"number\">0x00007ffffffffff8</span></div><div class=\"line\">(long) $<span class=\"number\">7</span> = <span class=\"number\">0x00000001000014c8</span></div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Person 类对象的 isa 指针 &amp; ISA_MASK 就是 Person 元类对象的地址。</p>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>对象的 isa 指针指向哪里？<br>instance 对象的 isa 指向 class 对象<br>class 对象的 isa 指向 meta-class 对象<br>meta-class 对象的 isa 指向基类的 meta-class 对象</li>\n</ul>\n<h1 id=\"superclass\"><a href=\"#superclass\" class=\"headerlink\" title=\"superclass\"></a>superclass</h1><h2 id=\"定义-Studen-继承自-Person\"><a href=\"#定义-Studen-继承自-Person\" class=\"headerlink\" title=\"定义 Studen 继承自 Person\"></a>定义 Studen 继承自 Person</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _weight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> height;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>创建 Student 的实例对象<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span>(<span class=\"params\"><span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]</span>) </span>&#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        </div><div class=\"line\">         Student *student = [[Student alloc] init];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">student personInstanceMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">student init</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student studentClassMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student personClassMethod</span>];</div><div class=\"line\">         </div><div class=\"line\">         [<span class=\"meta\">Student load</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"class-对象的-superclass-指针\"><a href=\"#class-对象的-superclass-指针\" class=\"headerlink\" title=\"class 对象的 superclass 指针\"></a>class 对象的 superclass 指针</h2><h3 id=\"Student-类对象、Person-类对象-和-NSObject-类对象之间的-superclass-关系\"><a href=\"#Student-类对象、Person-类对象-和-NSObject-类对象之间的-superclass-关系\" class=\"headerlink\" title=\"Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系\"></a>Student 类对象、Person 类对象 和 NSObject 类对象之间的 superclass 关系</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass03.png\" alt=\"isa和superclass\"></p>\n<p>获取 test_objc_class 类型的 Person 类对象和 Student 类对象：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> mj_objc_class *personClass = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)([<span class=\"type\">Person</span> <span class=\"class\"><span class=\"keyword\">class</span>]);</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> mj_objc_class *studentClass = (__bridge <span class=\"keyword\">struct</span> test_objc_class *)([<span class=\"type\">Student</span> <span class=\"class\"><span class=\"keyword\">class</span>]);</span></div></pre></td></tr></table></figure></p>\n<p>打印 personClass、studentClass 和 studentClass-&gt;superclass：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) p personClass</div><div class=\"line\">(test_objc_class *) $<span class=\"number\">0</span> = <span class=\"number\">0x00000001000014b8</span></div><div class=\"line\">(lldb) p studentClass</div><div class=\"line\">(test_objc_class *) $<span class=\"number\">1</span> = <span class=\"number\">0x0000000100001508</span></div><div class=\"line\">(lldb) p/x studentClass-&gt;superclass</div><div class=\"line\">(Class) $<span class=\"number\">2</span> = <span class=\"number\">0x00000001000014b8</span> Person</div></pre></td></tr></table></figure></p>\n<p>上面👆的打印结果可以看出，Student 类对象的 superclass 指针地址就是 Person 类对象的地址。</p>\n<h3 id=\"Student-的实例对象调用父类-Person-里的对象方法：\"><a href=\"#Student-的实例对象调用父类-Person-里的对象方法：\" class=\"headerlink\" title=\"Student 的实例对象调用父类 Person 里的对象方法：\"></a>Student 的实例对象调用父类 Person 里的对象方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student personInstanceMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>对象方法 -(void)personInstanceMethod 方法保存在 Person 的类对象里，[student personInstanceMethod] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，最后在 Person 类对象里找到了对象方法 -(void)personInstanceMethod。</p>\n<h3 id=\"Student-的实例对象调用父类-NSObject-里的对象方法：\"><a href=\"#Student-的实例对象调用父类-NSObject-里的对象方法：\" class=\"headerlink\" title=\"Student 的实例对象调用父类 NSObject 里的对象方法：\"></a>Student 的实例对象调用父类 NSObject 里的对象方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student init]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>对象方法 -(void)init 方法保存在 NSObject 的类对象里，[student init] 首先通过 student 的 isa 指针找到 Student 的类对象，再通过 Student 类对象里的 superclass 找到 Person 的类对象，再通过 Person 类对象里的 superclass 找到 NSObject 的类对象，最后在 NSObject 类对象里找到了对象方法 -(void)init。</p>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>具有继承关系的不同的类之间，是通过 superlass 指针连接的。有了 superlass 指针的连接，子类就实现了调用父类方法的逻辑。</p>\n</li>\n<li><p>当 Student 的 instance 对象要调用 Person 的对象方法时，会先通过 isa 找到 Student 的 class，然后通过 superclass 找到 Person 的 class，最后找到对象方法的实现进行调用。</p>\n</li>\n</ul>\n<h2 id=\"meta-class-对象的-superclass-指针\"><a href=\"#meta-class-对象的-superclass-指针\" class=\"headerlink\" title=\"meta-class 对象的 superclass 指针\"></a>meta-class 对象的 superclass 指针</h2><h3 id=\"Student-元类对象、Person-元类对象-和-NSObject-元类对象之间的-superclass-关系：\"><a href=\"#Student-元类对象、Person-元类对象-和-NSObject-元类对象之间的-superclass-关系：\" class=\"headerlink\" title=\"Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：\"></a>Student 元类对象、Person 元类对象 和 NSObject 元类对象之间的 superclass 关系：</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass04.png\" alt=\"isa和superclass\"></p>\n<h3 id=\"Student-类对象调用-Student-元类对象里的类方法：\"><a href=\"#Student-类对象调用-Student-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用 Student 元类对象里的类方法：\"></a>Student 类对象调用 Student 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student studentClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，最终在 Student 元类对象里找到类方法 +(void)studentClassMethod。</p>\n<h3 id=\"Student-类对象调用父类-Person-元类对象里的类方法：\"><a href=\"#Student-类对象调用父类-Person-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用父类 Person 元类对象里的类方法：\"></a>Student 类对象调用父类 Person 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student personClassMethod]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，最终在 Person 元类对象里找到类方法 +(void)personClassMethod。</p>\n<h3 id=\"Student-类对象调用父类-NSObject-元类对象里的类方法：\"><a href=\"#Student-类对象调用父类-NSObject-元类对象里的类方法：\" class=\"headerlink\" title=\"Student 类对象调用父类 NSObject 元类对象里的类方法：\"></a>Student 类对象调用父类 NSObject 元类对象里的类方法：</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student load]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>首先通过 Student 类对象里的 isa 指针找到 Student 元类对象，再通过 Student 元类对象里的 superclass 找到 Person 元类对象，再通过 Person 元类对象里的 superclass 找到 NSObject 元类对象，最终在 NSObject 元类对象里找到类方法 +(void)load。</p>\n<h1 id=\"instance-对象调用对象方法流程\"><a href=\"#instance-对象调用对象方法流程\" class=\"headerlink\" title=\"instance 对象调用对象方法流程\"></a>instance 对象调用对象方法流程</h1><h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass05.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"unrecoginzed-selector-sent-to-instance\"><a href=\"#unrecoginzed-selector-sent-to-instance\" class=\"headerlink\" title=\"unrecoginzed selector sent to instance\"></a>unrecoginzed selector sent to instance</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[student unrecoginzedSelector]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向实例对象 student 发送一条 “unrecoginzedSelector” 消息。student 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)unrecoginzedSelector 。如果没有，Student 类对象会通过 superclass 指针找到 Student 父类的类对象，并在父类的类对象里查找对象方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的类对象。以此往复，直找到基类 NSObject 的类对象。如果在 NSObject 的类对象里也没有查找到对象方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to instance’错误。</p>\n<h2 id=\"子类重写父类的对象方法\"><a href=\"#子类重写父类的对象方法\" class=\"headerlink\" title=\"子类重写父类的对象方法\"></a>子类重写父类的对象方法</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test </div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">         Student *student = [[Student alloc] init];</div><div class=\"line\">         </div><div class=\"line\">         [student test];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>向实例对象 student 发送一条 “test” 消息。studnet 通过 isa 指针找到 Student 类对象，在类对象里查找对象方法 -(void)test，找到后返回，不在查找父类的类对象。</p>\n<h1 id=\"class-对象调用类方法流程\"><a href=\"#class-对象调用类方法流程\" class=\"headerlink\" title=\"class 对象调用类方法流程\"></a>class 对象调用类方法流程</h1><h2 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass06.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"unrecoginzed-selector-sent-to-class\"><a href=\"#unrecoginzed-selector-sent-to-class\" class=\"headerlink\" title=\"unrecoginzed selector sent to class\"></a>unrecoginzed selector sent to class</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Student unrecoginzedSelector]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 Student 发送一条 “unrecoginzedSelector” 消息。Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 -(void)unrecoginzedSelector 。如果没有，Student 元类对象会通过 superclass 指针找到 Student 父类的元类对象，并在父类的元类对象里查找类方法 -(void)unrecoginzedSelector。如果还是没有找到，再通过 superclass 查找父类的元类对象。以此往复，直找到基类 NSObject 的元类对象。如果在 NSObject 的元类对象里也没有查找到类方法 -(void)unrecoginzedSelector，就会通过 superclass 指针找到 NSObject 的类对象，如果在 NSObject 的类对象里也没找到类方法 -(void)unrecoginzedSelector，就会返回出现‘unrecoginzed selector sent to class’错误。</p>\n<h2 id=\"子类重写父类的类方法\"><a href=\"#子类重写父类的类方法\" class=\"headerlink\" title=\"子类重写父类的类方法\"></a>子类重写父类的类方法</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Person </span>: NSObject &lt;NSCopying&gt;</div><div class=\"line\">+ (void)test;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Person</div><div class=\"line\">+ (void)test </div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@interface</span> <span class=\"attribute\">Student </span>: Person &lt;NSCoding&gt;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> Student</div><div class=\"line\">+ (void)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">    <span class=\"variable\">@autoreleasepool</span> &#123;</div><div class=\"line\">         </div><div class=\"line\">         <span class=\"selector-attr\">[Student test]</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>向类对象 Student 发送一条 “test” Student 通过 isa 指针找到 Student 元类对象，在元类对象里查找类方法 +(void)test，找到后返回，不在查找父类的元类对象。</p>\n<h1 id=\"class-对象调用对象方法流程\"><a href=\"#class-对象调用对象方法流程\" class=\"headerlink\" title=\"class 对象调用对象方法流程\"></a>class 对象调用对象方法流程</h1><h2 id=\"定义-NSObject-test\"><a href=\"#定义-NSObject-test\" class=\"headerlink\" title=\"定义 NSObject+test\"></a>定义 NSObject+test</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)test;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Test</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"-[NSObject test] - %p\"</span>, <span class=\"keyword\">self</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"[Person class] - %p\"</span>, [Person <span class=\"keyword\">class</span>]);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"[NSObject class] - %p\"</span>, [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]);</div><div class=\"line\">        </div><div class=\"line\">        [Person test];</div><div class=\"line\">        [<span class=\"built_in\">NSObject</span> test];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印结果：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Person class] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[NSObject class] - <span class=\"number\">0x7fffaa791140</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x7fffaa791140</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Person-test\"><a href=\"#Person-test\" class=\"headerlink\" title=\"[Person test]\"></a>[Person test]</h2><h3 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass07.png\" alt=\"isa和superclass\"></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//打印结果：[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x1000011e0</span></div><div class=\"line\">[Person <span class=\"keyword\">test</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 Person 发送一条 “test” 消息。Person 通过 isa 指针找到 Person 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，Person 元类对象会通过 superclass 指针找到 NSObject 的元类对象，并在 NSObject 的元类对象里查找类方法 +(void)test。如果还是没有找到，再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  </p>\n<p>NSObject+test 里打印的 self，是 objc_msgSend() 里的对象，即接收‘test’消息的对象。[Person test] 中，因为是想 Person 发送了一条‘test’消息，所以打印的 self 是 Person 的类对象。</p>\n<h3 id=\"void-test-与-void-test-同时存在\"><a href=\"#void-test-与-void-test-同时存在\" class=\"headerlink\" title=\"+ (void)test 与 - (void)test 同时存在\"></a>+ (void)test 与 - (void)test 同时存在</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@interface</span> NSObject (Test)</div><div class=\"line\">+ (void)test;</div><div class=\"line\"><span class=\"variable\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">@implementation</span> NSObject (Test)</div><div class=\"line\">+ (void)test</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"+[NSObject test] - %p\"</span>, self);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">-</span> (void)<span class=\"selector-tag\">test</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"-[NSObject test] - %p\"</span>, self);</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"selector-tag\">end</span></div></pre></td></tr></table></figure>\n<p>此时 [Person test] 调用的就是类方法 + (void)test 了。因为 + (void)test 存储在 NSObject 元类对象里，而 - (void)test 存储在 NSObject 类对象里。查找类方法 + (void)test 时，会优先找到 NSObject 源对象，在元类对象里找到类方法 + (void)test 后返回，不再到类对象里找了。</p>\n<h2 id=\"NSObject-test\"><a href=\"#NSObject-test\" class=\"headerlink\" title=\"[NSObject test]\"></a>[NSObject test]</h2><h3 id=\"流程图-3\"><a href=\"#流程图-3\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass08.png\" alt=\"isa和superclass\"></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//打印结果：[NSObject <span class=\"keyword\">test</span>] - <span class=\"number\">0x7fffaa791140</span></div><div class=\"line\">[NSObject <span class=\"keyword\">test</span>]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>向类对象 NSObject 发送一条 “test” 消息。NSObject 通过 isa 指针找到 NSObject 元类对象，在元类对象里查找类方法 +(void)test 。如果没有，NSObject 元类对象再通过 superclass 指针找到 NSObject 的类对象，在类对象中找到对象方法 -(void)test 并返回。  </p>\n<h2 id=\"class-对象调用对象方法的可能性\"><a href=\"#class-对象调用对象方法的可能性\" class=\"headerlink\" title=\"class 对象调用对象方法的可能性\"></a>class 对象调用对象方法的可能性</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[Person test]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>上面👆这句代码的本质是：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"name\">objc_getClass</span>(<span class=\"string\">\"Person\"</span>), sel_registerName(<span class=\"string\">\"test\"</span>))<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>向类对象 Person 发送一条 “test” 消息，这条消息里并没有包含方法的类型，即不区分类方法和对象方法。</p>\n<h1 id=\"窥探-struct-objc-class-的结构\"><a href=\"#窥探-struct-objc-class-的结构\" class=\"headerlink\" title=\"窥探 struct objc_class 的结构\"></a>窥探 struct objc_class 的结构</h1><h2 id=\"废弃的-struct-objc-class\"><a href=\"#废弃的-struct-objc-class\" class=\"headerlink\" title=\"废弃的 struct objc_class\"></a>废弃的 struct objc_class</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class personClass</span> = [Person class];</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">Class personMetaClass</span> = object_getClass(personClass);</div></pre></td></tr></table></figure>\n<p>在上面👆类对象的 isa 处提到过，类对象和元类对象的类型 Class 是一个指向结构体 objc_class 的指针：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> *<span class=\"title\">Class</span>;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass12.png\" alt=\"isa和superclass\"></p>\n<p>Jump TO Definition -&gt; objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !__OBJC2__</span></div><div class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure></p>\n<p>代码中包含以下代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span> !__OBJC2__</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">endif</span></div><div class=\"line\"></div><div class=\"line\">OBJC2_UNAVAILABLE</div></pre></td></tr></table></figure></p>\n<p>说明，结构体 struct objc_class 在 <strong>OBJC2</strong> 里被废弃掉了。</p>\n<h2 id=\"新版-struct-objc-class\"><a href=\"#新版-struct-objc-class\" class=\"headerlink\" title=\"新版 struct objc_class\"></a>新版 struct objc_class</h2><p>可以在 <a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">objc4-781</a> 找到最新的源码，打开 objc-runtime-new.h :</p>\n<p>objc_class：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> :</span> objc_object &#123;</div><div class=\"line\">    <span class=\"comment\">// Class ISA;</span></div><div class=\"line\">    Class superclass;</div><div class=\"line\">    <span class=\"keyword\">cache_t</span> cache;             <span class=\"comment\">// 方法缓存</span></div><div class=\"line\">    <span class=\"keyword\">class_data_bits_t</span> bits;    <span class=\"comment\">// 用于获取具体的类信息</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_t</span> *data() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> bits.data();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(<span class=\"keyword\">class_rw_t</span> *newData)</span> </span>&#123;</div><div class=\"line\">        bits.setData(newData);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ... 一堆方法</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>objc_object：<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_object</span> </span>&#123;</div><div class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_rw_ext_t、class_rw_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_rw_ext_t</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro;</div><div class=\"line\">    <span class=\"keyword\">method_array_t</span> methods; <span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">property_array_t</span> properties; <span class=\"comment\">//属性列表</span></div><div class=\"line\">    <span class=\"keyword\">protocol_array_t</span> protocols; <span class=\"comment\">//协议列表</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *demangledName;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> version;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_rw_t</span> &#123;</span></div><div class=\"line\">    <span class=\"comment\">// Be warned that Symbolication knows the layout of this structure.</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">    <span class=\"keyword\">uint16_t</span> witness;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SUPPORT_INDEXED_ISA</span></div><div class=\"line\">    <span class=\"keyword\">uint16_t</span> index;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    explicit_atomic&lt;<span class=\"keyword\">uintptr_t</span>&gt; ro_or_rw_ext;</div><div class=\"line\"></div><div class=\"line\">    Class firstSubclass;</div><div class=\"line\">    Class nextSiblingClass;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">ro_or_rw_ext_t</span> = objc::PointerUnion&lt;<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *, <span class=\"keyword\">class_rw_ext_t</span> *&gt;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> ro_or_rw_ext_t <span class=\"title\">get_ro_or_rwe</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;ro_or_rw_ext&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_ro_or_rwe</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;ro&#125;.storeAt(ro_or_rw_ext, memory_order_relaxed);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_ro_or_rwe</span><span class=\"params\">(<span class=\"keyword\">class_rw_ext_t</span> *rwe, <span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// the release barrier is so that the class_rw_ext_t::ro initialization</span></div><div class=\"line\">        <span class=\"comment\">// is visible to lockless readers</span></div><div class=\"line\">        rwe-&gt;ro = ro;</div><div class=\"line\">        <span class=\"keyword\">ro_or_rw_ext_t</span>&#123;rwe&#125;.storeAt(ro_or_rw_ext, memory_order_release);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_ext_t</span> *extAlloc(<span class=\"keyword\">const</span> <span class=\"keyword\">class_ro_t</span> *ro, <span class=\"keyword\">bool</span> deep = <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFlags</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> <span class=\"built_in\">set</span>)</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\">        __c11_atomic_fetch_or((_Atomic(<span class=\"keyword\">uint32_t</span>) *)&amp;flags, <span class=\"built_in\">set</span>, __ATOMIC_RELAXED);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ... 一堆方法</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_rw_t 可以翻译为 class_readWrite_table，即读写表。在 objc4 的旧版本里，class_rw_ext_t 里的成员变量是直接定义在 class_rw_t 里的。</p>\n<p>class_ro_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_ro_t</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> instanceStart;</div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> instanceSize; <span class=\"comment\">// instance 对象占用的内存空间</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">uint32_t</span> reserved;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * ivarLayout;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * name; <span class=\"comment\">//类名</span></div><div class=\"line\">    <span class=\"keyword\">method_list_t</span> * baseMethodList; <span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">protocol_list_t</span> * baseProtocols; <span class=\"comment\">//协议列表</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">ivar_list_t</span> * ivars; <span class=\"comment\">//成员变量列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> * weakIvarLayout;</div><div class=\"line\">    <span class=\"keyword\">property_list_t</span> *baseProperties; <span class=\"comment\">//属性列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This field exists only when RO_HAS_SWIFT_INITIALIZER is set.</span></div><div class=\"line\">    _objc_swiftMetadataInitializer __ptrauth_objc_method_list_imp _swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">    _<span class=\"function\">objc_swiftMetadataInitializer <span class=\"title\">swiftMetadataInitializer</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> _swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nil;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">method_list_t</span> *baseMethods() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baseMethodList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_ro_t</span> *duplicate() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</div><div class=\"line\">            <span class=\"keyword\">size_t</span> size = <span class=\"keyword\">sizeof</span>(*<span class=\"keyword\">this</span>) + <span class=\"keyword\">sizeof</span>(_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">class_ro_t</span> *ro = (<span class=\"keyword\">class_ro_t</span> *)memdup(<span class=\"keyword\">this</span>, size);</div><div class=\"line\">            ro-&gt;_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>] = <span class=\"keyword\">this</span>-&gt;_swiftMetadataInitializer_NEVER_USE[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">return</span> ro;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">size_t</span> size = <span class=\"keyword\">sizeof</span>(*<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">class_ro_t</span> *ro = (<span class=\"keyword\">class_ro_t</span> *)memdup(<span class=\"keyword\">this</span>, size);</div><div class=\"line\">            <span class=\"keyword\">return</span> ro;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>class_ro_t 可以翻译为 class_readOnly_table，即只读表。</p>\n<p>class_data_bits_t：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">class_data_bits_t</span> &#123;</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class_rw_t</span>* data() <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">class_rw_t</span> *)(bits &amp; FAST_DATA_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ...</div></pre></td></tr></table></figure></p>\n<p>class_data_bits_t 内部通过 bits &amp; FAST_DATA_MASK 找到 class_rw_t。</p>\n<p>objc_class、class_rw_t 和 class_ro_t 之间的关系可以简化为：<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass11.png\" alt=\"isa和superclass\"></p>\n<h2 id=\"查看-objc-class-对象的真实结构\"><a href=\"#查看-objc-class-对象的真实结构\" class=\"headerlink\" title=\"查看 objc_class 对象的真实结构\"></a>查看 objc_class 对象的真实结构</h2><p>导入 MJClassInfo.h，定义 MJPerson、MJStudent：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"MJClassInfo.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// MJPerson</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MJPerson</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> no;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)personInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)personClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MJPerson</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)personInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)personClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// MJStudent</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MJStudent</span> : <span class=\"title\">MJPerson</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">@public</span></div><div class=\"line\">    <span class=\"keyword\">int</span> _weight;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> height;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MJStudent</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)studentInstanceMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">+ (<span class=\"keyword\">void</span>)studentClassMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        MJStudent *stu = [[MJStudent alloc] init];</div><div class=\"line\">        stu-&gt;_weight = <span class=\"number\">10</span>;</div><div class=\"line\">        </div><div class=\"line\">        mj_objc_class *studentClass = (__bridge mj_objc_class *)([MJStudent <span class=\"keyword\">class</span>]);</div><div class=\"line\">        mj_objc_class *personClass = (__bridge mj_objc_class *)([MJPerson <span class=\"keyword\">class</span>]);</div><div class=\"line\">        </div><div class=\"line\">        class_rw_t *studentClassData = studentClass-&gt;data();</div><div class=\"line\">        class_rw_t *personClassData = personClass-&gt;data();</div><div class=\"line\">        </div><div class=\"line\">        class_rw_t *studentMetaClassData = studentClass-&gt;metaClass()-&gt;data();</div><div class=\"line\">        class_rw_t *personMetaClassData = personClass-&gt;metaClass()-&gt;data();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1111\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加断点后，可以在控制栏里看到每个类内部的具体信息了。</p>\n<p>studentClassData:<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass13.png\" alt=\"isa和superclass\"></p>\n<p>可以看到 Student 的类对象里存储了属性、对象方法、协议、成员变量信息。</p>\n<p>studentMetaClassData:<br><img src=\"/2020/05/11/OC底层/原理/isa和superclass/isa和superclass14.png\" alt=\"isa和superclass\"></p>\n<p>可以看到 Student 的元类对象里存储了类方法、协议。属性、成员变量信息都为 NULL。  </p>\n<p>元类对象中存储的协议信息与类对象中存储的协议信息地址相同，所以是同一份。如何确定协议信息是存储在类对象中还是元类对象中呢？还是两个都存储了？ </p>\n<h2 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>OC 的类信息存放在哪里？<br>对象方法、属性、成员变量、协议信息，存放在 class 对象中；<br>类方法，存放在 meta-class 对象中；<br>成员变量的具体值，存放在 instance 对象；</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_01.png","slug":"accessInstanceVariablesDirectly_01.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_07.png","slug":"accessInstanceVariablesDirectly_07.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_08.png","slug":"accessInstanceVariablesDirectly_08.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/AFHTTPSessionManager/AFHTTPSessionManager/AFHTTPSessionManager.jpeg","post":"ckae40aog0002te03q8ntkako","slug":"AFHTTPSessionManager.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_02.png","slug":"accessInstanceVariablesDirectly_02.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_05.png","slug":"accessInstanceVariablesDirectly_05.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_09.png","slug":"accessInstanceVariablesDirectly_09.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类01.png","post":"ckae40ar1000nte035a20pfj4","slug":"OC对象的分类01.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类02.png","post":"ckae40ar1000nte035a20pfj4","slug":"OC对象的分类02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的分类/OC对象的分类03.png","post":"ckae40ar1000nte035a20pfj4","slug":"OC对象的分类03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理01.png","post":"ckae40aqz000kte030yranl48","slug":"Category的实现原理01.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理02.png","post":"ckae40aqz000kte030yranl48","slug":"Category的实现原理02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理03.png","post":"ckae40aqz000kte030yranl48","slug":"Category的实现原理03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/Category的实现原理/Category的实现原理04.png","slug":"Category的实现原理04.png","post":"ckae40aqz000kte030yranl48","modified":1,"renderable":0},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质02.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质03.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶01.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶01.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶02.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶03.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶04.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶04.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶05.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶05.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/OC对象的本质进阶06.png","post":"ckae40ar2000ote0363wn07sa","slug":"OC对象的本质进阶06.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/ObjectiveC_C_C++_汇编语言_机器语言.png","post":"ckae40ar2000ote0363wn07sa","slug":"ObjectiveC_C_C++_汇编语言_机器语言.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/OC对象的本质/取消编译main_arm64_cpp.png","post":"ckae40ar2000ote0363wn07sa","slug":"取消编译main_arm64_cpp.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass01.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass01.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass02.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass03.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass04.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass04.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass05.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass05.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass06.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass06.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass07.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass07.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass08.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass08.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass09.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass09.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass10.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass10.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass11.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass11.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass12.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass12.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass13.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass13.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/isa和superclass/isa和superclass14.png","post":"ckae40ar4000pte03f5q3rx3e","slug":"isa和superclass14.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO01.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO01.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO02.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO02.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO03.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO04.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO04.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO05.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO05.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO06.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO06.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/KVO07.png","post":"ckae40ar0000lte03k1x1cfed","slug":"KVO07.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_03.png","post":"ckae40ar0000lte03k1x1cfed","slug":"accessInstanceVariablesDirectly_03.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_04.png","post":"ckae40ar0000lte03k1x1cfed","slug":"accessInstanceVariablesDirectly_04.png","modified":1,"renderable":1},{"_id":"source/_posts/OC底层/原理/KVO/accessInstanceVariablesDirectly_06.png","slug":"accessInstanceVariablesDirectly_06.png","post":"ckae40ar0000lte03k1x1cfed","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckae40aog0002te03q8ntkako","tag_id":"ckae40aoj0004te03u2wgr0pz","_id":"ckae40aoq0009te03pyqlvn3a"},{"post_id":"ckae40aoi0003te038uj5btv4","tag_id":"ckae40aoj0004te03u2wgr0pz","_id":"ckae40aos000cte03zlkrf7m9"},{"post_id":"ckae40aok0005te03q4bxmsn7","tag_id":"ckae40aoj0004te03u2wgr0pz","_id":"ckae40aow000ete03vmsb39d0"},{"post_id":"ckae40aom0006te037jolrzgn","tag_id":"ckae40aou000dte03e0e0uso3","_id":"ckae40aoy000gte03kl94sdq4"},{"post_id":"ckae40aon0007te03zgwvjbnv","tag_id":"ckae40aox000fte03g11y1v25","_id":"ckae40ap0000ite03581vvnyb"},{"post_id":"ckae40aoq000ate036871f850","tag_id":"ckae40aox000fte03g11y1v25","_id":"ckae40ap1000jte03li1ocf5y"},{"post_id":"ckae40ar2000ote0363wn07sa","tag_id":"ckae40ar0000mte0367yk5j8p","_id":"ckae40ar5000rte03h1g8nw7u"},{"post_id":"ckae40aqz000kte030yranl48","tag_id":"ckae40ar0000mte0367yk5j8p","_id":"ckae40ar6000ste03fs9gd98m"},{"post_id":"ckae40ar4000pte03f5q3rx3e","tag_id":"ckae40ar0000mte0367yk5j8p","_id":"ckae40ar6000ute03tjo688sv"},{"post_id":"ckae40ar0000lte03k1x1cfed","tag_id":"ckae40ar0000mte0367yk5j8p","_id":"ckae40ar6000vte03gct014qp"},{"post_id":"ckae40ar1000nte035a20pfj4","tag_id":"ckae40ar0000mte0367yk5j8p","_id":"ckae40ar7000wte03jex95oon"}],"Tag":[{"name":"OC","_id":"ckae40aoj0004te03u2wgr0pz"},{"name":"Swift","_id":"ckae40aou000dte03e0e0uso3"},{"name":"Other","_id":"ckae40aox000fte03g11y1v25"},{"name":"OC底层原理","_id":"ckae40ar0000mte0367yk5j8p"}]}}